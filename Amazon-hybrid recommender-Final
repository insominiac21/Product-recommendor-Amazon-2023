{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "276c0b82",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T08:18:18.425038Z",
     "iopub.status.busy": "2025-10-02T08:18:18.424215Z",
     "iopub.status.idle": "2025-10-02T08:18:20.190151Z",
     "shell.execute_reply": "2025-10-02T08:18:20.189469Z"
    },
    "papermill": {
     "duration": 1.77689,
     "end_time": "2025-10-02T08:18:20.191821",
     "exception": false,
     "start_time": "2025-10-02T08:18:18.414931",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "956e83d3",
   "metadata": {
    "papermill": {
     "duration": 0.006263,
     "end_time": "2025-10-02T08:18:20.205068",
     "exception": false,
     "start_time": "2025-10-02T08:18:20.198805",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Variant: Run with 1 million sample rows (second phase)\n",
    "\n",
    "This variant includes `SAMPLE_ROWS=1000000`. To actually restrict the dataset to 100k rows, add `.sample(SAMPLE_ROWS, random_state=42)` to the cell that loads the CSV (or adapt that read to use SAMPLE_ROWS). The rest of the notebook is unchanged and contains detailed explanations before each original code cell."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3758dc05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T08:18:20.219040Z",
     "iopub.status.busy": "2025-10-02T08:18:20.218586Z",
     "iopub.status.idle": "2025-10-02T08:18:20.222738Z",
     "shell.execute_reply": "2025-10-02T08:18:20.221934Z"
    },
    "papermill": {
     "duration": 0.012772,
     "end_time": "2025-10-02T08:18:20.224206",
     "exception": false,
     "start_time": "2025-10-02T08:18:20.211434",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "SAMPLE_ROWS = 1000000  # set to 1000000 to use a 1 million-sample in the data-loading step\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4c510cd",
   "metadata": {
    "papermill": {
     "duration": 0.006636,
     "end_time": "2025-10-02T08:18:20.237500",
     "exception": false,
     "start_time": "2025-10-02T08:18:20.230864",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Amazon Hybrid Recommender — Final Notebook\n",
    "\n",
    "Comprehensive, runnable notebook containing prototype and scale stages, candidate generation, feature engineering, hard-negative mining, LightGBM ranking, diagnostics, and recommendations. This version contains full code and explanatory markdowns. Run cells sequentially. Some cells are resource-heavy (SBERT encoding, ALS, FAISS). The notebook includes CPU fallbacks for environments without `implicit` or `faiss`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51be38be",
   "metadata": {
    "papermill": {
     "duration": 0.006057,
     "end_time": "2025-10-02T08:18:20.250209",
     "exception": false,
     "start_time": "2025-10-02T08:18:20.244152",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## How to run\n",
    "\n",
    "1. Run top-to-bottom. If your environment is offline or lacks `implicit`/`faiss`, the notebook falls back to CPU-friendly alternatives.\n",
    "2. The notebook writes artifact files to `OUT_DIR` (default `/kaggle/working`).\n",
    "3. If you install new packages mid-run (e.g., `implicit`), you may need to restart the kernel.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0cb7b13",
   "metadata": {
    "papermill": {
     "duration": 0.006032,
     "end_time": "2025-10-02T08:18:20.262685",
     "exception": false,
     "start_time": "2025-10-02T08:18:20.256653",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 3\n",
    "\n",
    "**Purpose:** Imports libraries used later.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Cell 1: Setup — Install-check and imports (non-blocking installs)` → Comment describing intent.\n",
    "- `# Optional: uncomment pip installs if you have internet and want to ensure all libs are present.` → Comment describing intent.\n",
    "- `!pip install -q datasets sentence-transformers scikit-learn lightgbm optuna joblib tqdm pandas scipy faiss-cpu implicit` → Performs a step relevant to data processing or modelling.\n",
    "- `import os, time, warnings, importlib` → Imports module(s).\n",
    "- `import numpy as np, pandas as pd, random, joblib` → Imports module(s).\n",
    "- `from collections import Counter, defaultdict` → Imports module(s).\n",
    "- `from scipy.sparse import csr_matrix` → Imports module(s).\n",
    "- `from tqdm.auto import tqdm` → Imports module(s).\n",
    "- `from math import log2` → Imports module(s).\n",
    "- `warnings.filterwarnings('ignore', category=UserWarning)` → Performs a step relevant to data processing or modelling.\n",
    "- `# Feature list and output directory (kept consistent with original notebook)` → Comment describing intent.\n",
    "- `OUT_DIR = '/kaggle/working'` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9b6ac025",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T08:18:20.277303Z",
     "iopub.status.busy": "2025-10-02T08:18:20.277005Z",
     "iopub.status.idle": "2025-10-02T08:19:58.458566Z",
     "shell.execute_reply": "2025-10-02T08:19:58.457507Z"
    },
    "papermill": {
     "duration": 98.190797,
     "end_time": "2025-10-02T08:19:58.460578",
     "exception": false,
     "start_time": "2025-10-02T08:18:20.269781",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m31.4/31.4 MB\u001b[0m \u001b[31m58.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.9/8.9 MB\u001b[0m \u001b[31m101.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m193.6/193.6 kB\u001b[0m \u001b[31m12.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m89.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m77.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m42.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m8.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m32.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m9.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m7.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m17.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "bigframes 2.8.0 requires google-cloud-bigquery-storage<3.0.0,>=2.30.0, which is not installed.\r\n",
      "cesium 0.12.4 requires numpy<3.0,>=2.0, but you have numpy 1.26.4 which is incompatible.\r\n",
      "gcsfs 2025.3.2 requires fsspec==2025.3.2, but you have fsspec 2025.3.0 which is incompatible.\r\n",
      "bigframes 2.8.0 requires google-cloud-bigquery[bqstorage,pandas]>=3.31.0, but you have google-cloud-bigquery 3.25.0 which is incompatible.\r\n",
      "bigframes 2.8.0 requires rich<14,>=12.4.4, but you have rich 14.0.0 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0mEnvironment flags — HAS_SBERT: True HAS_IMPLICIT: True HAS_FAISS: True\n"
     ]
    }
   ],
   "source": [
    "# Cell 1: Setup — Install-check and imports (non-blocking installs)\n",
    "# Optional: uncomment pip installs if you have internet and want to ensure all libs are present.\n",
    "!pip install -q datasets sentence-transformers scikit-learn lightgbm optuna joblib tqdm pandas scipy faiss-cpu implicit\n",
    "\n",
    "import os, time, warnings, importlib\n",
    "import numpy as np, pandas as pd, random, joblib\n",
    "from collections import Counter, defaultdict\n",
    "from scipy.sparse import csr_matrix\n",
    "from tqdm.auto import tqdm\n",
    "from math import log2\n",
    "\n",
    "warnings.filterwarnings('ignore', category=UserWarning)\n",
    "\n",
    "# Feature list and output directory (kept consistent with original notebook)\n",
    "OUT_DIR = '/kaggle/working'\n",
    "feature_names = ['sem_score','sem_rank','als_score','als_rank','svd_score','svd_rank','pop_log','pop_rank','recency_days','title_len','txt_len','user_mean_rating','user_activity_count']\n",
    "feat_cols = feature_names\n",
    "now_ts = int(time.time() * 1000)\n",
    "\n",
    "# Flags for optional libs — later cells use these flags to decide runtime paths\n",
    "HAS_IMPLICIT = importlib.util.find_spec('implicit') is not None\n",
    "HAS_FAISS = importlib.util.find_spec('faiss') is not None\n",
    "HAS_SBERT = importlib.util.find_spec('sentence_transformers') is not None\n",
    "\n",
    "print('Environment flags — HAS_SBERT:', HAS_SBERT, 'HAS_IMPLICIT:', HAS_IMPLICIT, 'HAS_FAISS:', HAS_FAISS)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90045d91",
   "metadata": {
    "papermill": {
     "duration": 0.026409,
     "end_time": "2025-10-02T08:19:58.515865",
     "exception": false,
     "start_time": "2025-10-02T08:19:58.489456",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1 — Prototype Data Load (10k)\n",
    "\n",
    "Load a small streaming sample (10k rows) from the Hugging Face Amazon Reviews dataset to iterate quickly and debug logic. This cell normalizes timestamps to milliseconds, drops records missing `asin` or `reviewerID`, and writes `sampled_reviews_10k.parquet` to `OUT_DIR`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "41e2f9ea",
   "metadata": {
    "papermill": {
     "duration": 0.026127,
     "end_time": "2025-10-02T08:19:58.568151",
     "exception": false,
     "start_time": "2025-10-02T08:19:58.542024",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 5\n",
    "\n",
    "**Purpose:** Imports libraries used later. Saves results or models to disk.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Prototype Data Load (10k)` → Comment describing intent.\n",
    "- `SAMPLE_N = 10000` → Performs a step relevant to data processing or modelling.\n",
    "- `HF_DATASET = 'McAuley-Lab/Amazon-Reviews-2023'` → Performs a step relevant to data processing or modelling.\n",
    "- `HF_CONFIG = 'raw_review_Electronics'` → Performs a step relevant to data processing or modelling.\n",
    "- `OUT_DIR = OUT_DIR if 'OUT_DIR' in globals() else '/kaggle/working'` → Performs a step relevant to data processing or modelling.\n",
    "- `from datasets import load_dataset` → Imports module(s).\n",
    "- `rows = []` → Performs a step relevant to data processing or modelling.\n",
    "- `cnt = 0` → Performs a step relevant to data processing or modelling.\n",
    "- `t0 = time.time()` → Performs a step relevant to data processing or modelling.\n",
    "- `ds_iter = load_dataset(HF_DATASET, HF_CONFIG, split='full', streaming=True, trust_remote_code=True)` → Performs a step relevant to data processing or modelling.\n",
    "- `for rec in ds_iter:` → Performs a step relevant to data processing or modelling.\n",
    "- `try:` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e45f55a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T08:19:58.623069Z",
     "iopub.status.busy": "2025-10-02T08:19:58.622480Z",
     "iopub.status.idle": "2025-10-02T08:20:05.322226Z",
     "shell.execute_reply": "2025-10-02T08:20:05.321164Z"
    },
    "papermill": {
     "duration": 6.728899,
     "end_time": "2025-10-02T08:20:05.323766",
     "exception": false,
     "start_time": "2025-10-02T08:19:58.594867",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "526ef63b5e5d4fe4b2bb2920cffa7b31",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "README.md: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d6d35131f2f74e939ee47f97cfdbe22e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Amazon-Reviews-2023.py: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded 10000 rows. Saved to /kaggle/working/sampled_reviews_10k.parquet\n"
     ]
    }
   ],
   "source": [
    "# Prototype Data Load (10k)\n",
    "SAMPLE_N = 10000\n",
    "HF_DATASET = 'McAuley-Lab/Amazon-Reviews-2023'\n",
    "HF_CONFIG = 'raw_review_Electronics'\n",
    "OUT_DIR = OUT_DIR if 'OUT_DIR' in globals() else '/kaggle/working'\n",
    "\n",
    "from datasets import load_dataset\n",
    "\n",
    "rows = []\n",
    "cnt = 0\n",
    "t0 = time.time()\n",
    "ds_iter = load_dataset(HF_DATASET, HF_CONFIG, split='full', streaming=True, trust_remote_code=True)\n",
    "for rec in ds_iter:\n",
    "    try:\n",
    "        asin = rec.get('asin') or rec.get('parent_asin')\n",
    "        user = rec.get('user_id') or rec.get('reviewerID')\n",
    "        text = rec.get('text') or rec.get('reviewText') or ''\n",
    "        overall = rec.get('rating') or rec.get('overall')\n",
    "        ts = rec.get('timestamp') or rec.get('unixReviewTime') or 0\n",
    "        helpful = rec.get('helpful_vote') or 0\n",
    "        if asin is None or user is None: \n",
    "            continue\n",
    "        ts_i = int(ts); ts_i = ts_i * 1000 if ts_i < 10**10 else ts_i\n",
    "        rows.append({'asin': str(asin), 'reviewerID': str(user), 'reviewText': str(text), 'overall': float(overall) if overall is not None else float('nan'), 'unixReviewTime': int(ts_i), 'helpful_vote': int(helpful)})\n",
    "        cnt += 1\n",
    "        if cnt >= SAMPLE_N: break\n",
    "    except Exception:\n",
    "        continue\n",
    "df = pd.DataFrame(rows)\n",
    "os.makedirs(OUT_DIR, exist_ok=True)\n",
    "df.to_parquet(f\"{OUT_DIR}/sampled_reviews_10k.parquet\", index=False)\n",
    "print('Loaded', len(df), 'rows. Saved to', f\"{OUT_DIR}/sampled_reviews_10k.parquet\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee9699bf",
   "metadata": {
    "papermill": {
     "duration": 0.027021,
     "end_time": "2025-10-02T08:20:05.379089",
     "exception": false,
     "start_time": "2025-10-02T08:20:05.352068",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Build maps and interaction (prototype)\n",
    "\n",
    "Create `item_map`, `user_map` and the sparse interaction matrix used by ALS and candidate generation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da3e13f8",
   "metadata": {
    "papermill": {
     "duration": 0.146908,
     "end_time": "2025-10-02T08:20:05.552777",
     "exception": false,
     "start_time": "2025-10-02T08:20:05.405869",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 7\n",
    "\n",
    "**Purpose:** Performs an operation relevant to the pipeline (see code).\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Build maps and interaction (prototype)` → Comment describing intent.\n",
    "- `unique_asins = sorted(df['asin'].unique().tolist())` → Performs a step relevant to data processing or modelling.\n",
    "- `unique_users = sorted(df['reviewerID'].unique().tolist())` → Performs a step relevant to data processing or modelling.\n",
    "- `item_map = {a:i for i,a in enumerate(unique_asins)}` → Performs a step relevant to data processing or modelling.\n",
    "- `inv_item_map = {i:a for a,i in item_map.items()}` → Performs a step relevant to data processing or modelling.\n",
    "- `user_map = {u:i for i,u in enumerate(unique_users)}` → Performs a step relevant to data processing or modelling.\n",
    "- `inv_user_map = {i:u for u,i in user_map.items()}` → Performs a step relevant to data processing or modelling.\n",
    "- `n_users, n_items = len(user_map), len(item_map)` → Performs a step relevant to data processing or modelling.\n",
    "- `u_idx = []; i_idx = []; data = []` → Performs a step relevant to data processing or modelling.\n",
    "- `for _, r in df.iterrows():` → Performs a step relevant to data processing or modelling.\n",
    "- `try:` → Performs a step relevant to data processing or modelling.\n",
    "- `u = user_map[r['reviewerID']]; i = item_map[r['asin']]` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ba03ee09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T08:20:05.608138Z",
     "iopub.status.busy": "2025-10-02T08:20:05.607148Z",
     "iopub.status.idle": "2025-10-02T08:20:06.126935Z",
     "shell.execute_reply": "2025-10-02T08:20:06.125958Z"
    },
    "papermill": {
     "duration": 0.548984,
     "end_time": "2025-10-02T08:20:06.128405",
     "exception": false,
     "start_time": "2025-10-02T08:20:05.579421",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Maps built: 1561 users x 8907 items\n"
     ]
    }
   ],
   "source": [
    "# Build maps and interaction (prototype)\n",
    "unique_asins = sorted(df['asin'].unique().tolist())\n",
    "unique_users = sorted(df['reviewerID'].unique().tolist())\n",
    "item_map = {a:i for i,a in enumerate(unique_asins)}\n",
    "inv_item_map = {i:a for a,i in item_map.items()}\n",
    "user_map = {u:i for i,u in enumerate(unique_users)}\n",
    "inv_user_map = {i:u for u,i in user_map.items()}\n",
    "\n",
    "n_users, n_items = len(user_map), len(item_map)\n",
    "u_idx = []; i_idx = []; data = []\n",
    "for _, r in df.iterrows():\n",
    "    try:\n",
    "        u = user_map[r['reviewerID']]; i = item_map[r['asin']]\n",
    "        w = float(r['overall']) if not pd.isna(r['overall']) else 1.0 + int(r.get('helpful_vote',0))\n",
    "        u_idx.append(u); i_idx.append(i); data.append(w)\n",
    "    except KeyError:\n",
    "        continue\n",
    "\n",
    "interaction = csr_matrix((data, (u_idx, i_idx)), shape=(n_users, n_items)).tocsr()\n",
    "item_user_matrix = interaction.T.tocsr()\n",
    "pop_counts = Counter(df['asin'])\n",
    "test_df_proto = df.groupby('reviewerID').tail(1).reset_index(drop=True)\n",
    "print('Maps built:', n_users, 'users x', n_items, 'items')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af736bd5",
   "metadata": {
    "papermill": {
     "duration": 0.02666,
     "end_time": "2025-10-02T08:20:06.183162",
     "exception": false,
     "start_time": "2025-10-02T08:20:06.156502",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 2 — Helper functions & Feature Builder\n",
    "\n",
    "This cell defines helper utilities used throughout the notebook:\n",
    "\n",
    "- `user_profile_emb`: compute a user's profile embedding (mean of item embeddings) with safe fallbacks.\n",
    "- `build_candidates_union`: aggregate candidates from semantic nearest neighbors, ALS, SVD, popularity and MF neighbors.\n",
    "- `build_features_for_candidates`: compute features used by the LightGBM reranker.\n",
    "\n",
    "All functions include robust error handling so the notebook runs even if optional libraries are missing."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b612fe0e",
   "metadata": {
    "papermill": {
     "duration": 0.026272,
     "end_time": "2025-10-02T08:20:06.236140",
     "exception": false,
     "start_time": "2025-10-02T08:20:06.209868",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 9\n",
    "\n",
    "**Purpose:** Imports libraries used later. Defines function(s) used downstream.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Helper functions and feature builder (robust)` → Comment describing intent.\n",
    "- `import numpy as np, pandas as pd, math` → Imports module(s).\n",
    "- `from collections import defaultdict` → Imports module(s).\n",
    "- `# Ensure inv maps exist` → Comment describing intent.\n",
    "- `if 'inv_item_map' not in globals(): inv_item_map = {}` → Performs a step relevant to data processing or modelling.\n",
    "- `if 'inv_user_map' not in globals(): inv_user_map = {}` → Performs a step relevant to data processing or modelling.\n",
    "- `def user_profile_emb(uidx, emb_array, df_data, i_map, u_map):` → Performs a step relevant to data processing or modelling.\n",
    "- `# uid -> user string` → Comment describing intent.\n",
    "- `uid = None` → Performs a step relevant to data processing or modelling.\n",
    "- `if 'inv_user_map' in globals() and uidx in inv_user_map:` → Performs a step relevant to data processing or modelling.\n",
    "- `uid = inv_user_map.get(uidx)` → Performs a step relevant to data processing or modelling.\n",
    "- `if uid is None:` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6e679b56",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T08:20:06.291824Z",
     "iopub.status.busy": "2025-10-02T08:20:06.291464Z",
     "iopub.status.idle": "2025-10-02T08:20:06.319601Z",
     "shell.execute_reply": "2025-10-02T08:20:06.318755Z"
    },
    "papermill": {
     "duration": 0.058464,
     "end_time": "2025-10-02T08:20:06.321017",
     "exception": false,
     "start_time": "2025-10-02T08:20:06.262553",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Helper functions and feature builder (robust)\n",
    "import numpy as np, pandas as pd, math\n",
    "from collections import defaultdict\n",
    "\n",
    "# Ensure inv maps exist\n",
    "if 'inv_item_map' not in globals(): inv_item_map = {}\n",
    "if 'inv_user_map' not in globals(): inv_user_map = {}\n",
    "\n",
    "def user_profile_emb(uidx, emb_array, df_data, i_map, u_map):\n",
    "    # uid -> user string\n",
    "    uid = None\n",
    "    if 'inv_user_map' in globals() and uidx in inv_user_map:\n",
    "        uid = inv_user_map.get(uidx)\n",
    "    if uid is None:\n",
    "        # fallback: if uidx already a string, try that\n",
    "        uid = uidx if isinstance(uidx, str) else None\n",
    "    if uid is None:\n",
    "        return emb_array.mean(axis=0)\n",
    "    item_list = df_data[df_data['reviewerID']==uid]['asin'].map(i_map).dropna().astype(int).tolist()\n",
    "    if item_list and len(item_list)>0:\n",
    "        return emb_array[item_list].mean(axis=0)\n",
    "    else:\n",
    "        return emb_array.mean(axis=0)\n",
    "\n",
    "def build_candidates_union(uidx, emb_array, als_model, svd_facs, i_map, p_counts, u_map, df_data, inter_mat, top_sem=500, top_als=200, top_svd=200, top_pop=200, top_mf=200, max_cands=2000):\n",
    "    candidates = []; seen = set()\n",
    "    # semantic\n",
    "    if emb_array is not None:\n",
    "        try:\n",
    "            up = user_profile_emb(uidx, emb_array, df_data, i_map, u_map).astype('float32')\n",
    "            un = up / (np.linalg.norm(up) + 1e-9)\n",
    "            scores = emb_array.dot(un)\n",
    "            sem_idxs = np.argsort(-scores)[:top_sem]\n",
    "            for it in map(int, sem_idxs):\n",
    "                if it not in seen: seen.add(it); candidates.append(it)\n",
    "        except Exception:\n",
    "            pass\n",
    "    # ALS recommend\n",
    "    if als_model is not None:\n",
    "        try:\n",
    "            rec = als_model.recommend(uidx, inter_mat[uidx], N=top_als)\n",
    "            als_list = []\n",
    "            if isinstance(rec, list) and len(rec)>0 and isinstance(rec[0], (list,tuple)):\n",
    "                als_list = [int(r[0]) for r in rec]\n",
    "            elif isinstance(rec, tuple) and len(rec)==2:\n",
    "                als_list = [int(x) for x in rec[0]]\n",
    "            else:\n",
    "                try:\n",
    "                    als_list = [int(r[0]) if isinstance(r,(list,tuple)) else int(r) for r in rec]\n",
    "                except Exception:\n",
    "                    als_list = []\n",
    "            for it in als_list:\n",
    "                if it not in seen: seen.add(it); candidates.append(it)\n",
    "        except Exception:\n",
    "            pass\n",
    "    # SVD global similarity\n",
    "    if svd_facs is not None:\n",
    "        try:\n",
    "            user_vec = svd_facs.mean(axis=0)\n",
    "            svd_scores = svd_facs.dot(user_vec)\n",
    "            svd_idx = np.argsort(-svd_scores)[:top_svd]\n",
    "            for it in map(int, svd_idx):\n",
    "                if it not in seen: seen.add(it); candidates.append(it)\n",
    "        except Exception:\n",
    "            pass\n",
    "    # popularity\n",
    "    try:\n",
    "        pop_list = [i_map.get(a) for a,_ in p_counts.most_common(top_pop) if a in i_map]\n",
    "        for it in pop_list:\n",
    "            if it not in seen: seen.add(it); candidates.append(it)\n",
    "    except Exception:\n",
    "        pass\n",
    "    # MF neighbors (approx via item factors if available)\n",
    "    try:\n",
    "        if als_model is not None and hasattr(als_model, 'item_factors'):\n",
    "            item_facs = als_model.item_factors\n",
    "            user_items = inter_mat[uidx].indices.tolist() if hasattr(inter_mat[uidx], 'indices') else []\n",
    "            for it in user_items[:5]:\n",
    "                vec = item_facs[it]\n",
    "                sim = item_facs.dot(vec)\n",
    "                neigh = np.argsort(-sim)[:top_mf]\n",
    "                for ni in map(int, neigh):\n",
    "                    if ni not in seen: seen.add(ni); candidates.append(ni)\n",
    "    except Exception:\n",
    "        pass\n",
    "    return candidates[:max_cands]\n",
    "\n",
    "def build_features_for_candidates(uidx, cands, emb_array, als_facs, als_u_facs, svd_facs, df_data, i_map, u_map, p_counts, feat_names, now_ts):\n",
    "    n = len(cands); X = np.zeros((n, len(feat_names)), dtype=float)\n",
    "    # user emb\n",
    "    try:\n",
    "        uemb = user_profile_emb(uidx, emb_array, df_data, i_map, u_map); uembn = uemb/(np.linalg.norm(uemb)+1e-9)\n",
    "    except Exception:\n",
    "        uembn = emb_array.mean(axis=0); uembn = uembn/(np.linalg.norm(uembn)+1e-9)\n",
    "    # sem\n",
    "    try:\n",
    "        sem_scores = (emb_array[cands] * uembn).sum(axis=1)\n",
    "        X[:, feat_names.index('sem_score')] = sem_scores\n",
    "        ranks = np.empty(n, dtype=int); ranks[np.argsort(-sem_scores)] = np.arange(n); X[:, feat_names.index('sem_rank')] = ranks\n",
    "    except Exception:\n",
    "        pass\n",
    "    # als\n",
    "    try:\n",
    "        if als_facs is not None and als_u_facs is not None:\n",
    "            uf = als_u_facs[uidx] if uidx < als_u_facs.shape[0] else als_facs.mean(axis=0)\n",
    "            als_scores = np.dot(als_facs[cands], uf)\n",
    "            X[:, feat_names.index('als_score')] = als_scores\n",
    "            ranks = np.empty(n, dtype=int); ranks[np.argsort(-als_scores)] = np.arange(n); X[:, feat_names.index('als_rank')] = ranks\n",
    "    except Exception:\n",
    "        pass\n",
    "    # svd\n",
    "    try:\n",
    "        if svd_facs is not None:\n",
    "            user_fact = svd_facs.mean(axis=0); svd_scores = svd_facs[cands].dot(user_fact)\n",
    "            X[:, feat_names.index('svd_score')] = svd_scores; ranks = np.empty(n, dtype=int); ranks[np.argsort(-svd_scores)] = np.arange(n); X[:, feat_names.index('svd_rank')] = ranks\n",
    "    except Exception:\n",
    "        pass\n",
    "    # pop & recency\n",
    "    try:\n",
    "        pop_vals = np.array([p_counts.get(inv_item_map.get(i, ''), 0) for i in cands], dtype=float)\n",
    "        X[:, feat_names.index('pop_log')] = np.log1p(pop_vals); ranks = np.empty(n,dtype=int); ranks[np.argsort(-pop_vals)] = np.arange(n); X[:, feat_names.index('pop_rank')] = ranks\n",
    "        recency_ms = np.array([item_last_ts.get(inv_item_map.get(i, ''), 0) for i in cands], dtype=float); X[:, feat_names.index('recency_days')] = ((now_ts - recency_ms)/(1000*60*60*24)).clip(min=0)\n",
    "    except Exception:\n",
    "        pass\n",
    "    # text & user stats\n",
    "    try:\n",
    "        title_len=[]; txt_len=[]\n",
    "        for idx in cands:\n",
    "            asin = inv_item_map.get(idx, ''); rows_sub = df_data[df_data['asin']==asin]\n",
    "            title = rows_sub['title'].iloc[0] if ('title' in rows_sub.columns and len(rows_sub)>0 and pd.notna(rows_sub['title'].iloc[0])) else ''\n",
    "            text = rows_sub['reviewText'].iloc[0] if ('reviewText' in rows_sub.columns and len(rows_sub)>0 and pd.notna(rows_sub['reviewText'].iloc[0])) else ''\n",
    "            title_len.append(len(str(title))); txt_len.append(len(str(text)))\n",
    "        X[:, feat_names.index('title_len')] = np.array(title_len); X[:, feat_names.index('txt_len')] = np.array(txt_len)\n",
    "        uid = inv_user_map.get(uidx, None); user_rows = df_data[df_data['reviewerID']==uid] if uid else pd.DataFrame()\n",
    "        X[:, feat_names.index('user_mean_rating')] = float(user_rows['overall'].mean() if len(user_rows)>0 else 0.0); X[:, feat_names.index('user_activity_count')] = float(len(user_rows))\n",
    "    except Exception:\n",
    "        pass\n",
    "    return {'X': X, 'cands': cands, 'feature_names': feat_names}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9caeec1",
   "metadata": {
    "papermill": {
     "duration": 0.026748,
     "end_time": "2025-10-02T08:20:06.376216",
     "exception": false,
     "start_time": "2025-10-02T08:20:06.349468",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 3 — Hard-negative mining (prototype)\n",
    "\n",
    "Create meta-training pairs (pos/neg) for the LTR model. This prototype uses a combination of hard negatives (top-ranked non-pos by ALS/SVD) and random negatives."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "716a1982",
   "metadata": {
    "papermill": {
     "duration": 0.026837,
     "end_time": "2025-10-02T08:20:06.429912",
     "exception": false,
     "start_time": "2025-10-02T08:20:06.403075",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 11\n",
    "\n",
    "**Purpose:** Imports libraries used later.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Hard-negative mining (prototype)` → Comment describing intent.\n",
    "- `import random` → Imports module(s).\n",
    "- `USERS_TO_USE = 300; HARD_NEG_PER_POS = 60; RANDOM_NEG_PER_POS = 5` → Performs a step relevant to data processing or modelling.\n",
    "- `meta_rows = []; all_users = list(df['reviewerID'].unique()); sample_users = all_users[:min(USERS_TO_USE, len(all_users))]` → Performs a step relevant to data processing or modelling.\n",
    "- `for uid in tqdm(sample_users, desc='Building Meta Prototype'):` → Performs a step relevant to data processing or modelling.\n",
    "- `uidx = user_map.get(uid);` → Performs a step relevant to data processing or modelling.\n",
    "- `if uidx is None: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `cands = build_candidates_union(uidx, None, None, None, item_map, pop_counts, user_map, df, interaction, top_sem=500, top_als=200, top_svd=200, top_pop=200, max_cands=1000)` → Performs a step relevant to data processing or modelling.\n",
    "- `if not cands: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `mf = build_features_for_candidates(uidx, cands, np.zeros((len(item_map), 768)), None, None, None, df, item_map, user_map, pop_counts, feature_names, now_ts)` → Performs a step relevant to data processing or modelling.\n",
    "- `Xc = mf['X']; cidx = mf['cands']; fns = mf['feature_names']` → Performs a step relevant to data processing or modelling.\n",
    "- `true_asins = test_df_proto[test_df_proto['reviewerID']==uid]['asin'].tolist(); true_idxs = [item_map[a] for a in true_asins if a in item_map]` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ffba40cf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T08:20:06.486319Z",
     "iopub.status.busy": "2025-10-02T08:20:06.485868Z",
     "iopub.status.idle": "2025-10-02T08:21:19.684584Z",
     "shell.execute_reply": "2025-10-02T08:21:19.683447Z"
    },
    "papermill": {
     "duration": 73.228985,
     "end_time": "2025-10-02T08:21:19.686186",
     "exception": false,
     "start_time": "2025-10-02T08:20:06.457201",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c695747c30364140b78f7d9ea0f24411",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Building Meta Prototype:   0%|          | 0/300 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "meta_df_small shape: (2640, 16)\n"
     ]
    }
   ],
   "source": [
    "# Hard-negative mining (prototype)\n",
    "import random\n",
    "USERS_TO_USE = 300; HARD_NEG_PER_POS = 60; RANDOM_NEG_PER_POS = 5\n",
    "meta_rows = []; all_users = list(df['reviewerID'].unique()); sample_users = all_users[:min(USERS_TO_USE, len(all_users))]\n",
    "for uid in tqdm(sample_users, desc='Building Meta Prototype'):\n",
    "    uidx = user_map.get(uid); \n",
    "    if uidx is None: continue\n",
    "    cands = build_candidates_union(uidx, None, None, None, item_map, pop_counts, user_map, df, interaction, top_sem=500, top_als=200, top_svd=200, top_pop=200, max_cands=1000)\n",
    "    if not cands: continue\n",
    "    mf = build_features_for_candidates(uidx, cands, np.zeros((len(item_map), 768)), None, None, None, df, item_map, user_map, pop_counts, feature_names, now_ts)\n",
    "    Xc = mf['X']; cidx = mf['cands']; fns = mf['feature_names']\n",
    "    true_asins = test_df_proto[test_df_proto['reviewerID']==uid]['asin'].tolist(); true_idxs = [item_map[a] for a in true_asins if a in item_map]\n",
    "    if not true_idxs: continue\n",
    "    als_col = Xc[:, fns.index('als_score')] if 'als_score' in fns else np.zeros(Xc.shape[0])\n",
    "    svd_col = Xc[:, fns.index('svd_score')] if 'svd_score' in fns else np.zeros(Xc.shape[0])\n",
    "    hard_score = 0.5 * als_col + 0.5 * svd_col\n",
    "    cand_arr = np.array(cidx); pos_mask = np.isin(cand_arr, true_idxs); non_pos_idx = np.where(~pos_mask)[0]\n",
    "    if len(non_pos_idx)==0: continue\n",
    "    ordering = non_pos_idx[np.argsort(-hard_score[non_pos_idx])]; hard_negs_idx = ordering[:HARD_NEG_PER_POS].tolist()\n",
    "    remaining = list(set(non_pos_idx.tolist()) - set(hard_negs_idx)); random_negs_idx = random.sample(remaining, min(RANDOM_NEG_PER_POS, len(remaining))) if remaining else []\n",
    "    for t in true_idxs:\n",
    "        pos_loc = np.where(cand_arr==t)[0]; \n",
    "        if len(pos_loc)==0: continue\n",
    "        for p in pos_loc:\n",
    "            row = {'user_idx': uidx, 'item_idx': int(cidx[p]), 'label': 1}\n",
    "            for j,fn in enumerate(fns):\n",
    "                try: row[fn] = float(Xc[p,j])\n",
    "                except: row[fn] = 0.0\n",
    "            meta_rows.append(row)\n",
    "            for idx in hard_negs_idx:\n",
    "                rn = {'user_idx': uidx, 'item_idx': int(cidx[idx]), 'label': 0}\n",
    "                for j,fn in enumerate(fns):\n",
    "                    try: rn[fn] = float(Xc[idx,j])\n",
    "                    except: rn[fn] = 0.0\n",
    "                meta_rows.append(rn)\n",
    "            for idx in random_negs_idx:\n",
    "                rr = {'user_idx': uidx, 'item_idx': int(cidx[idx]), 'label': 0}\n",
    "                for j,fn in enumerate(fns):\n",
    "                    try: rr[fn] = float(Xc[idx,j])\n",
    "                    except: rr[fn] = 0.0\n",
    "                meta_rows.append(rr)\n",
    "meta_df_small = pd.DataFrame(meta_rows).sample(frac=1.0, random_state=42).reset_index(drop=True)\n",
    "meta_df_small.to_parquet(f\"{OUT_DIR}/meta_enhanced_small.parquet\", index=False)\n",
    "print('meta_df_small shape:', meta_df_small.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1d84892",
   "metadata": {
    "papermill": {
     "duration": 0.026826,
     "end_time": "2025-10-02T08:21:19.740499",
     "exception": false,
     "start_time": "2025-10-02T08:21:19.713673",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 4 — LightGBM Tuning & Prototype Training\n",
    "\n",
    "Use Optuna to tune lambdarank hyperparameters. Important: set `feature_pre_filter=False` so trials changing `min_data_in_leaf` don't error."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90469c47",
   "metadata": {
    "papermill": {
     "duration": 0.026798,
     "end_time": "2025-10-02T08:21:19.794335",
     "exception": false,
     "start_time": "2025-10-02T08:21:19.767537",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 13\n",
    "\n",
    "**Purpose:** Imports libraries used later. Defines function(s) used downstream. Trains a model / fits parameters. Produces predictions on data.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# LightGBM tuning & training (prototype)` → Comment describing intent.\n",
    "- `import lightgbm as lgb, optuna` → Imports module(s).\n",
    "- `from sklearn.model_selection import train_test_split` → Imports module(s).\n",
    "- `from math import log2` → Imports module(s).\n",
    "- `feat_cols = [c for c in meta_df_small.columns if c not in ('user_idx','item_idx','label')]` → Performs a step relevant to data processing or modelling.\n",
    "- `users = meta_df_small['user_idx'].unique(); train_u, valid_u = train_test_split(list(users), test_size=0.20, random_state=42)` → Performs a step relevant to data processing or modelling.\n",
    "- `tr_mask = meta_df_small['user_idx'].isin(train_u); val_mask = meta_df_small['user_idx'].isin(valid_u)` → Performs a step relevant to data processing or modelling.\n",
    "- `X_tr = meta_df_small[tr_mask][feat_cols].values; y_tr = meta_df_small[tr_mask]['label'].values` → Performs a step relevant to data processing or modelling.\n",
    "- `gr_tr = meta_df_small[tr_mask].groupby('user_idx', sort=False).size().astype(int).values` → Groups and aggregates data.\n",
    "- `X_val = meta_df_small[val_mask][feat_cols].values; y_val = meta_df_small[val_mask]['label'].values` → Performs a step relevant to data processing or modelling.\n",
    "- `gr_val = meta_df_small[val_mask].groupby('user_idx', sort=False).size().astype(int).values` → Groups and aggregates data.\n",
    "- `dtrain = lgb.Dataset(X_tr, label=y_tr, group=gr_tr); dval = lgb.Dataset(X_val, label=y_val, group=gr_val, reference=dtrain)` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "36479e74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T08:21:19.849966Z",
     "iopub.status.busy": "2025-10-02T08:21:19.849632Z",
     "iopub.status.idle": "2025-10-02T08:21:26.495117Z",
     "shell.execute_reply": "2025-10-02T08:21:26.494268Z"
    },
    "papermill": {
     "duration": 6.675048,
     "end_time": "2025-10-02T08:21:26.496444",
     "exception": false,
     "start_time": "2025-10-02T08:21:19.821396",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-10-02 08:21:25,060] A new study created in memory with name: no-name-a195d148-4b93-44c2-ac86-f6204bd4dbc1\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "14e6b82a9c1d4eec8a0a3d2eb59a7cf1",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/20 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[1]\tvalid_0's ndcg@10: 0.669183\n",
      "[I 2025-10-02 08:21:25,146] Trial 0 finished with value: -0.0 and parameters: {'learning_rate': 0.0758736964506041, 'num_leaves': 122, 'min_data_in_leaf': 176, 'feature_fraction': 0.6248639773775441}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[25]\tvalid_0's ndcg@10: 0.714801\n",
      "[I 2025-10-02 08:21:25,208] Trial 1 finished with value: -0.0 and parameters: {'learning_rate': 0.04107660439912675, 'num_leaves': 54, 'min_data_in_leaf': 80, 'feature_fraction': 0.7131998566962514}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[9]\tvalid_0's ndcg@10: 0.790458\n",
      "[I 2025-10-02 08:21:25,261] Trial 2 finished with value: -0.0 and parameters: {'learning_rate': 0.011692441653214036, 'num_leaves': 58, 'min_data_in_leaf': 78, 'feature_fraction': 0.796539687008756}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[24]\tvalid_0's ndcg@10: 0.680842\n",
      "[I 2025-10-02 08:21:25,309] Trial 3 finished with value: -0.0 and parameters: {'learning_rate': 0.0037802315591610636, 'num_leaves': 108, 'min_data_in_leaf': 172, 'feature_fraction': 0.7189179391106212}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[26]\tvalid_0's ndcg@10: 0.693136\n",
      "[I 2025-10-02 08:21:25,360] Trial 4 finished with value: -0.0 and parameters: {'learning_rate': 0.0019250861863669636, 'num_leaves': 78, 'min_data_in_leaf': 156, 'feature_fraction': 0.6657260869781222}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[24]\tvalid_0's ndcg@10: 0.687898\n",
      "[I 2025-10-02 08:21:25,405] Trial 5 finished with value: -0.0 and parameters: {'learning_rate': 0.01692705124636512, 'num_leaves': 68, 'min_data_in_leaf': 192, 'feature_fraction': 0.6356936102585664}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[5]\tvalid_0's ndcg@10: 0.795163\n",
      "[I 2025-10-02 08:21:25,456] Trial 6 finished with value: -0.0 and parameters: {'learning_rate': 0.09839154539289413, 'num_leaves': 79, 'min_data_in_leaf': 95, 'feature_fraction': 0.9839472575378978}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[30]\tvalid_0's ndcg@10: 0.693136\n",
      "[I 2025-10-02 08:21:25,507] Trial 7 finished with value: -0.0 and parameters: {'learning_rate': 0.0020055943003570035, 'num_leaves': 73, 'min_data_in_leaf': 164, 'feature_fraction': 0.6814503630306425}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[72]\tvalid_0's ndcg@10: 0.787501\n",
      "[I 2025-10-02 08:21:25,600] Trial 8 finished with value: -0.0 and parameters: {'learning_rate': 0.022392997599119783, 'num_leaves': 124, 'min_data_in_leaf': 80, 'feature_fraction': 0.9216666725713737}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[12]\tvalid_0's ndcg@10: 0.777215\n",
      "[I 2025-10-02 08:21:25,647] Trial 9 finished with value: -0.0 and parameters: {'learning_rate': 0.0016576441240619666, 'num_leaves': 110, 'min_data_in_leaf': 181, 'feature_fraction': 0.528167518319231}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[27]\tvalid_0's ndcg@10: 0.635152\n",
      "[I 2025-10-02 08:21:25,749] Trial 10 finished with value: -0.0 and parameters: {'learning_rate': 0.09831318058333066, 'num_leaves': 39, 'min_data_in_leaf': 10, 'feature_fraction': 0.5228050329539738}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[1]\tvalid_0's ndcg@10: 0.669183\n",
      "[I 2025-10-02 08:21:25,810] Trial 11 finished with value: -0.0 and parameters: {'learning_rate': 0.03871484260820642, 'num_leaves': 31, 'min_data_in_leaf': 131, 'feature_fraction': 0.8184087208622176}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[30]\tvalid_0's ndcg@10: 0.74668\n",
      "[I 2025-10-02 08:21:25,904] Trial 12 finished with value: -0.0 and parameters: {'learning_rate': 0.040486547216902286, 'num_leaves': 52, 'min_data_in_leaf': 48, 'feature_fraction': 0.6015651261988838}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[1]\tvalid_0's ndcg@10: 0.669183\n",
      "[I 2025-10-02 08:21:25,966] Trial 13 finished with value: -0.0 and parameters: {'learning_rate': 0.036483135470107286, 'num_leaves': 99, 'min_data_in_leaf': 124, 'feature_fraction': 0.7833465461859049}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[42]\tvalid_0's ndcg@10: 0.738238\n",
      "[I 2025-10-02 08:21:26,066] Trial 14 finished with value: -0.0 and parameters: {'learning_rate': 0.005854435933445354, 'num_leaves': 125, 'min_data_in_leaf': 51, 'feature_fraction': 0.5869352006858356}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[1]\tvalid_0's ndcg@10: 0.669183\n",
      "[I 2025-10-02 08:21:26,128] Trial 15 finished with value: -0.0 and parameters: {'learning_rate': 0.058973393306526366, 'num_leaves': 96, 'min_data_in_leaf': 131, 'feature_fraction': 0.7273420277172882}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[4]\tvalid_0's ndcg@10: 0.741367\n",
      "[I 2025-10-02 08:21:26,196] Trial 16 finished with value: -0.0 and parameters: {'learning_rate': 0.022692312661494306, 'num_leaves': 51, 'min_data_in_leaf': 53, 'feature_fraction': 0.8726009199214776}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[32]\tvalid_0's ndcg@10: 0.739449\n",
      "[I 2025-10-02 08:21:26,280] Trial 17 finished with value: -0.0 and parameters: {'learning_rate': 0.058365197640531684, 'num_leaves': 94, 'min_data_in_leaf': 107, 'feature_fraction': 0.5763288332530943}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[107]\tvalid_0's ndcg@10: 0.799375\n",
      "[I 2025-10-02 08:21:26,386] Trial 18 finished with value: -0.0 and parameters: {'learning_rate': 0.009446758312099816, 'num_leaves': 62, 'min_data_in_leaf': 148, 'feature_fraction': 0.6894723488312777}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[4]\tvalid_0's ndcg@10: 0.684299\n",
      "[I 2025-10-02 08:21:26,445] Trial 19 finished with value: -0.0 and parameters: {'learning_rate': 0.001013237599715956, 'num_leaves': 43, 'min_data_in_leaf': 198, 'feature_fraction': 0.6342630425432381}. Best is trial 0 with value: -0.0.\n",
      "Best params: {'learning_rate': 0.0758736964506041, 'num_leaves': 122, 'min_data_in_leaf': 176, 'feature_fraction': 0.6248639773775441}\n",
      "Training until validation scores don't improve for 50 rounds\n",
      "Early stopping, best iteration is:\n",
      "[1]\tvalid_0's ndcg@10: 0.669183\tvalid_0's ndcg@50: 0.684126\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['/kaggle/working/lgbm_reranker_prototype.joblib']"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# LightGBM tuning & training (prototype)\n",
    "import lightgbm as lgb, optuna\n",
    "from sklearn.model_selection import train_test_split\n",
    "from math import log2\n",
    "\n",
    "feat_cols = [c for c in meta_df_small.columns if c not in ('user_idx','item_idx','label')]\n",
    "users = meta_df_small['user_idx'].unique(); train_u, valid_u = train_test_split(list(users), test_size=0.20, random_state=42)\n",
    "tr_mask = meta_df_small['user_idx'].isin(train_u); val_mask = meta_df_small['user_idx'].isin(valid_u)\n",
    "X_tr = meta_df_small[tr_mask][feat_cols].values; y_tr = meta_df_small[tr_mask]['label'].values\n",
    "gr_tr = meta_df_small[tr_mask].groupby('user_idx', sort=False).size().astype(int).values\n",
    "X_val = meta_df_small[val_mask][feat_cols].values; y_val = meta_df_small[val_mask]['label'].values\n",
    "gr_val = meta_df_small[val_mask].groupby('user_idx', sort=False).size().astype(int).values\n",
    "dtrain = lgb.Dataset(X_tr, label=y_tr, group=gr_tr); dval = lgb.Dataset(X_val, label=y_val, group=gr_val, reference=dtrain)\n",
    "\n",
    "def ndcg_per_group(preds, df_masked, K=10):\n",
    "    eval_users = df_masked['user_idx'].unique(); idx = 0; ndcgs = []\n",
    "    for u in eval_users:\n",
    "        sub = df_masked[df_masked['user_idx']==u]; n = len(sub)\n",
    "        if n==0: continue\n",
    "        p = preds[idx: idx + n]; items = sub['item_idx'].values; order = np.argsort(-p); ranked = items[order].tolist()\n",
    "        true_items = sub['item_idx'][sub['label']==1].tolist()\n",
    "        gains = [1.0 if it in true_items else 0.0 for it in ranked[:K]]\n",
    "        dcg = sum(g / log2(i+2) for i,g in enumerate(gains)); idcg = sum(1.0 / log2(i+2) for i in range(min(len(true_items), K))) if len(true_items)>0 else 0.0\n",
    "        ndcgs.append(dcg/idcg if idcg>0 else 0.0); idx += n\n",
    "    return float(np.mean(ndcgs)) if len(ndcgs)>0 else 0.0\n",
    "\n",
    "def objective(trial):\n",
    "    param = {'objective':'lambdarank','metric':'ndcg','ndcg_eval_at':[10],\n",
    "             'learning_rate': trial.suggest_float('learning_rate', 1e-3, 1e-1, log=True),\n",
    "             'num_leaves': trial.suggest_int('num_leaves', 31, 127),\n",
    "             'min_data_in_leaf': trial.suggest_int('min_data_in_leaf', 10, 200),\n",
    "             'feature_fraction': trial.suggest_float('feature_fraction', 0.5, 1.0),\n",
    "             'verbosity': -1, 'seed': 42, 'feature_pre_filter': False}\n",
    "    try:\n",
    "        bst = lgb.train(param, dtrain, num_boost_round=500, valid_sets=[dval], callbacks=[lgb.early_stopping(stopping_rounds=40), lgb.log_evaluation(period=0)])\n",
    "        preds_val = bst.predict(X_val); df_val = meta_df_small[val_mask].copy().reset_index(drop=True)\n",
    "        return -ndcg_per_group(preds_val, df_val, K=10)\n",
    "    except Exception as e:\n",
    "        print('LightGBM failed in objective:', e); return 1.0\n",
    "\n",
    "study = optuna.create_study(direction='minimize'); study.optimize(objective, n_trials=20, show_progress_bar=True)\n",
    "best_params_proto = study.best_params; print('Best params:', best_params_proto)\n",
    "\n",
    "params = {'objective':'lambdarank','metric':'ndcg','ndcg_eval_at':[10,50],\n",
    "          'learning_rate':float(best_params_proto.get('learning_rate',0.05)),\n",
    "          'num_leaves':int(best_params_proto.get('num_leaves',63)),\n",
    "          'min_data_in_leaf':int(best_params_proto.get('min_data_in_leaf',20)),\n",
    "          'feature_fraction':float(best_params_proto.get('feature_fraction',0.8)),'verbosity':-1,'seed':42,'feature_pre_filter':False}\n",
    "bst_proto = lgb.train(params, dtrain, num_boost_round=1000, valid_sets=[dval], callbacks=[lgb.early_stopping(stopping_rounds=50), lgb.log_evaluation(period=100)])\n",
    "joblib.dump(bst_proto, f\"{OUT_DIR}/lgbm_reranker_prototype.joblib\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7e469ef",
   "metadata": {
    "papermill": {
     "duration": 0.029021,
     "end_time": "2025-10-02T08:21:26.554689",
     "exception": false,
     "start_time": "2025-10-02T08:21:26.525668",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 5 — Scale-up Data Load (100k) & Model Initialization\n",
    "\n",
    "This cell builds a larger sample (100k rows) and computes final embeddings and factors. It prefers SBERT/implicit/FAISS when available but includes CPU-friendly fallbacks (TF-IDF + SVD and TruncatedSVD-based MF) so the notebook runs offline."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bee767b6",
   "metadata": {
    "papermill": {
     "duration": 0.027335,
     "end_time": "2025-10-02T08:21:26.609458",
     "exception": false,
     "start_time": "2025-10-02T08:21:26.582123",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 15\n",
    "\n",
    "**Purpose:** Imports libraries used later. Trains a model / fits parameters.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Scale-up data load (100k) with fallbacks` → Comment describing intent.\n",
    "- `SCALE_N = 10000` → Performs a step relevant to data processing or modelling.\n",
    "- `SBERT_MODEL_FINAL = 'all-mpnet-base-v2'` → Performs a step relevant to data processing or modelling.\n",
    "- `from datasets import load_dataset` → Imports module(s).\n",
    "- `ds_iter = load_dataset('McAuley-Lab/Amazon-Reviews-2023', 'raw_review_Electronics', split='full', streaming=True, trust_remote_code=True)` → Performs a step relevant to data processing or modelling.\n",
    "- `rows = []; cnt = 0` → Performs a step relevant to data processing or modelling.\n",
    "- `for rec in ds_iter:` → Performs a step relevant to data processing or modelling.\n",
    "- `try:` → Performs a step relevant to data processing or modelling.\n",
    "- `asin = rec.get('asin') or rec.get('parent_asin'); user = rec.get('user_id') or rec.get('reviewerID'); text = rec.get('text') or rec.get('reviewText') or ''` → Performs a step relevant to data processing or modelling.\n",
    "- `overall = rec.get('rating') or rec.get('overall'); ts = rec.get('timestamp') or rec.get('unixReviewTime') or 0` → Performs a step relevant to data processing or modelling.\n",
    "- `if asin is None or user is None: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `ts_i = int(ts); ts_i = ts_i*1000 if ts_i < 10**10 else ts_i` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d8de50f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T08:21:26.667750Z",
     "iopub.status.busy": "2025-10-02T08:21:26.666987Z",
     "iopub.status.idle": "2025-10-02T08:53:00.051758Z",
     "shell.execute_reply": "2025-10-02T08:53:00.050520Z"
    },
    "papermill": {
     "duration": 1893.415532,
     "end_time": "2025-10-02T08:53:00.053456",
     "exception": false,
     "start_time": "2025-10-02T08:21:26.637924",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-10-02 08:21:39.649865: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1759393299.863532      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1759393299.926999      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "076b71565d3f4a879c6d8521ec920392",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "modules.json:   0%|          | 0.00/349 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b305c84be3944bdba74ce75098a634c7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config_sentence_transformers.json:   0%|          | 0.00/116 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ee01ce18820d4af396f331d7593183c7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "README.md: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a364e7a198ef4d1c8f3f03f731dbbe42",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "sentence_bert_config.json:   0%|          | 0.00/53.0 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5917a2e06e2d4254a1a36cb0d81051b3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/571 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c768ed08aae040079435601a1f4fe8d2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/438M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f5f908bf08024db6bb278a30e8107668",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer_config.json:   0%|          | 0.00/363 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4a453ff4bd024a8d96a1bcf2710b3a93",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "vocab.txt: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9941bb09229f4244abbf4180f60e9664",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer.json: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "09bc903b4e584f2886223bfa407adaa4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "special_tokens_map.json:   0%|          | 0.00/239 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "92d7cfc374cb461e9c2f863ac7ff2c8e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/190 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1cac852acd8e44a293e563411ff5a338",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "SBERT encode:   0%|          | 0/35 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/implicit/cpu/als.py:95: RuntimeWarning: Intel MKL BLAS is configured to use 2 threads. It is highly recommended to disable its internal threadpool by setting the environment variable 'MKL_NUM_THREADS=1' or by callng 'threadpoolctl.threadpool_limits(1, \"blas\")'. Having MKL use a threadpool can lead to severe performance issues\n",
      "  check_blas_config()\n",
      "/usr/local/lib/python3.11/dist-packages/implicit/cpu/als.py:95: RuntimeWarning: OpenBLAS is configured to use 4 threads. It is highly recommended to disable its internal threadpool by setting the environment variable 'OPENBLAS_NUM_THREADS=1' or by calling 'threadpoolctl.threadpool_limits(1, \"blas\")'. Having OpenBLAS use a threadpool can lead to severe performance issues here.\n",
      "  check_blas_config()\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1df05532bfa04804b405c51368d538b0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/20 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final item_emb shape: (8907, 768)\n"
     ]
    }
   ],
   "source": [
    "# Scale-up data load (100k) with fallbacks\n",
    "SCALE_N = 10000\n",
    "SBERT_MODEL_FINAL = 'all-mpnet-base-v2'\n",
    "\n",
    "from datasets import load_dataset\n",
    "ds_iter = load_dataset('McAuley-Lab/Amazon-Reviews-2023', 'raw_review_Electronics', split='full', streaming=True, trust_remote_code=True)\n",
    "rows = []; cnt = 0\n",
    "for rec in ds_iter:\n",
    "    try:\n",
    "        asin = rec.get('asin') or rec.get('parent_asin'); user = rec.get('user_id') or rec.get('reviewerID'); text = rec.get('text') or rec.get('reviewText') or ''\n",
    "        overall = rec.get('rating') or rec.get('overall'); ts = rec.get('timestamp') or rec.get('unixReviewTime') or 0\n",
    "        if asin is None or user is None: continue\n",
    "        ts_i = int(ts); ts_i = ts_i*1000 if ts_i < 10**10 else ts_i\n",
    "        rows.append({'asin':str(asin),'reviewerID':str(user),'reviewText':str(text),'overall':float(overall) if overall is not None else float('nan'),'unixReviewTime':int(ts_i)})\n",
    "        cnt += 1\n",
    "        if cnt >= SCALE_N: break\n",
    "    except Exception:\n",
    "        continue\n",
    "df_scale = pd.DataFrame(rows)\n",
    "unique_asins_scale = sorted(df_scale['asin'].unique().tolist()); unique_users_scale = sorted(df_scale['reviewerID'].unique().tolist())\n",
    "item_map_scale = {a:i for i,a in enumerate(unique_asins_scale)}; inv_item_map_scale = {i:a for a,i in item_map_scale.items()}\n",
    "user_map_scale = {u:i for i,u in enumerate(unique_users_scale)}; inv_user_map_scale = {i:u for u,i in user_map_scale.items()}\n",
    "n_users_scale, n_items_scale = len(user_map_scale), len(item_map_scale)\n",
    "u_idx=[]; i_idx=[]; data=[]\n",
    "for _, r in df_scale.iterrows():\n",
    "    try:\n",
    "        u = user_map_scale[r['reviewerID']]; i = item_map_scale[r['asin']]\n",
    "        w = float(r['overall']) if not pd.isna(r['overall']) else 1.0; u_idx.append(u); i_idx.append(i); data.append(w)\n",
    "    except KeyError: continue\n",
    "interaction_scale = csr_matrix((data,(u_idx,i_idx)), shape=(n_users_scale,n_items_scale)).tocsr()\n",
    "item_user_matrix_scale = interaction_scale.T.tocsr()\n",
    "pop_counts_scale = Counter(df_scale['asin'])\n",
    "test_df_scale = df_scale.groupby('reviewerID').tail(1).reset_index(drop=True)\n",
    "\n",
    "# Build semantic embeddings: SBERT if available else TF-IDF+SVD fallback\n",
    "if HAS_SBERT:\n",
    "    from sentence_transformers import SentenceTransformer\n",
    "    sbert_final = SentenceTransformer(SBERT_MODEL_FINAL, device='cpu')\n",
    "    agg = defaultdict(list)\n",
    "    for _, r in df_scale[['asin','reviewText']].iterrows():\n",
    "        a = r['asin']\n",
    "        if len(agg[a]) < 5: agg[a].append(str(r['reviewText'])[:1200])\n",
    "    texts = [' . '.join(agg.get(a, [''])) for a in sorted(item_map_scale.keys(), key=lambda x: item_map_scale[x])]\n",
    "    emb_batches = []; batch_size = 256\n",
    "    for i in tqdm(range(0, len(texts), batch_size), desc='SBERT encode'):\n",
    "        emb = sbert_final.encode(texts[i:i+batch_size], convert_to_numpy=True, show_progress_bar=False)\n",
    "        emb_batches.append(emb)\n",
    "    item_emb_final = np.vstack(emb_batches).astype('float32')\n",
    "else:\n",
    "    from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "    from sklearn.decomposition import TruncatedSVD as _TSVD\n",
    "    agg = defaultdict(list)\n",
    "    for _, r in df_scale[['asin','reviewText']].iterrows():\n",
    "        a = r['asin']\n",
    "        if len(agg[a]) < 5: agg[a].append(str(r['reviewText'])[:1200])\n",
    "    texts = [' . '.join(agg.get(a, [''])) for a in sorted(item_map_scale.keys(), key=lambda x: item_map_scale[x])]\n",
    "    tf = TfidfVectorizer(max_features=65536, ngram_range=(1,2), min_df=2)\n",
    "    Xtf = tf.fit_transform(texts)\n",
    "    svd_text = _TSVD(n_components=384, random_state=42)\n",
    "    item_emb_final = svd_text.fit_transform(Xtf).astype('float32')\n",
    "\n",
    "# Build MF factors: implicit ALS if available else TruncatedSVD fallback\n",
    "if HAS_IMPLICIT:\n",
    "    try:\n",
    "        from implicit.als import AlternatingLeastSquares\n",
    "        als_model_final = AlternatingLeastSquares(factors=128, regularization=0.1, iterations=20, use_gpu=False)\n",
    "        als_model_final.fit(item_user_matrix_scale.astype('float32'))\n",
    "        als_item_factors_final = als_model_final.item_factors; als_user_factors_final = als_model_final.user_factors\n",
    "    except Exception:\n",
    "        # fallback to SVD factors below\n",
    "        HAS_IMPLICIT = False\n",
    "\n",
    "if not HAS_IMPLICIT:\n",
    "    from sklearn.decomposition import TruncatedSVD as _TSVD2\n",
    "    print('implicit not available or failed; using TruncatedSVD fallback for MF factors')\n",
    "    svd_mf = _TSVD2(n_components=128, random_state=42)\n",
    "    als_item_factors_final = svd_mf.fit_transform(item_user_matrix_scale)\n",
    "    # user factors: approximate by dividing R^T * F by counts\n",
    "    try:\n",
    "        R = item_user_matrix_scale\n",
    "        user_num = (R.T).dot(als_item_factors_final)\n",
    "        user_counts = np.array((R != 0).sum(axis=0)).reshape(-1)\n",
    "        user_counts = np.where(user_counts == 0, 1.0, user_counts)\n",
    "        als_user_factors_final = (user_num / user_counts[:, None]).astype('float32')\n",
    "    except Exception:\n",
    "        als_user_factors_final = np.random.normal(scale=0.01, size=(n_users_scale, als_item_factors_final.shape[1])).astype('float32')\n",
    "\n",
    "svd_item_factors_final = als_item_factors_final  # reuse\n",
    "item_emb_norm_final = item_emb_final / (np.linalg.norm(item_emb_final, axis=1, keepdims=True) + 1e-9)\n",
    "print('Final item_emb shape:', item_emb_final.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0bf69dd4",
   "metadata": {
    "papermill": {
     "duration": 0.029176,
     "end_time": "2025-10-02T08:53:00.113208",
     "exception": false,
     "start_time": "2025-10-02T08:53:00.084032",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 6 — Scale Hard-negative Mining & Final LTR Training\n",
    "\n",
    "This cell mines hard negatives across many users and trains the final LightGBM reranker on the large meta dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a762e09",
   "metadata": {
    "papermill": {
     "duration": 0.029195,
     "end_time": "2025-10-02T08:53:00.171814",
     "exception": false,
     "start_time": "2025-10-02T08:53:00.142619",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 17\n",
    "\n",
    "**Purpose:** Imports libraries used later. Trains a model / fits parameters.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Scale hard-neg mining + LTR training` → Comment describing intent.\n",
    "- `USERS_TO_USE_SCALE = 5000; HARD_NEG_PER_POS = 80; RANDOM_NEG_PER_POS = 5` → Performs a step relevant to data processing or modelling.\n",
    "- `meta_rows_scale = []` → Performs a step relevant to data processing or modelling.\n",
    "- `sample_users_scale = df_scale['reviewerID'].unique()[:min(USERS_TO_USE_SCALE, n_users_scale)]` → Performs a step relevant to data processing or modelling.\n",
    "- `for uid in tqdm(sample_users_scale, desc='Building Meta Scale'):` → Performs a step relevant to data processing or modelling.\n",
    "- `uidx = user_map_scale.get(uid);` → Performs a step relevant to data processing or modelling.\n",
    "- `if uidx is None: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `cands = build_candidates_union(uidx, item_emb_final, (als_model_final if 'als_model_final' in globals() else None), svd_item_factors_final, item_map_scale, pop_counts_scale, user_map_scale, df_scale, interaction_scale, top_sem=1000, top_als=500, top_svd=500, top_pop=500, top_mf=200, max_cands=3000)` → Performs a step relevant to data processing or modelling.\n",
    "- `if not cands: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `mf = build_features_for_candidates(uidx, cands, item_emb_final, (als_item_factors_final if 'als_item_factors_final' in globals() else None), (als_user_factors_final if 'als_user_factors_final' in globals() else None), svd_item_factors_final, df_scale, item_map_scale, user_map_scale, pop_counts_scale, feature_names, now_ts)` → Performs a step relevant to data processing or modelling.\n",
    "- `Xc = mf['X']; cidx = mf['cands']; fns = mf['feature_names']` → Performs a step relevant to data processing or modelling.\n",
    "- `true_asins = test_df_scale[test_df_scale['reviewerID']==uid]['asin'].tolist()` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c533bb42",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T08:53:00.236562Z",
     "iopub.status.busy": "2025-10-02T08:53:00.233653Z",
     "iopub.status.idle": "2025-10-02T09:51:23.045089Z",
     "shell.execute_reply": "2025-10-02T09:51:23.044111Z"
    },
    "papermill": {
     "duration": 3502.843835,
     "end_time": "2025-10-02T09:51:23.046388",
     "exception": false,
     "start_time": "2025-10-02T08:53:00.202553",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "96572b8198af46c5a05b3002d62f0c1a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Building Meta Scale:   0%|          | 0/1561 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "meta_df_scale shape: (129516, 16)\n",
      "Training until validation scores don't improve for 50 rounds\n",
      "Early stopping, best iteration is:\n",
      "[46]\tvalid_0's ndcg@10: 0.949006\tvalid_0's ndcg@50: 0.949646\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['/kaggle/working/lgbm_reranker_final.joblib']"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Scale hard-neg mining + LTR training\n",
    "USERS_TO_USE_SCALE = 5000; HARD_NEG_PER_POS = 80; RANDOM_NEG_PER_POS = 5\n",
    "meta_rows_scale = []\n",
    "sample_users_scale = df_scale['reviewerID'].unique()[:min(USERS_TO_USE_SCALE, n_users_scale)]\n",
    "for uid in tqdm(sample_users_scale, desc='Building Meta Scale'):\n",
    "    uidx = user_map_scale.get(uid); \n",
    "    if uidx is None: continue\n",
    "    cands = build_candidates_union(uidx, item_emb_final, (als_model_final if 'als_model_final' in globals() else None), svd_item_factors_final, item_map_scale, pop_counts_scale, user_map_scale, df_scale, interaction_scale, top_sem=1000, top_als=500, top_svd=500, top_pop=500, top_mf=200, max_cands=3000)\n",
    "    if not cands: continue\n",
    "    mf = build_features_for_candidates(uidx, cands, item_emb_final, (als_item_factors_final if 'als_item_factors_final' in globals() else None), (als_user_factors_final if 'als_user_factors_final' in globals() else None), svd_item_factors_final, df_scale, item_map_scale, user_map_scale, pop_counts_scale, feature_names, now_ts)\n",
    "    Xc = mf['X']; cidx = mf['cands']; fns = mf['feature_names']\n",
    "    true_asins = test_df_scale[test_df_scale['reviewerID']==uid]['asin'].tolist()\n",
    "    true_idxs = [item_map_scale[a] for a in true_asins if a in item_map_scale]\n",
    "    if not true_idxs: continue\n",
    "    als_col = Xc[:, fns.index('als_score')] if 'als_score' in fns else np.zeros(Xc.shape[0])\n",
    "    svd_col = Xc[:, fns.index('svd_score')] if 'svd_score' in fns else np.zeros(Xc.shape[0])\n",
    "    hard_score = 0.5 * als_col + 0.5 * svd_col\n",
    "    cand_arr = np.array(cidx); pos_mask = np.isin(cand_arr, true_idxs); non_pos_idx = np.where(~pos_mask)[0]\n",
    "    if len(non_pos_idx)==0: continue\n",
    "    ordering = non_pos_idx[np.argsort(-hard_score[non_pos_idx])]; hard_negs_idx = ordering[:HARD_NEG_PER_POS].tolist()\n",
    "    remaining = list(set(non_pos_idx.tolist()) - set(hard_negs_idx)); random_negs_idx = random.sample(remaining, min(RANDOM_NEG_PER_POS, len(remaining))) if remaining else []\n",
    "    for t in true_idxs:\n",
    "        pos_loc = np.where(cand_arr==t)[0]; \n",
    "        if len(pos_loc)==0: continue\n",
    "        for p in pos_loc:\n",
    "            row = {'user_idx': uidx, 'item_idx': int(cidx[p]), 'label': 1}\n",
    "            for j,fn in enumerate(fns):\n",
    "                try: row[fn] = float(Xc[p,j])\n",
    "                except: row[fn] = 0.0\n",
    "            meta_rows_scale.append(row)\n",
    "            for idx in hard_negs_idx:\n",
    "                rn = {'user_idx': uidx, 'item_idx': int(cidx[idx]), 'label': 0}\n",
    "                for j,fn in enumerate(fns):\n",
    "                    try: rn[fn] = float(Xc[idx,j])\n",
    "                    except: rn[fn] = 0.0\n",
    "                meta_rows_scale.append(rn)\n",
    "            for idx in random_negs_idx:\n",
    "                rr = {'user_idx': uidx, 'item_idx': int(cidx[idx]), 'label': 0}\n",
    "                for j,fn in enumerate(fns):\n",
    "                    try: rr[fn] = float(Xc[idx,j])\n",
    "                    except: rr[fn] = 0.0\n",
    "                meta_rows_scale.append(rr)\n",
    "meta_df_scale = pd.DataFrame(meta_rows_scale).sample(frac=1.0, random_state=42).reset_index(drop=True)\n",
    "print('meta_df_scale shape:', meta_df_scale.shape)\n",
    "\n",
    "# Train final LTR\n",
    "from sklearn.model_selection import train_test_split\n",
    "feat_cols = [c for c in meta_df_scale.columns if c not in ('user_idx','item_idx','label')]\n",
    "X = meta_df_scale[feat_cols].values; y = meta_df_scale['label'].values\n",
    "users_all = meta_df_scale['user_idx'].unique(); train_u, valid_u = train_test_split(list(users_all), test_size=0.10, random_state=42)\n",
    "tr_mask = meta_df_scale['user_idx'].isin(train_u); val_mask = meta_df_scale['user_idx'].isin(valid_u)\n",
    "X_tr = meta_df_scale[tr_mask][feat_cols].values; y_tr = meta_df_scale[tr_mask]['label'].values; gr_tr = meta_df_scale[tr_mask].groupby('user_idx', sort=False).size().astype(int).values\n",
    "X_val = meta_df_scale[val_mask][feat_cols].values; y_val = meta_df_scale[val_mask]['label'].values; gr_val = meta_df_scale[val_mask].groupby('user_idx', sort=False).size().astype(int).values\n",
    "\n",
    "dtrain = lgb.Dataset(X_tr, label=y_tr, group=gr_tr); dval = lgb.Dataset(X_val, label=y_val, group=gr_val, reference=dtrain)\n",
    "params_scale = {'objective':'lambdarank','metric':'ndcg','ndcg_eval_at':[10,50],'learning_rate':float(best_params_proto.get('learning_rate',0.05)),'num_leaves':int(best_params_proto.get('num_leaves',63)),'min_data_in_leaf':int(best_params_proto.get('min_data_in_leaf',20)),'feature_fraction':float(best_params_proto.get('feature_fraction',0.8)),'verbosity':-1,'seed':42,'feature_pre_filter':False}\n",
    "bst_final_scale = lgb.train(params_scale, dtrain, num_boost_round=1000, valid_sets=[dval], callbacks=[lgb.early_stopping(stopping_rounds=50), lgb.log_evaluation(period=100)])\n",
    "joblib.dump(bst_final_scale, f\"{OUT_DIR}/lgbm_reranker_final.joblib\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "386b341e",
   "metadata": {
    "papermill": {
     "duration": 0.029631,
     "end_time": "2025-10-02T09:51:23.106240",
     "exception": false,
     "start_time": "2025-10-02T09:51:23.076609",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 7 — Final Evaluation & Metrics\n",
    "\n",
    "Compute P@K, R@K, NDCG@K, MAP, and MPR for the LGBM hybrid reranker and a semantic baseline. Results are saved to `OUT_DIR/final_scale_summary_metrics.csv`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0520f551",
   "metadata": {
    "papermill": {
     "duration": 0.029384,
     "end_time": "2025-10-02T09:51:23.165379",
     "exception": false,
     "start_time": "2025-10-02T09:51:23.135995",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 19\n",
    "\n",
    "**Purpose:** Imports libraries used later. Defines function(s) used downstream. Produces predictions on data. Saves results or models to disk.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Final evaluation utilities and run` → Comment describing intent.\n",
    "- `from math import log2` → Imports module(s).\n",
    "- `def ndcg_at_k(pred_list, true_list, k=10):` → Performs a step relevant to data processing or modelling.\n",
    "- `if not true_list: return 0.0` → Performs a step relevant to data processing or modelling.\n",
    "- `pred_k = pred_list[:k]; gains = [1.0 if p in true_list else 0.0 for p in pred_k]` → Performs a step relevant to data processing or modelling.\n",
    "- `dcg = sum(g / log2(i+2) for i,g in enumerate(gains)); idcg = sum(1.0 / log2(i+2) for i in range(min(len(true_list), k)))` → Performs a step relevant to data processing or modelling.\n",
    "- `return dcg/idcg if idcg>0 else 0.0` → Performs a step relevant to data processing or modelling.\n",
    "- `def apk(actual, predicted, k=10):` → Performs a step relevant to data processing or modelling.\n",
    "- `if not actual: return 0.0` → Performs a step relevant to data processing or modelling.\n",
    "- `score = 0.0; num_hits = 0.0` → Performs a step relevant to data processing or modelling.\n",
    "- `for i,p in enumerate(predicted[:k]):` → Performs a step relevant to data processing or modelling.\n",
    "- `if p in actual and p not in predicted[:i]:` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "be9aa60c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T09:51:23.227678Z",
     "iopub.status.busy": "2025-10-02T09:51:23.227327Z",
     "iopub.status.idle": "2025-10-02T10:28:59.725229Z",
     "shell.execute_reply": "2025-10-02T10:28:59.724157Z"
    },
    "papermill": {
     "duration": 2256.531637,
     "end_time": "2025-10-02T10:28:59.726795",
     "exception": false,
     "start_time": "2025-10-02T09:51:23.195158",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "fe7b5c0aabe4499289dca272d1a46b3e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating lgbm_final_topk:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "47c5098013b5475aba138ca7c9f9d01b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating semantic_final_topk:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final evaluation complete — metrics saved to /kaggle/working/final_scale_summary_metrics.csv\n"
     ]
    }
   ],
   "source": [
    "# Final evaluation utilities and run\n",
    "from math import log2\n",
    "def ndcg_at_k(pred_list, true_list, k=10):\n",
    "    if not true_list: return 0.0\n",
    "    pred_k = pred_list[:k]; gains = [1.0 if p in true_list else 0.0 for p in pred_k]\n",
    "    dcg = sum(g / log2(i+2) for i,g in enumerate(gains)); idcg = sum(1.0 / log2(i+2) for i in range(min(len(true_list), k)))\n",
    "    return dcg/idcg if idcg>0 else 0.0\n",
    "\n",
    "def apk(actual, predicted, k=10):\n",
    "    if not actual: return 0.0\n",
    "    score = 0.0; num_hits = 0.0\n",
    "    for i,p in enumerate(predicted[:k]):\n",
    "        if p in actual and p not in predicted[:i]:\n",
    "            num_hits += 1.0; score += num_hits/(i+1.0)\n",
    "    return score/min(len(actual), k)\n",
    "\n",
    "def lgbm_final_topk(uidx, k=10):\n",
    "    cands = build_candidates_union(uidx, item_emb_final, (als_model_final if 'als_model_final' in globals() else None), svd_item_factors_final, item_map_scale, pop_counts_scale, user_map_scale, df_scale, interaction_scale, top_sem=1000, top_als=500, top_svd=500, top_pop=500, top_mf=200, max_cands=3000)\n",
    "    if not cands: return []\n",
    "    mf = build_features_for_candidates(uidx, cands, item_emb_final, (als_item_factors_final if 'als_item_factors_final' in globals() else None), (als_user_factors_final if 'als_user_factors_final' in globals() else None), svd_item_factors_final, df_scale, item_map_scale, user_map_scale, pop_counts_scale, feature_names, now_ts)\n",
    "    preds = bst_final_scale.predict(mf['X']); order = np.argsort(-preds)[:k]; return [cands[i] for i in order]\n",
    "\n",
    "def semantic_final_topk(uidx, k=10):\n",
    "    uvec = user_profile_emb(uidx, item_emb_final, df_scale, item_map_scale, user_map_scale); uvec = uvec/(np.linalg.norm(uvec)+1e-9)\n",
    "    scores = item_emb_final.dot(uvec); return list(np.argsort(-scores)[:k])\n",
    "\n",
    "def evaluate_final(scorer_fn, K=10, max_users=1000):\n",
    "    actuals=[]; preds=[]; cnt=0\n",
    "    for uid in tqdm(test_df_scale['reviewerID'].unique()[:max_users], desc=f\"Evaluating {scorer_fn.__name__}\"):\n",
    "        if uid not in user_map_scale: continue\n",
    "        uidx = user_map_scale[uid]\n",
    "        true_asins = test_df_scale[test_df_scale['reviewerID']==uid]['asin'].tolist()\n",
    "        if not true_asins: continue\n",
    "        rec_idxs = scorer_fn(uidx, k=K)\n",
    "        rec_asins = [inv_item_map_scale[i] for i in rec_idxs if i in inv_item_map_scale]\n",
    "        preds.append(rec_asins); actuals.append(true_asins); cnt += 1\n",
    "    if cnt==0: return {'P@10':0.0,'R@10':0.0,'NDCG@10':0.0,'MAP@10':0.0,'MPR@10':0.0,'EvalUsers':0}\n",
    "    P = np.mean([len(set(p[:K]) & set(a))/float(K) for p,a in zip(preds,actuals)])\n",
    "    R = np.mean([len(set(p[:K]) & set(a))/max(1,len(a)) for p,a in zip(preds,actuals)])\n",
    "    N = np.mean([ndcg_at_k(p,a,K) for p,a in zip(preds,actuals)])\n",
    "    MAP = np.mean([apk(a,p,K) for a,p in zip(actuals,preds)])\n",
    "    MPR = np.mean([np.mean([1.0 - (p.index(t)+1)/K if (t in p[:K]) else 0.0 for t in a]) for a,p in zip(actuals,preds)])\n",
    "    return {'P@10':P,'R@10':R,'NDCG@10':N,'MAP@10':MAP,'MPR@10':MPR,'EvalUsers':len(actuals)}\n",
    "\n",
    "final_results = {}\n",
    "final_results['LGBM_Hybrid_Rerank'] = evaluate_final(lgbm_final_topk, K=10)\n",
    "final_results['Semantic_Baseline'] = evaluate_final(semantic_final_topk, K=10)\n",
    "final_df = pd.DataFrame(final_results).T\n",
    "final_df = final_df[['P@10','R@10','NDCG@10','MAP@10','MPR@10','EvalUsers']]\n",
    "final_df.to_csv(f\"{OUT_DIR}/final_scale_summary_metrics.csv\", index=False)\n",
    "print('Final evaluation complete — metrics saved to', f\"{OUT_DIR}/final_scale_summary_metrics.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d2196c5",
   "metadata": {
    "papermill": {
     "duration": 0.029987,
     "end_time": "2025-10-02T10:28:59.787930",
     "exception": false,
     "start_time": "2025-10-02T10:28:59.757943",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Feature importance\n",
    "\n",
    "Export and inspect feature importances from the final LightGBM model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af806d8d",
   "metadata": {
    "papermill": {
     "duration": 0.029166,
     "end_time": "2025-10-02T10:28:59.848067",
     "exception": false,
     "start_time": "2025-10-02T10:28:59.818901",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 21\n",
    "\n",
    "**Purpose:** Saves results or models to disk.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Feature importances` → Comment describing intent.\n",
    "- `fi_df = pd.DataFrame({'feature': feat_cols, 'importance': bst_final_scale.feature_importance()}).sort_values('importance', ascending=False)` → Performs a step relevant to data processing or modelling.\n",
    "- `fi_df.to_csv(f\"{OUT_DIR}/feature_importances_final.csv\", index=False)` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2655c7ff",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T10:28:59.908580Z",
     "iopub.status.busy": "2025-10-02T10:28:59.907778Z",
     "iopub.status.idle": "2025-10-02T10:28:59.919190Z",
     "shell.execute_reply": "2025-10-02T10:28:59.918487Z"
    },
    "papermill": {
     "duration": 0.04324,
     "end_time": "2025-10-02T10:28:59.920549",
     "exception": false,
     "start_time": "2025-10-02T10:28:59.877309",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Feature importances\n",
    "fi_df = pd.DataFrame({'feature': feat_cols, 'importance': bst_final_scale.feature_importance()}).sort_values('importance', ascending=False)\n",
    "fi_df.to_csv(f\"{OUT_DIR}/feature_importances_final.csv\", index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3bab63ce",
   "metadata": {
    "papermill": {
     "duration": 0.029813,
     "end_time": "2025-10-02T10:28:59.980993",
     "exception": false,
     "start_time": "2025-10-02T10:28:59.951180",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 22\n",
    "\n",
    "**Purpose:** Performs an operation relevant to the pipeline (see code).\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Fixed sample recommendation printing (maps indices -> ASIN strings, computes true HITs)` → Comment describing intent.\n",
    "- `SAMPLE_USERS_TO_DISPLAY = 5` → Performs a step relevant to data processing or modelling.\n",
    "- `test_users = test_df_scale['reviewerID'].unique()` → Performs a step relevant to data processing or modelling.\n",
    "- `if len(test_users) == 0:` → Performs a step relevant to data processing or modelling.\n",
    "- `print(\"\\nNo unique test users found to display sample recommendations.\")` → Displays a quick diagnostic for the user.\n",
    "- `else:` → Performs a step relevant to data processing or modelling.\n",
    "- `num_samples = min(SAMPLE_USERS_TO_DISPLAY, len(test_users))` → Performs a step relevant to data processing or modelling.\n",
    "- `sample_uids = random.sample(list(test_users), num_samples)` → Samples rows from a DataFrame.\n",
    "- `print(f\"\\n--- Sample User Recommendation Output (LGBM Hybrid) for {num_samples} Users ---\")` → Displays a quick diagnostic for the user.\n",
    "- `for sample_uid in sample_uids:` → Performs a step relevant to data processing or modelling.\n",
    "- `sample_uidx = user_map_scale.get(sample_uid)` → Performs a step relevant to data processing or modelling.\n",
    "- `if sample_uidx is None:` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "002264c0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T10:29:00.042645Z",
     "iopub.status.busy": "2025-10-02T10:29:00.042319Z",
     "iopub.status.idle": "2025-10-02T10:29:11.236306Z",
     "shell.execute_reply": "2025-10-02T10:29:11.235310Z"
    },
    "papermill": {
     "duration": 11.226623,
     "end_time": "2025-10-02T10:29:11.237778",
     "exception": false,
     "start_time": "2025-10-02T10:29:00.011155",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Sample User Recommendation Output (LGBM Hybrid) for 5 Users ---\n",
      "\n",
      "User ID: AFANVB6MPHJTCTFOVIEBKLWZ2GVA\n",
      "True Last Item (to predict): B07MCMTCP3\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B07MCSKB9P (❌ MISS)\n",
      "  2. B00KJLMBQQ (❌ MISS)\n",
      "  3. B096SV8SJG (❌ MISS)\n",
      "  4. B07J2Z5DBM (❌ MISS)\n",
      "  5. B071WGSZ81 (❌ MISS)\n",
      "  6. B07RGZ5NKS (❌ MISS)\n",
      "  7. B07ZPC9QD4 (❌ MISS)\n",
      "  8. B008X0TBKO (❌ MISS)\n",
      "  9. B0001FTVEK (❌ MISS)\n",
      "  10. B08H1WNYTR (❌ MISS)\n",
      "True ASIN in candidate pool? NO\n",
      "\n",
      "User ID: AH6PLOGWYIVIWLJTY756BHNFD4YA\n",
      "True Last Item (to predict): B0068LWHPQ\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B0036ZZ72W (❌ MISS)\n",
      "  2. B0018B5CA8 (❌ MISS)\n",
      "  3. B07M66HC8K (❌ MISS)\n",
      "  4. B076CRF7DN (❌ MISS)\n",
      "  5. B075WD3YHX (❌ MISS)\n",
      "  6. B00KIVGGCC (❌ MISS)\n",
      "  7. B07CXG6C9W (❌ MISS)\n",
      "  8. B01MEG2HXP (❌ MISS)\n",
      "  9. B07H9HGTC6 (❌ MISS)\n",
      "  10. B07MLV7TRJ (❌ MISS)\n",
      "True ASIN in candidate pool? YES\n",
      "\n",
      "User ID: AHTRY6YXVNYOGRTUYANAI2M7DUEA\n",
      "True Last Item (to predict): B00NH11H38\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B013TMNNDQ (❌ MISS)\n",
      "  2. B07XCNK22K (❌ MISS)\n",
      "  3. B00V49LNCU (❌ MISS)\n",
      "  4. B08X7K3H7K (❌ MISS)\n",
      "  5. B015NBTNHQ (❌ MISS)\n",
      "  6. B075NCMLYL (❌ MISS)\n",
      "  7. B002L6HE6E (❌ MISS)\n",
      "  8. B073JL2NJR (❌ MISS)\n",
      "  9. B07PQJGCVT (❌ MISS)\n",
      "  10. B000SJ2TJ8 (❌ MISS)\n",
      "True ASIN in candidate pool? YES\n",
      "\n",
      "User ID: AFIQTNATAZ6T4FK6ADJQHPO2GUOQ\n",
      "True Last Item (to predict): B08L5NP6NG\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B08L5NP6NG (✅ HIT)\n",
      "  2. B07QKTLJ96 (❌ MISS)\n",
      "  3. B0B4ZNF943 (❌ MISS)\n",
      "  4. B01GN0M6NE (❌ MISS)\n",
      "  5. B07H3V77T7 (❌ MISS)\n",
      "  6. B00HL7Z46K (❌ MISS)\n",
      "  7. B0BNT7YX1C (❌ MISS)\n",
      "  8. B07QRZBZ9D (❌ MISS)\n",
      "  9. B09GDGDRHX (❌ MISS)\n",
      "  10. B07B9S451G (❌ MISS)\n",
      "True ASIN in candidate pool? YES\n",
      "\n",
      "User ID: AGER7R5Q22DIDJBAW3TURAHPN6DQ\n",
      "True Last Item (to predict): B00LAX52IQ\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B00LAX52IQ (✅ HIT)\n",
      "  2. B01H3XYJS0 (❌ MISS)\n",
      "  3. B0B75T6CTH (❌ MISS)\n",
      "  4. B0111XJXIE (❌ MISS)\n",
      "  5. B016NA3UQG (❌ MISS)\n",
      "  6. B08BS55JS5 (❌ MISS)\n",
      "  7. B09GYHBBZB (❌ MISS)\n",
      "  8. B00S10KFTC (❌ MISS)\n",
      "  9. B0872FYTWS (❌ MISS)\n",
      "  10. B01N4E2NMB (❌ MISS)\n",
      "True ASIN in candidate pool? YES\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Fixed sample recommendation printing (maps indices -> ASIN strings, computes true HITs)\n",
    "SAMPLE_USERS_TO_DISPLAY = 5\n",
    "\n",
    "test_users = test_df_scale['reviewerID'].unique()\n",
    "if len(test_users) == 0:\n",
    "    print(\"\\nNo unique test users found to display sample recommendations.\")\n",
    "else:\n",
    "    num_samples = min(SAMPLE_USERS_TO_DISPLAY, len(test_users))\n",
    "    sample_uids = random.sample(list(test_users), num_samples)\n",
    "\n",
    "    print(f\"\\n--- Sample User Recommendation Output (LGBM Hybrid) for {num_samples} Users ---\")\n",
    "\n",
    "    for sample_uid in sample_uids:\n",
    "        sample_uidx = user_map_scale.get(sample_uid)\n",
    "\n",
    "        if sample_uidx is None:\n",
    "            print(f\"\\n[SKIP] User {sample_uid} not in user_map_scale.\")\n",
    "            continue\n",
    "\n",
    "        if 'bst_final_scale' not in globals() or bst_final_scale is None:\n",
    "            print(\"\\n[SKIP] bst_final_scale not available — model wasn't trained or loaded.\")\n",
    "            break\n",
    "\n",
    "        # true ASIN string\n",
    "        actual_asin = test_df_scale[test_df_scale['reviewerID'] == sample_uid]['asin'].iloc[0]\n",
    "\n",
    "        # get recommended item indices (ints)\n",
    "        rec_idxs = lgbm_final_topk(sample_uidx, k=10)\n",
    "\n",
    "        # convert indices -> ASINs (use appropriate inv map)\n",
    "        inv_map = inv_item_map_scale if 'inv_item_map_scale' in globals() else inv_item_map\n",
    "        rec_asins = [inv_map[i] if (i in inv_map) else f\"IDX_{i}\" for i in rec_idxs]\n",
    "\n",
    "        print(f\"\\nUser ID: {sample_uid}\")\n",
    "        print(f\"True Last Item (to predict): {actual_asin}\")\n",
    "        print(\"Top 10 Recommended ASINs:\")\n",
    "        for i, asin in enumerate(rec_asins):\n",
    "            hit_status = \"✅ HIT\" if asin == actual_asin else \"❌ MISS\"\n",
    "            print(f\"  {i+1}. {asin} ({hit_status})\")\n",
    "\n",
    "        # helpful additional info: was the true item present in the candidate set at all?\n",
    "        # Build candidate set with the same function used by the scorer (using larger pool for clarity)\n",
    "        cands = build_candidates_union(sample_uidx,\n",
    "                                       item_emb_final if 'item_emb_final' in globals() else None,\n",
    "                                       als_model_final if 'als_model_final' in globals() else None,\n",
    "                                       svd_item_factors_final if 'svd_item_factors_final' in globals() else None,\n",
    "                                       item_map_scale if 'item_map_scale' in globals() else item_map,\n",
    "                                       pop_counts_scale if 'pop_counts_scale' in globals() else pop_counts,\n",
    "                                       user_map_scale if 'user_map_scale' in globals() else user_map,\n",
    "                                       df_scale if 'df_scale' in globals() else df,\n",
    "                                       interaction_scale if 'interaction_scale' in globals() else interaction,\n",
    "                                       top_sem=1000, top_als=500, top_svd=500, top_pop=500, top_mf=200, max_cands=3000)\n",
    "        cand_asins = {inv_map[i] for i in cands if i in inv_map}\n",
    "        in_candidates = actual_asin in cand_asins\n",
    "        print(f\"True ASIN in candidate pool? {'YES' if in_candidates else 'NO'}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34be4b4d",
   "metadata": {
    "papermill": {
     "duration": 0.030243,
     "end_time": "2025-10-02T10:29:11.298761",
     "exception": false,
     "start_time": "2025-10-02T10:29:11.268518",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 8 — Diagnostics, Ablations & Next Steps\n",
    "\n",
    "**Diagnostics included in this notebook:**\n",
    "\n",
    "- Candidate recall checks (small and large pools)\n",
    "- Feature distributions for positives vs negatives\n",
    "- Per-user inspection utilities (`inspect_user_rerank`, `compare_top_bottom`)\n",
    "\n",
    "**Suggested next steps:**\n",
    "\n",
    "1. If reranker underperforms but recall is high: increase meta training size, upsample positives, and tune hard-negative ratios.\n",
    "2. If ALS/SVD features are weak, consider training implicit ALS on denser data or using matrix factorization with alternating optimization.\n",
    "3. Add more content features (title tokens, brand, category) and context signals (time of day, device) if available.\n",
    "4. For production: build offline candidate pipeline (FAISS HNSW) and a lightweight online reranker (optimized model export).\n",
    "\n",
    "---\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "72355e01",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-02T10:29:11.361001Z",
     "iopub.status.busy": "2025-10-02T10:29:11.360531Z",
     "iopub.status.idle": "2025-10-02T10:29:11.552192Z",
     "shell.execute_reply": "2025-10-02T10:29:11.551387Z"
    },
    "papermill": {
     "duration": 0.224552,
     "end_time": "2025-10-02T10:29:11.553442",
     "exception": false,
     "start_time": "2025-10-02T10:29:11.328890",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_13/3532202218.py:59: FutureWarning: errors='ignore' is deprecated and will raise in a future version. Use to_numeric without passing `errors` and catch exceptions explicitly instead\n",
      "  df[c] = pd.to_numeric(df[c], errors='ignore')\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "## 📊 Final evaluation metrics, feeding 1 Million rows to both models and comparing (loaded from `/kaggle/working/final_scale_summary_metrics.csv`)"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "</style>\n",
       "<table id=\"T_d9ef8\">\n",
       "  <caption>Cleaned final scale summary metrics</caption>\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_d9ef8_level0_col0\" class=\"col_heading level0 col0\" >P@10</th>\n",
       "      <th id=\"T_d9ef8_level0_col1\" class=\"col_heading level0 col1\" >R@10</th>\n",
       "      <th id=\"T_d9ef8_level0_col2\" class=\"col_heading level0 col2\" >NDCG@10</th>\n",
       "      <th id=\"T_d9ef8_level0_col3\" class=\"col_heading level0 col3\" >MAP@10</th>\n",
       "      <th id=\"T_d9ef8_level0_col4\" class=\"col_heading level0 col4\" >MPR@10</th>\n",
       "      <th id=\"T_d9ef8_level0_col5\" class=\"col_heading level0 col5\" >EvalUsers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_d9ef8_level0_row0\" class=\"row_heading level0 row0\" >Model_1</th>\n",
       "      <td id=\"T_d9ef8_row0_col0\" class=\"data row0 col0\" >0.052800</td>\n",
       "      <td id=\"T_d9ef8_row0_col1\" class=\"data row0 col1\" >0.528000</td>\n",
       "      <td id=\"T_d9ef8_row0_col2\" class=\"data row0 col2\" >0.452686</td>\n",
       "      <td id=\"T_d9ef8_row0_col3\" class=\"data row0 col3\" >0.429620</td>\n",
       "      <td id=\"T_d9ef8_row0_col4\" class=\"data row0 col4\" >0.422300</td>\n",
       "      <td id=\"T_d9ef8_row0_col5\" class=\"data row0 col5\" >1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_d9ef8_level0_row1\" class=\"row_heading level0 row1\" >Model_2</th>\n",
       "      <td id=\"T_d9ef8_row1_col0\" class=\"data row1 col0\" >0.073000</td>\n",
       "      <td id=\"T_d9ef8_row1_col1\" class=\"data row1 col1\" >0.730000</td>\n",
       "      <td id=\"T_d9ef8_row1_col2\" class=\"data row1 col2\" >0.624721</td>\n",
       "      <td id=\"T_d9ef8_row1_col3\" class=\"data row1 col3\" >0.589946</td>\n",
       "      <td id=\"T_d9ef8_row1_col4\" class=\"data row1 col4\" >0.605900</td>\n",
       "      <td id=\"T_d9ef8_row1_col5\" class=\"data row1 col5\" >1000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7908e1f3f410>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "### 🔍 Qualitative model winners (per metric)"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "- **P@10**: top performer — **Model_2**.\n",
       "- **R@10**: top performer — **Model_2**.\n",
       "- **NDCG@10**: top performer — **Model_2**.\n",
       "- **MAP@10**: top performer — **Model_2**.\n",
       "- **MPR@10**: top performer — **Model_2**."
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "### 📘 Metric meanings (guidance — no numeric thresholds)\n",
       "\n",
       "- **Precision@10 (P@10)** — Of the top-10 items returned, the fraction that are relevant. In very large catalogs, absolute Precision values can be low while still being useful.\n",
       "\n",
       "- **Recall@10 (R@10)** — Fraction of the user's relevant items that appear in the top-10. High Recall means good coverage of what the user is likely to want.\n",
       "\n",
       "- **NDCG@10** — Rewards placing the most relevant items near the top. This is often the primary ranking metric to optimize when user satisfaction depends on top-list order.\n",
       "\n",
       "- **MAP@10** — Mean Average Precision across users; emphasizes consistent early correct placements.\n",
       "\n",
       "- **MPR@10** — A rank-based measure capturing how near the top relevant items are on average; complements NDCG/MAP.\n",
       "\n",
       "- **EvalUsers** — The number of users used for evaluation; larger is more reliable.\n",
       "\n",
       "### 🔎 How to interpret combinations (qualitative)\n",
       "\n",
       "- If **NDCG** and **MAP** improve together, the model provides reliably better top-ranked results across users.\n",
       "- If a model shows higher **Recall** but lower **Precision**, it finds many relevant items but the top list may include more noise — consider stronger reranking or feature signals.\n",
       "- A modest Precision in a huge catalog can still be valuable if **Recall** and **NDCG** are strong — the system surfaces relevant items and ranks them well even if many slots remain non-relevant.\n",
       "\n",
       "### ✅ Practical next steps (if you want to improve results)\n",
       "\n",
       "- Verify candidate recall (if many true items never enter the candidate pool, increase pool size or add ANN).\n",
       "- Improve hard-negative mining diversity to teach the reranker harder distinctions.\n",
       "- Add more features (metadata, temporal signals) to the LTR training data.\n",
       "- Consider using stronger encoders (on GPU) or FAISS for ANN retrieval if compute allows."
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Cleanly load & display the saved final metrics table, then give number-free explanations\n",
    "import os\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from IPython.display import display, Markdown\n",
    "\n",
    "# Candidate CSV paths to try (prefer OUT_DIR if available)\n",
    "csv_candidates = []\n",
    "if 'OUT_DIR' in globals() and OUT_DIR:\n",
    "    csv_candidates.append(os.path.join(OUT_DIR, \"final_scale_summary_metrics.csv\"))\n",
    "csv_candidates.extend([\n",
    "    \"final_scale_summary_metrics.csv\",\n",
    "    os.path.join(os.getcwd(), \"final_scale_summary_metrics.csv\"),\n",
    "])\n",
    "\n",
    "# Find a readable CSV\n",
    "metrics_df = None\n",
    "csv_used = None\n",
    "for p in csv_candidates:\n",
    "    if p and os.path.exists(p):\n",
    "        try:\n",
    "            df_try = pd.read_csv(p)\n",
    "            # Basic heuristics for readability: prefer files with expected metric columns\n",
    "            metrics_df = df_try.copy()\n",
    "            csv_used = p\n",
    "            break\n",
    "        except Exception as e:\n",
    "            display(Markdown(f\"**Found file but failed to read** `{p}` — error: `{e}`\"))\n",
    "\n",
    "# If not found, show friendly error\n",
    "if metrics_df is None:\n",
    "    display(Markdown(\"❌ **Could not find or read** `final_scale_summary_metrics.csv` in OUT_DIR or current directory. \"\n",
    "                     \"Make sure the notebook saved it earlier.\"))\n",
    "else:\n",
    "    # ---- CLEANUP ----\n",
    "    df = metrics_df.copy()\n",
    "\n",
    "    # 1) Drop obvious accidental index column (Unnamed: 0 or first column named '0')\n",
    "    if df.columns[0].startswith(\"Unnamed\") or df.columns[0] == \"0\":\n",
    "        df = df.iloc[:, 1:].copy()\n",
    "\n",
    "    # 2) If columns are metrics but are rows (transposed), try to detect and transpose\n",
    "    expected_metrics = {'P@10','R@10','NDCG@10','MAP@10','MPR@10','EvalUsers'}\n",
    "    cols_set = set(df.columns.astype(str))\n",
    "    # If the expected metrics are not in columns but are in the first column values, transpose.\n",
    "    if not expected_metrics.intersection(cols_set):\n",
    "        # check if first column contains metric names\n",
    "        first_col_vals = set(df.iloc[:,0].astype(str).str.strip().tolist())\n",
    "        if expected_metrics.intersection(first_col_vals):\n",
    "            try:\n",
    "                df = df.set_index(df.columns[0]).T.reset_index(drop=True)\n",
    "            except Exception:\n",
    "                pass\n",
    "\n",
    "    # 3) Ensure numeric columns are numeric\n",
    "    for c in df.columns:\n",
    "        # try to coerce numeric-like columns\n",
    "        try:\n",
    "            df[c] = pd.to_numeric(df[c], errors='ignore')\n",
    "        except Exception:\n",
    "            pass\n",
    "\n",
    "    # 4) If no friendly model names in index, create readable labels\n",
    "    if df.index.dtype != 'object' or all(isinstance(i, (int, np.integer, float)) for i in df.index):\n",
    "        # If a 'Model' column exists, use it; otherwise create Model_1, Model_2...\n",
    "        if 'Model' in df.columns:\n",
    "            df = df.set_index('Model')\n",
    "        else:\n",
    "            df.index = [f\"Model_{i+1}\" for i in range(len(df))]\n",
    "\n",
    "    # 5) Reorder columns to expected order where possible\n",
    "    desired_order = ['P@10','R@10','NDCG@10','MAP@10','MPR@10','EvalUsers']\n",
    "    present = [c for c in desired_order if c in df.columns]\n",
    "    others = [c for c in df.columns if c not in present]\n",
    "    df = df[present + others]\n",
    "\n",
    "    # ---- DISPLAY CLEAN TABLE ----\n",
    "    display(Markdown(f\"## 📊 Final evaluation metrics, feeding 1 Million rows to both models and comparing (loaded from `{csv_used}`)\"))\n",
    "    # Format numeric display: 6 decimals for floats, integer for EvalUsers if present\n",
    "    fmt = {}\n",
    "    for c in df.columns:\n",
    "        if c == 'EvalUsers':\n",
    "            fmt[c] = \"{:.0f}\"\n",
    "        else:\n",
    "            # only apply float format if column is numeric\n",
    "            if pd.api.types.is_numeric_dtype(df[c]):\n",
    "                fmt[c] = \"{:.6f}\"\n",
    "            else:\n",
    "                fmt[c] = \"{}\"\n",
    "    display(df.style.format(fmt).set_caption(\"Cleaned final scale summary metrics\"))\n",
    "\n",
    "    # ---- QUALITATIVE COMPARISONS (NO RAW NUMBERS) ----\n",
    "    present_metric_cols = [c for c in ['P@10','R@10','NDCG@10','MAP@10','MPR@10'] if c in df.columns]\n",
    "    qualitative_notes = []\n",
    "\n",
    "    if len(df) == 1:\n",
    "        qualitative_notes.append(\"Only a single model/row is present — no cross-model comparison available.\")\n",
    "    else:\n",
    "        for col in present_metric_cols:\n",
    "            try:\n",
    "                # Determine best model(s) for this metric (higher is better)\n",
    "                best_val = df[col].max()\n",
    "                best_models = df.index[df[col] == best_val].tolist()\n",
    "                if len(best_models) == 1:\n",
    "                    qualitative_notes.append(f\"- **{col}**: top performer — **{best_models[0]}**.\")\n",
    "                else:\n",
    "                    qualitative_notes.append(f\"- **{col}**: top performers (tie) — **{', '.join(best_models)}**.\")\n",
    "            except Exception:\n",
    "                # skip if comparison fails for a column\n",
    "                pass\n",
    "\n",
    "    # ---- HUMAN-FRIENDLY EXPLANATION (NO HARD THRESHOLDS) ----\n",
    "    explanation_lines = [\n",
    "        \"### 📘 Metric meanings (guidance — no numeric thresholds)\",\n",
    "        \"\",\n",
    "        \"- **Precision@10 (P@10)** — Of the top-10 items returned, the fraction that are relevant. In very large catalogs, absolute Precision values can be low while still being useful.\",\n",
    "        \"\",\n",
    "        \"- **Recall@10 (R@10)** — Fraction of the user's relevant items that appear in the top-10. High Recall means good coverage of what the user is likely to want.\",\n",
    "        \"\",\n",
    "        \"- **NDCG@10** — Rewards placing the most relevant items near the top. This is often the primary ranking metric to optimize when user satisfaction depends on top-list order.\",\n",
    "        \"\",\n",
    "        \"- **MAP@10** — Mean Average Precision across users; emphasizes consistent early correct placements.\",\n",
    "        \"\",\n",
    "        \"- **MPR@10** — A rank-based measure capturing how near the top relevant items are on average; complements NDCG/MAP.\",\n",
    "        \"\",\n",
    "        \"- **EvalUsers** — The number of users used for evaluation; larger is more reliable.\",\n",
    "        \"\",\n",
    "        \"### 🔎 How to interpret combinations (qualitative)\",\n",
    "        \"\",\n",
    "        \"- If **NDCG** and **MAP** improve together, the model provides reliably better top-ranked results across users.\",\n",
    "        \"- If a model shows higher **Recall** but lower **Precision**, it finds many relevant items but the top list may include more noise — consider stronger reranking or feature signals.\",\n",
    "        \"- A modest Precision in a huge catalog can still be valuable if **Recall** and **NDCG** are strong — the system surfaces relevant items and ranks them well even if many slots remain non-relevant.\",\n",
    "        \"\",\n",
    "        \"### ✅ Practical next steps (if you want to improve results)\",\n",
    "        \"\",\n",
    "        \"- Verify candidate recall (if many true items never enter the candidate pool, increase pool size or add ANN).\",\n",
    "        \"- Improve hard-negative mining diversity to teach the reranker harder distinctions.\",\n",
    "        \"- Add more features (metadata, temporal signals) to the LTR training data.\",\n",
    "        \"- Consider using stronger encoders (on GPU) or FAISS for ANN retrieval if compute allows.\"\n",
    "    ]\n",
    "\n",
    "    # ---- OUTPUT ----\n",
    "    if qualitative_notes:\n",
    "        display(Markdown(\"### 🔍 Qualitative model winners (per metric)\"))\n",
    "        display(Markdown(\"\\n\".join(qualitative_notes)))\n",
    "    display(Markdown(\"\\n\".join(explanation_lines)))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "63d4bbd4",
   "metadata": {
    "papermill": {
     "duration": 0.030616,
     "end_time": "2025-10-02T10:29:11.615289",
     "exception": false,
     "start_time": "2025-10-02T10:29:11.584673",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7861.196208,
   "end_time": "2025-10-02T10:29:14.581274",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-10-02T08:18:13.385066",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "03d62d119d694075b928a99e483bacd6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0628afb038a94efaa4504d29a97f5304": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b3c868e069af4e58a7cf312e84165b8d",
       "max": 190.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_2a51614fbad3436ba056ab57216de998",
       "tabbable": null,
       "tooltip": null,
       "value": 190.0
      }
     },
     "066f9d49cdb04ccea4b41356784005bb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "06c13dd97a3340ab8e12777340dc634e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5b5bbe838bbc4ccca4c970689b9a7fd0",
       "placeholder": "​",
       "style": "IPY_MODEL_cac1cd79c34a4c33972cf222007c90c7",
       "tabbable": null,
       "tooltip": null,
       "value": " 35/35 [30:53&lt;00:00, 52.88s/it]"
      }
     },
     "076b71565d3f4a879c6d8521ec920392": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_d0fd6c6ee4d04df580c7460950324d63",
        "IPY_MODEL_34fa8d9fdbe7444685a6dd7bedf50db8",
        "IPY_MODEL_f9a50680ffa54c7380e4eafe0044b2e7"
       ],
       "layout": "IPY_MODEL_a3811c8d4be74c719f9e1f519a4540d7",
       "tabbable": null,
       "tooltip": null
      }
     },
     "07d0c20fe9b542bf8d3b46ad3f95e9c6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f420eba38a4b470b858a38075cb730d7",
       "placeholder": "​",
       "style": "IPY_MODEL_782b3043e31a433aa3c0b81f29dd6c63",
       "tabbable": null,
       "tooltip": null,
       "value": " 11.6k/? [00:00&lt;00:00, 1.20MB/s]"
      }
     },
     "07f323ae65a943f7a8968efcc1808519": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "09524b2cc26d4a8093480296be67adc7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "09bc903b4e584f2886223bfa407adaa4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_453dbfb88d30498c896060423c9747d5",
        "IPY_MODEL_37ddf0fecfe54743967ca8e73bfc7aaa",
        "IPY_MODEL_11d8367a39914684bfd5b41e9879b37f"
       ],
       "layout": "IPY_MODEL_120c46e0d12643de8e62f186f80d8405",
       "tabbable": null,
       "tooltip": null
      }
     },
     "09f7ddc3ef2d48bbb062e7243fa4dfa1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8090d355ad8048f4a42118acc65eb370",
       "placeholder": "​",
       "style": "IPY_MODEL_af8cb3a4ac7e4fc3a2321be4a0683727",
       "tabbable": null,
       "tooltip": null,
       "value": " 438M/438M [00:02&lt;00:00, 273MB/s]"
      }
     },
     "0a90fa96ace0419a88238b6041861955": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0e914901dbf842c68640075ce31c2e94": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0ece5a2315dd45e199994738a72457f5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "11569555e58e4d3a9e0639680604d351": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7fa94323104449319bfd94f7a263e839",
       "placeholder": "​",
       "style": "IPY_MODEL_853f1a147c34439cbe263fb0926fcdbb",
       "tabbable": null,
       "tooltip": null,
       "value": "SBERT encode: 100%"
      }
     },
     "11cbbf5c122b4a8198eb34ab8fe22b6d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "11d8367a39914684bfd5b41e9879b37f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_11cbbf5c122b4a8198eb34ab8fe22b6d",
       "placeholder": "​",
       "style": "IPY_MODEL_07f323ae65a943f7a8968efcc1808519",
       "tabbable": null,
       "tooltip": null,
       "value": " 239/239 [00:00&lt;00:00, 29.1kB/s]"
      }
     },
     "120c46e0d12643de8e62f186f80d8405": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "140d65e1e33348c78443e8d5002192e2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "14e6b82a9c1d4eec8a0a3d2eb59a7cf1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_b5fcd23ddf934c66b720a3e2393cc25a",
        "IPY_MODEL_ab73b1d70cc94b95899b443d7ae4d71c",
        "IPY_MODEL_c3169f1f0ca54abd84bac82b25e1c03e"
       ],
       "layout": "IPY_MODEL_9ebb79c0e84a47ab95ac5ab52b531c6c",
       "tabbable": null,
       "tooltip": null
      }
     },
     "1621cb66cf5f484c98d37f506ddb4b70": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f677e6c5c317475ebc7cfc4c028b7e50",
       "placeholder": "​",
       "style": "IPY_MODEL_b4dcf2e366784e0ab01d2c7cfc953826",
       "tabbable": null,
       "tooltip": null,
       "value": "config.json: 100%"
      }
     },
     "17488555559c4936bb8ba52c686315c1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "18ff943b313645f58e4a84fcafbb683e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "1920ead706f045c89cca224c0bd8c57b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "1b9aa3d25c0a40359de7dd5943c41619": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1c5be412521147a988d83db36a10739c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1cac852acd8e44a293e563411ff5a338": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_11569555e58e4d3a9e0639680604d351",
        "IPY_MODEL_ccdcdf7e775e4d1d90f252886c24a5dc",
        "IPY_MODEL_06c13dd97a3340ab8e12777340dc634e"
       ],
       "layout": "IPY_MODEL_76c9d1aa745747928d92f6f6dc824bdf",
       "tabbable": null,
       "tooltip": null
      }
     },
     "1df05532bfa04804b405c51368d538b0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_b6ce2173ce11414699b21198702c4ca4",
        "IPY_MODEL_35471140631649e69d8d47b8953fbaff",
        "IPY_MODEL_e28b1ddf024c4c25bda4a891795a5d0c"
       ],
       "layout": "IPY_MODEL_68f3be0363c449ac8f93e5fb65c7e3c8",
       "tabbable": null,
       "tooltip": null
      }
     },
     "212d54a46c9c4e7582e109241ce47241": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "225e7fdd3aa64fa28b0550eabfa92045": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "2487f97e23da4927b58ca3efe182ff28": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4bc65e4970bb44439a35cdfa24d4e432",
       "max": 363.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_2e3021ed9f8a4507a2057980c4bf7054",
       "tabbable": null,
       "tooltip": null,
       "value": 363.0
      }
     },
     "25aa43c7405c4dc7b7b021d2b77ee635": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "25b5bd244ebc4495acb7b0dff6458ba8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1c5be412521147a988d83db36a10739c",
       "placeholder": "​",
       "style": "IPY_MODEL_499b6122b83d4133af0a2524764d0c97",
       "tabbable": null,
       "tooltip": null,
       "value": " 363/363 [00:00&lt;00:00, 40.6kB/s]"
      }
     },
     "26d2e3eab7a6482bbc0da06fef316dcf": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "280dc9183edf4e929e04d8f37c1dd231": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2a51614fbad3436ba056ab57216de998": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "2d5bac47aa83425588e5c481f03d1bf9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2dc6e793a2cb44c8adc51862b5e9089b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2e3021ed9f8a4507a2057980c4bf7054": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "2e7c35622e6e448887ee3517081578ba": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6807d340a093415a90b883c41fc229d1",
       "placeholder": "​",
       "style": "IPY_MODEL_d95760455e774391a91f07c27c72449f",
       "tabbable": null,
       "tooltip": null,
       "value": " 1561/1561 [58:20&lt;00:00,  2.19s/it]"
      }
     },
     "3072da8f24bc4bcaa168260c869072ef": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "34fa8d9fdbe7444685a6dd7bedf50db8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b9008b0776e64b1d95ca2b1c78d27a68",
       "max": 349.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_63c19b5005b74d5faadfcb36aa088ae2",
       "tabbable": null,
       "tooltip": null,
       "value": 349.0
      }
     },
     "35471140631649e69d8d47b8953fbaff": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d8991555426d409ebbc6b658c043af49",
       "max": 20.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_7e015d5d7ddc4227a0d70b0530d95d85",
       "tabbable": null,
       "tooltip": null,
       "value": 20.0
      }
     },
     "35de93f14e9c4380ae125274c6ea7aa7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5322df396ad046a3add4cd43f7db716d",
       "placeholder": "​",
       "style": "IPY_MODEL_7b6d5f6de5c24a7bb9d55a4487d5577c",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [37:27&lt;00:00,  2.20s/it]"
      }
     },
     "372711af6ab441578b6d12e5e65905bc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "37ddf0fecfe54743967ca8e73bfc7aaa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_655aacd10bc944ae986b9b5d2af276bb",
       "max": 239.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_47518a899737430c858d8f37d5500dae",
       "tabbable": null,
       "tooltip": null,
       "value": 239.0
      }
     },
     "3fd65c60c5f14f0ab3598c6612db9187": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_49a6ebd33ebd4164aec22c5d3f17453f",
       "placeholder": "​",
       "style": "IPY_MODEL_58ff715128be40c1b321b00fcb26616f",
       "tabbable": null,
       "tooltip": null,
       "value": " 300/300 [01:13&lt;00:00,  4.05it/s]"
      }
     },
     "41f69885cd764319bd4ee9b1b6f2cc51": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "42f82a39d9244aad8b48cae07b34ae69": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "44075fe578af44499abaf03420137179": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_25aa43c7405c4dc7b7b021d2b77ee635",
       "placeholder": "​",
       "style": "IPY_MODEL_74511586e1e74d3cb0d7972c460a862d",
       "tabbable": null,
       "tooltip": null,
       "value": "sentence_bert_config.json: 100%"
      }
     },
     "44407a05639146e9bff60eff741f2bf7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "44b0fa9da7ed43d389989c88a7813078": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6e2bdff269214f6f9d2645cad32be782",
       "max": 116.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_8c7839620cb04651b606f6f287e4d136",
       "tabbable": null,
       "tooltip": null,
       "value": 116.0
      }
     },
     "453dbfb88d30498c896060423c9747d5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f522d7538ace4d9aabfa35aca9037411",
       "placeholder": "​",
       "style": "IPY_MODEL_536ea2fc170849c8a77e7987d7fcd5a8",
       "tabbable": null,
       "tooltip": null,
       "value": "special_tokens_map.json: 100%"
      }
     },
     "456c5bc7c08141248b31bae16238c8df": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "47518a899737430c858d8f37d5500dae": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "47c5098013b5475aba138ca7c9f9d01b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_cb7ed75107d444eaa0d46f10314f0672",
        "IPY_MODEL_6cbad659fe0f4fe38a4613ccac930e6e",
        "IPY_MODEL_ee43349eaebf420c83c6b9b4b3b81b44"
       ],
       "layout": "IPY_MODEL_5705023b23574a3c909024e5fd54f5df",
       "tabbable": null,
       "tooltip": null
      }
     },
     "499b6122b83d4133af0a2524764d0c97": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "49a6ebd33ebd4164aec22c5d3f17453f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4a453ff4bd024a8d96a1bcf2710b3a93": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_b97907f3e35544d792d985a36c93133e",
        "IPY_MODEL_82d83c0ac4514fc780be519086138acc",
        "IPY_MODEL_d0c15ef6f7394966ba375521688a66ec"
       ],
       "layout": "IPY_MODEL_64bd2ae40bf443afb03f8a39eb172498",
       "tabbable": null,
       "tooltip": null
      }
     },
     "4aadaec014324363adbdc66c92665eaa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ce4a2cc063cd4ce69fb272e7f34f0939",
       "placeholder": "​",
       "style": "IPY_MODEL_ad669243486d4007896b7ac81a1b9576",
       "tabbable": null,
       "tooltip": null,
       "value": "README.md: "
      }
     },
     "4bc65e4970bb44439a35cdfa24d4e432": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4c745001c3114a63808b8856113e0a6c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5bb27dec599346928d86d91500743c56",
       "placeholder": "​",
       "style": "IPY_MODEL_212d54a46c9c4e7582e109241ce47241",
       "tabbable": null,
       "tooltip": null,
       "value": " 53.0/53.0 [00:00&lt;00:00, 6.29kB/s]"
      }
     },
     "4dca390fe6e4454ca3cea831684113d5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "503db2ca67094f44aaef7c4e72dd7485": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_03d62d119d694075b928a99e483bacd6",
       "placeholder": "​",
       "style": "IPY_MODEL_2d5bac47aa83425588e5c481f03d1bf9",
       "tabbable": null,
       "tooltip": null,
       "value": "config_sentence_transformers.json: 100%"
      }
     },
     "51368283aa334f98bebd5e3ff460c11c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "513bbf9ad2c54cf38858e44b9b59cfef": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "526ef63b5e5d4fe4b2bb2920cffa7b31": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_6a2e7014d3014f76b11c27e8045789e1",
        "IPY_MODEL_c8984d12e6a9401d92286ea71cf4d9fe",
        "IPY_MODEL_59896ee5796d4135a1908fab81e50fb4"
       ],
       "layout": "IPY_MODEL_4dca390fe6e4454ca3cea831684113d5",
       "tabbable": null,
       "tooltip": null
      }
     },
     "5322df396ad046a3add4cd43f7db716d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "536c965619bd4e3fa646be4940390bdd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "536ea2fc170849c8a77e7987d7fcd5a8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "54a4f28ef1354994a641fbd31336efe6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "55afcdafeab74fca93a8279c3fa1d727": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5705023b23574a3c909024e5fd54f5df": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "58ff715128be40c1b321b00fcb26616f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "5917a2e06e2d4254a1a36cb0d81051b3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_e5f3665a87ec4129952465c51af0ce08",
        "IPY_MODEL_bc1c5a9e081c4b38858ab0362706c09d",
        "IPY_MODEL_db4efa60fbc1499cb6c42f6a50490260"
       ],
       "layout": "IPY_MODEL_712c82539e354e809d4e8da81bc46a81",
       "tabbable": null,
       "tooltip": null
      }
     },
     "59896ee5796d4135a1908fab81e50fb4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9ae84a98841e4277841927e6116b2f3a",
       "placeholder": "​",
       "style": "IPY_MODEL_f3f9e286d1044dc0bd75475aa4ccd990",
       "tabbable": null,
       "tooltip": null,
       "value": " 30.3k/? [00:00&lt;00:00, 2.59MB/s]"
      }
     },
     "59b768cb62e94ba2bc353eddb413ac4f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d1be87d924d64ebc9452d44b60df4fd8",
       "placeholder": "​",
       "style": "IPY_MODEL_9abe494a22a241c6b49168aa40d147a2",
       "tabbable": null,
       "tooltip": null,
       "value": " 190/190 [00:00&lt;00:00, 21.6kB/s]"
      }
     },
     "5a96443d30624bd6a66a1ba3f91956cb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "5b5bbe838bbc4ccca4c970689b9a7fd0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5bb27dec599346928d86d91500743c56": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5c8cc6621683494dafd14db1565bb565": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "5cdb6186f58e469bbd04de2c83011ded": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "63c19b5005b74d5faadfcb36aa088ae2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "64a66a37388f4dc8a603ba7ac28efea9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "64bd2ae40bf443afb03f8a39eb172498": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "655aacd10bc944ae986b9b5d2af276bb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6807d340a093415a90b883c41fc229d1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "68f3be0363c449ac8f93e5fb65c7e3c8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6a2e7014d3014f76b11c27e8045789e1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d188e236262c4e71854fb4c9dedc7608",
       "placeholder": "​",
       "style": "IPY_MODEL_54a4f28ef1354994a641fbd31336efe6",
       "tabbable": null,
       "tooltip": null,
       "value": "README.md: "
      }
     },
     "6bc05634bd4c4373ae07eb3af9bcbbb0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6cbad659fe0f4fe38a4613ccac930e6e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1b9aa3d25c0a40359de7dd5943c41619",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_9a45919c6f774259af9dcd581fc5c1cc",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "6cfa4831cff44781b8a2e4caffc75ddd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_536c965619bd4e3fa646be4940390bdd",
       "max": 1561.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_9b79c7b77cc64f818a0da3eb6fe6cc45",
       "tabbable": null,
       "tooltip": null,
       "value": 1561.0
      }
     },
     "6e2bdff269214f6f9d2645cad32be782": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7053fa2465034af88ae9adb574e895d8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "712c82539e354e809d4e8da81bc46a81": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "71a3036bcdf941aaa349cff5e6de53c0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5cdb6186f58e469bbd04de2c83011ded",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_09524b2cc26d4a8093480296be67adc7",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "74511586e1e74d3cb0d7972c460a862d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "76c9d1aa745747928d92f6f6dc824bdf": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "77d98bbad86e4110aea2fa1d81f7ae18": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "782b3043e31a433aa3c0b81f29dd6c63": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "79a76e210a2642f1a9be6d718956cb82": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7ae8af1cc55044b0a7402b29101bc989": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7b6d5f6de5c24a7bb9d55a4487d5577c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7c666d91849842e8923fce265f3eb4b9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_456c5bc7c08141248b31bae16238c8df",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_225e7fdd3aa64fa28b0550eabfa92045",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "7e015d5d7ddc4227a0d70b0530d95d85": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "7f0941eced784d79b8fbc1076130923e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_77d98bbad86e4110aea2fa1d81f7ae18",
       "placeholder": "​",
       "style": "IPY_MODEL_c7e9f980c0a343f3b834ff9ad6fc9ecf",
       "tabbable": null,
       "tooltip": null,
       "value": "Building Meta Scale: 100%"
      }
     },
     "7fa94323104449319bfd94f7a263e839": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8090d355ad8048f4a42118acc65eb370": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8098d02b92404caeabbaa75a3a302967": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "81095230da184ba0918045524526e1f9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "823f54546baf49038228aade61f59d53": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "82d83c0ac4514fc780be519086138acc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8af545b116b54143b0c19e271b7a5cca",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_dea5511843bb489a9b6e65177f16c335",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "83e5c7cd0bf1412d912a11519afc4420": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f0093039438649b4b1ac8a745ae243a4",
       "placeholder": "​",
       "style": "IPY_MODEL_e64c2fd433ec4519808db9b04e6e6ad1",
       "tabbable": null,
       "tooltip": null,
       "value": "Building Meta Prototype: 100%"
      }
     },
     "84824415b2854908b7f35b34c268eb4f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "853f1a147c34439cbe263fb0926fcdbb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "86193181ea3f4a549f6cc67fbae88b26": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "869f1a00e15141069e46036899ea9da4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "87099f6fbd7f4fceb4e987359127d141": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_926c8ef854954e1cb4bab5044827c778",
       "max": 437971872.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_5a96443d30624bd6a66a1ba3f91956cb",
       "tabbable": null,
       "tooltip": null,
       "value": 437971872.0
      }
     },
     "89387a8ffaf9452d90bd3d2bee3368bf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "8983a3646d96421fa1080cdafb8f7dbd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8af545b116b54143b0c19e271b7a5cca": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "8c7839620cb04651b606f6f287e4d136": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "8d2a1574a4f44e129af4d40c9af0e1d6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fc267fac92044682b3c7ce0b477fa450",
       "placeholder": "​",
       "style": "IPY_MODEL_fa57d1a18ca1478981e26816ae1b51cc",
       "tabbable": null,
       "tooltip": null,
       "value": "tokenizer_config.json: 100%"
      }
     },
     "901c4aeb6a334989a8b7f3b5839b6aea": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "90860f4670a6437cbed9c08867d96299": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3072da8f24bc4bcaa168260c869072ef",
       "placeholder": "​",
       "style": "IPY_MODEL_5c8cc6621683494dafd14db1565bb565",
       "tabbable": null,
       "tooltip": null,
       "value": "Amazon-Reviews-2023.py: "
      }
     },
     "926c8ef854954e1cb4bab5044827c778": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "92d7cfc374cb461e9c2f863ac7ff2c8e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_1621cb66cf5f484c98d37f506ddb4b70",
        "IPY_MODEL_0628afb038a94efaa4504d29a97f5304",
        "IPY_MODEL_59b768cb62e94ba2bc353eddb413ac4f"
       ],
       "layout": "IPY_MODEL_e2c9d61e994e402aa96532cd34d516a1",
       "tabbable": null,
       "tooltip": null
      }
     },
     "93ade6ccfd804e61a5f465ac9ee3eb1c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "94b4a453bd8f49288938e2877fd389c1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "957f56a6bd604fd7bff3928d39ce70b8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "96572b8198af46c5a05b3002d62f0c1a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_7f0941eced784d79b8fbc1076130923e",
        "IPY_MODEL_6cfa4831cff44781b8a2e4caffc75ddd",
        "IPY_MODEL_2e7c35622e6e448887ee3517081578ba"
       ],
       "layout": "IPY_MODEL_c9b17ad47c3c4f3883a2e1eaf8d70e43",
       "tabbable": null,
       "tooltip": null
      }
     },
     "9677841b4a8447bf97fd8c7751266596": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "9941bb09229f4244abbf4180f60e9664": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_e0f78d8d0ce74219809d0eebd48c5bb7",
        "IPY_MODEL_7c666d91849842e8923fce265f3eb4b9",
        "IPY_MODEL_9f0bd69a0b51429c9cff6885e23e76c0"
       ],
       "layout": "IPY_MODEL_372711af6ab441578b6d12e5e65905bc",
       "tabbable": null,
       "tooltip": null
      }
     },
     "9a45919c6f774259af9dcd581fc5c1cc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "9abe494a22a241c6b49168aa40d147a2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9ae84a98841e4277841927e6116b2f3a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9b011836a54d4b0aa5f9a7766a764190": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9b79c7b77cc64f818a0da3eb6fe6cc45": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "9cad8413c1f54b77bd320b8b5debb7ed": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9cf615873dba496d99863314b8d1f087": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9677841b4a8447bf97fd8c7751266596",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_84824415b2854908b7f35b34c268eb4f",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "9e44c2f22d984837b1a7e6fff2811ad4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9ebb79c0e84a47ab95ac5ab52b531c6c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9f0bd69a0b51429c9cff6885e23e76c0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_513bbf9ad2c54cf38858e44b9b59cfef",
       "placeholder": "​",
       "style": "IPY_MODEL_44407a05639146e9bff60eff741f2bf7",
       "tabbable": null,
       "tooltip": null,
       "value": " 466k/? [00:00&lt;00:00, 32.0MB/s]"
      }
     },
     "a04ac4d1a2704fed93ee653e0814761a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a1b971c206d54df089579f03648d81ae": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a364e7a198ef4d1c8f3f03f731dbbe42": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_44075fe578af44499abaf03420137179",
        "IPY_MODEL_f5e84ce4b6c0460899e79cadadc8cea2",
        "IPY_MODEL_4c745001c3114a63808b8856113e0a6c"
       ],
       "layout": "IPY_MODEL_d8625aaf591744788b34e1260cbb3396",
       "tabbable": null,
       "tooltip": null
      }
     },
     "a3811c8d4be74c719f9e1f519a4540d7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "aa2dc351e2564843a4f0e3686a0a298d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ab73b1d70cc94b95899b443d7ae4d71c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_26d2e3eab7a6482bbc0da06fef316dcf",
       "max": 20.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_42f82a39d9244aad8b48cae07b34ae69",
       "tabbable": null,
       "tooltip": null,
       "value": 20.0
      }
     },
     "ab84e06f644c4896bcc58469b28e0578": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "ad669243486d4007896b7ac81a1b9576": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "af8cb3a4ac7e4fc3a2321be4a0683727": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b017124cae7b42f0bfc8eac8839c120b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b1cf768cb67340faae4761ca2feaefe3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b305c84be3944bdba74ce75098a634c7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_503db2ca67094f44aaef7c4e72dd7485",
        "IPY_MODEL_44b0fa9da7ed43d389989c88a7813078",
        "IPY_MODEL_ef7588ab8e284a54ab0015aaecbcd7e4"
       ],
       "layout": "IPY_MODEL_0e914901dbf842c68640075ce31c2e94",
       "tabbable": null,
       "tooltip": null
      }
     },
     "b3c868e069af4e58a7cf312e84165b8d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b4dcf2e366784e0ab01d2c7cfc953826": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b5fcd23ddf934c66b720a3e2393cc25a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_bffbe47a7cf9494db5173e979fa8d5f4",
       "placeholder": "​",
       "style": "IPY_MODEL_901c4aeb6a334989a8b7f3b5839b6aea",
       "tabbable": null,
       "tooltip": null,
       "value": "Best trial: 0. Best value: -0: 100%"
      }
     },
     "b6ce2173ce11414699b21198702c4ca4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_51368283aa334f98bebd5e3ff460c11c",
       "placeholder": "​",
       "style": "IPY_MODEL_aa2dc351e2564843a4f0e3686a0a298d",
       "tabbable": null,
       "tooltip": null,
       "value": "100%"
      }
     },
     "b9008b0776e64b1d95ca2b1c78d27a68": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b97907f3e35544d792d985a36c93133e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8983a3646d96421fa1080cdafb8f7dbd",
       "placeholder": "​",
       "style": "IPY_MODEL_93ade6ccfd804e61a5f465ac9ee3eb1c",
       "tabbable": null,
       "tooltip": null,
       "value": "vocab.txt: "
      }
     },
     "b9db54a1a55d41e8bb97aa12e471137a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "bc1c5a9e081c4b38858ab0362706c09d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9b011836a54d4b0aa5f9a7766a764190",
       "max": 571.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_ab84e06f644c4896bcc58469b28e0578",
       "tabbable": null,
       "tooltip": null,
       "value": 571.0
      }
     },
     "bffbe47a7cf9494db5173e979fa8d5f4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c3169f1f0ca54abd84bac82b25e1c03e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ca9b09410a3c4074b6b51c4f192ad9a0",
       "placeholder": "​",
       "style": "IPY_MODEL_066f9d49cdb04ccea4b41356784005bb",
       "tabbable": null,
       "tooltip": null,
       "value": " 20/20 [00:01&lt;00:00, 12.83it/s]"
      }
     },
     "c3896c987eba4f5499045fecaaddb9f6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c4f84ebb98ba4985828e59cec71555ee": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "c63fcd952081415c8ab758dc25ff6070": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c66f67340b554e07839a96cf51310501": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_94b4a453bd8f49288938e2877fd389c1",
       "placeholder": "​",
       "style": "IPY_MODEL_d646f289e21e4b178772ddc4f16d3dc4",
       "tabbable": null,
       "tooltip": null,
       "value": " 39.6k/? [00:00&lt;00:00, 3.91MB/s]"
      }
     },
     "c695747c30364140b78f7d9ea0f24411": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_83e5c7cd0bf1412d912a11519afc4420",
        "IPY_MODEL_cdae48f8da9f47f3906cb328f665e1fd",
        "IPY_MODEL_3fd65c60c5f14f0ab3598c6612db9187"
       ],
       "layout": "IPY_MODEL_a1b971c206d54df089579f03648d81ae",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c768ed08aae040079435601a1f4fe8d2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_f5e53bbb8a274ce9a64bf457883488ee",
        "IPY_MODEL_87099f6fbd7f4fceb4e987359127d141",
        "IPY_MODEL_09f7ddc3ef2d48bbb062e7243fa4dfa1"
       ],
       "layout": "IPY_MODEL_280dc9183edf4e929e04d8f37c1dd231",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c7e9f980c0a343f3b834ff9ad6fc9ecf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "c8984d12e6a9401d92286ea71cf4d9fe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d4f1d8f8426b45c3abae8d58817f1259",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b1cf768cb67340faae4761ca2feaefe3",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "c9b17ad47c3c4f3883a2e1eaf8d70e43": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ca9b09410a3c4074b6b51c4f192ad9a0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cac1cd79c34a4c33972cf222007c90c7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "cb7ed75107d444eaa0d46f10314f0672": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f8843a239d20498ca41f428a345fe28f",
       "placeholder": "​",
       "style": "IPY_MODEL_957f56a6bd604fd7bff3928d39ce70b8",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating semantic_final_topk: 100%"
      }
     },
     "ccdcdf7e775e4d1d90f252886c24a5dc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7053fa2465034af88ae9adb574e895d8",
       "max": 35.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b9db54a1a55d41e8bb97aa12e471137a",
       "tabbable": null,
       "tooltip": null,
       "value": 35.0
      }
     },
     "cdae48f8da9f47f3906cb328f665e1fd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9e44c2f22d984837b1a7e6fff2811ad4",
       "max": 300.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_41f69885cd764319bd4ee9b1b6f2cc51",
       "tabbable": null,
       "tooltip": null,
       "value": 300.0
      }
     },
     "ce4a2cc063cd4ce69fb272e7f34f0939": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d0c15ef6f7394966ba375521688a66ec": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c63fcd952081415c8ab758dc25ff6070",
       "placeholder": "​",
       "style": "IPY_MODEL_7ae8af1cc55044b0a7402b29101bc989",
       "tabbable": null,
       "tooltip": null,
       "value": " 232k/? [00:00&lt;00:00, 18.3MB/s]"
      }
     },
     "d0fd6c6ee4d04df580c7460950324d63": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ef0b228530b44f248df948f6b242ad71",
       "placeholder": "​",
       "style": "IPY_MODEL_fd49156cc27045b4a38c7353ec595d1c",
       "tabbable": null,
       "tooltip": null,
       "value": "modules.json: 100%"
      }
     },
     "d188e236262c4e71854fb4c9dedc7608": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d1be87d924d64ebc9452d44b60df4fd8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d2ba618eca3540678ed1582c189351b2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_869f1a00e15141069e46036899ea9da4",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_89387a8ffaf9452d90bd3d2bee3368bf",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "d4f1d8f8426b45c3abae8d58817f1259": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "d646f289e21e4b178772ddc4f16d3dc4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d6d35131f2f74e939ee47f97cfdbe22e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_90860f4670a6437cbed9c08867d96299",
        "IPY_MODEL_9cf615873dba496d99863314b8d1f087",
        "IPY_MODEL_c66f67340b554e07839a96cf51310501"
       ],
       "layout": "IPY_MODEL_79a76e210a2642f1a9be6d718956cb82",
       "tabbable": null,
       "tooltip": null
      }
     },
     "d8625aaf591744788b34e1260cbb3396": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d8991555426d409ebbc6b658c043af49": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d95760455e774391a91f07c27c72449f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "db4efa60fbc1499cb6c42f6a50490260": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6bc05634bd4c4373ae07eb3af9bcbbb0",
       "placeholder": "​",
       "style": "IPY_MODEL_140d65e1e33348c78443e8d5002192e2",
       "tabbable": null,
       "tooltip": null,
       "value": " 571/571 [00:00&lt;00:00, 59.0kB/s]"
      }
     },
     "de633b223b3e4554a7360d20725253ca": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_dfecd841a379471b8aaeca0b2ba5b35f",
       "placeholder": "​",
       "style": "IPY_MODEL_c4f84ebb98ba4985828e59cec71555ee",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating lgbm_final_topk: 100%"
      }
     },
     "dea5511843bb489a9b6e65177f16c335": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "dfecd841a379471b8aaeca0b2ba5b35f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "dff6478454b5423ab5efa86e3c9da77e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e0f78d8d0ce74219809d0eebd48c5bb7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_823f54546baf49038228aade61f59d53",
       "placeholder": "​",
       "style": "IPY_MODEL_1920ead706f045c89cca224c0bd8c57b",
       "tabbable": null,
       "tooltip": null,
       "value": "tokenizer.json: "
      }
     },
     "e28b1ddf024c4c25bda4a891795a5d0c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8098d02b92404caeabbaa75a3a302967",
       "placeholder": "​",
       "style": "IPY_MODEL_a04ac4d1a2704fed93ee653e0814761a",
       "tabbable": null,
       "tooltip": null,
       "value": " 20/20 [00:01&lt;00:00, 19.96it/s]"
      }
     },
     "e2c9d61e994e402aa96532cd34d516a1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e5f3665a87ec4129952465c51af0ce08": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c3896c987eba4f5499045fecaaddb9f6",
       "placeholder": "​",
       "style": "IPY_MODEL_b017124cae7b42f0bfc8eac8839c120b",
       "tabbable": null,
       "tooltip": null,
       "value": "config.json: 100%"
      }
     },
     "e64c2fd433ec4519808db9b04e6e6ad1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e6962307a8294620a2f1ca1f507591c8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "ee01ce18820d4af396f331d7593183c7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_4aadaec014324363adbdc66c92665eaa",
        "IPY_MODEL_71a3036bcdf941aaa349cff5e6de53c0",
        "IPY_MODEL_07d0c20fe9b542bf8d3b46ad3f95e9c6"
       ],
       "layout": "IPY_MODEL_86193181ea3f4a549f6cc67fbae88b26",
       "tabbable": null,
       "tooltip": null
      }
     },
     "ee43349eaebf420c83c6b9b4b3b81b44": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ff8dd2356b2b4501b0c16205f3250111",
       "placeholder": "​",
       "style": "IPY_MODEL_2dc6e793a2cb44c8adc51862b5e9089b",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [00:08&lt;00:00, 112.93it/s]"
      }
     },
     "ef0b228530b44f248df948f6b242ad71": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ef7588ab8e284a54ab0015aaecbcd7e4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_81095230da184ba0918045524526e1f9",
       "placeholder": "​",
       "style": "IPY_MODEL_9cad8413c1f54b77bd320b8b5debb7ed",
       "tabbable": null,
       "tooltip": null,
       "value": " 116/116 [00:00&lt;00:00, 14.8kB/s]"
      }
     },
     "f0093039438649b4b1ac8a745ae243a4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f3f9e286d1044dc0bd75475aa4ccd990": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f420eba38a4b470b858a38075cb730d7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f522d7538ace4d9aabfa35aca9037411": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f5e53bbb8a274ce9a64bf457883488ee": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_55afcdafeab74fca93a8279c3fa1d727",
       "placeholder": "​",
       "style": "IPY_MODEL_dff6478454b5423ab5efa86e3c9da77e",
       "tabbable": null,
       "tooltip": null,
       "value": "model.safetensors: 100%"
      }
     },
     "f5e84ce4b6c0460899e79cadadc8cea2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0a90fa96ace0419a88238b6041861955",
       "max": 53.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_e6962307a8294620a2f1ca1f507591c8",
       "tabbable": null,
       "tooltip": null,
       "value": 53.0
      }
     },
     "f5f908bf08024db6bb278a30e8107668": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_8d2a1574a4f44e129af4d40c9af0e1d6",
        "IPY_MODEL_2487f97e23da4927b58ca3efe182ff28",
        "IPY_MODEL_25b5bd244ebc4495acb7b0dff6458ba8"
       ],
       "layout": "IPY_MODEL_64a66a37388f4dc8a603ba7ac28efea9",
       "tabbable": null,
       "tooltip": null
      }
     },
     "f677e6c5c317475ebc7cfc4c028b7e50": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f8843a239d20498ca41f428a345fe28f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f9a50680ffa54c7380e4eafe0044b2e7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0ece5a2315dd45e199994738a72457f5",
       "placeholder": "​",
       "style": "IPY_MODEL_18ff943b313645f58e4a84fcafbb683e",
       "tabbable": null,
       "tooltip": null,
       "value": " 349/349 [00:00&lt;00:00, 37.6kB/s]"
      }
     },
     "fa57d1a18ca1478981e26816ae1b51cc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "fc267fac92044682b3c7ce0b477fa450": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fd49156cc27045b4a38c7353ec595d1c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "fe7b5c0aabe4499289dca272d1a46b3e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_de633b223b3e4554a7360d20725253ca",
        "IPY_MODEL_d2ba618eca3540678ed1582c189351b2",
        "IPY_MODEL_35de93f14e9c4380ae125274c6ea7aa7"
       ],
       "layout": "IPY_MODEL_17488555559c4936bb8ba52c686315c1",
       "tabbable": null,
       "tooltip": null
      }
     },
     "ff8dd2356b2b4501b0c16205f3250111": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
