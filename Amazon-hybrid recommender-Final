{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e890b9ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T19:52:04.315682Z",
     "iopub.status.busy": "2025-10-01T19:52:04.314919Z",
     "iopub.status.idle": "2025-10-01T19:52:06.169474Z",
     "shell.execute_reply": "2025-10-01T19:52:06.168666Z"
    },
    "papermill": {
     "duration": 1.866626,
     "end_time": "2025-10-01T19:52:06.171221",
     "exception": false,
     "start_time": "2025-10-01T19:52:04.304595",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a4692162",
   "metadata": {
    "papermill": {
     "duration": 0.006611,
     "end_time": "2025-10-01T19:52:06.185114",
     "exception": false,
     "start_time": "2025-10-01T19:52:06.178503",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Variant: Run with 500,000 sample rows (second phase)\n",
    "\n",
    "This variant includes `SAMPLE_ROWS=500000`. To actually restrict the dataset to 100k rows, add `.sample(SAMPLE_ROWS, random_state=42)` to the cell that loads the CSV (or adapt that read to use SAMPLE_ROWS). The rest of the notebook is unchanged and contains detailed explanations before each original code cell."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "95201041",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T19:52:06.199671Z",
     "iopub.status.busy": "2025-10-01T19:52:06.199292Z",
     "iopub.status.idle": "2025-10-01T19:52:06.203872Z",
     "shell.execute_reply": "2025-10-01T19:52:06.202977Z"
    },
    "papermill": {
     "duration": 0.013518,
     "end_time": "2025-10-01T19:52:06.205324",
     "exception": false,
     "start_time": "2025-10-01T19:52:06.191806",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "SAMPLE_ROWS = 500000  # set to 500000 to use a 500k-sample in the data-loading step\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0feeed0c",
   "metadata": {
    "papermill": {
     "duration": 0.006309,
     "end_time": "2025-10-01T19:52:06.218328",
     "exception": false,
     "start_time": "2025-10-01T19:52:06.212019",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Amazon Hybrid Recommender — Final Notebook\n",
    "\n",
    "Comprehensive, runnable notebook containing prototype and scale stages, candidate generation, feature engineering, hard-negative mining, LightGBM ranking, diagnostics, and recommendations. This version contains full code and explanatory markdowns. Run cells sequentially. Some cells are resource-heavy (SBERT encoding, ALS, FAISS). The notebook includes CPU fallbacks for environments without `implicit` or `faiss`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65f71084",
   "metadata": {
    "papermill": {
     "duration": 0.006328,
     "end_time": "2025-10-01T19:52:06.231189",
     "exception": false,
     "start_time": "2025-10-01T19:52:06.224861",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## How to run\n",
    "\n",
    "1. Run top-to-bottom. If your environment is offline or lacks `implicit`/`faiss`, the notebook falls back to CPU-friendly alternatives.\n",
    "2. The notebook writes artifact files to `OUT_DIR` (default `/kaggle/working`).\n",
    "3. If you install new packages mid-run (e.g., `implicit`), you may need to restart the kernel.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4385347e",
   "metadata": {
    "papermill": {
     "duration": 0.006115,
     "end_time": "2025-10-01T19:52:06.244510",
     "exception": false,
     "start_time": "2025-10-01T19:52:06.238395",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 3\n",
    "\n",
    "**Purpose:** Imports libraries used later.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Cell 1: Setup — Install-check and imports (non-blocking installs)` → Comment describing intent.\n",
    "- `# Optional: uncomment pip installs if you have internet and want to ensure all libs are present.` → Comment describing intent.\n",
    "- `!pip install -q datasets sentence-transformers scikit-learn lightgbm optuna joblib tqdm pandas scipy faiss-cpu implicit` → Performs a step relevant to data processing or modelling.\n",
    "- `import os, time, warnings, importlib` → Imports module(s).\n",
    "- `import numpy as np, pandas as pd, random, joblib` → Imports module(s).\n",
    "- `from collections import Counter, defaultdict` → Imports module(s).\n",
    "- `from scipy.sparse import csr_matrix` → Imports module(s).\n",
    "- `from tqdm.auto import tqdm` → Imports module(s).\n",
    "- `from math import log2` → Imports module(s).\n",
    "- `warnings.filterwarnings('ignore', category=UserWarning)` → Performs a step relevant to data processing or modelling.\n",
    "- `# Feature list and output directory (kept consistent with original notebook)` → Comment describing intent.\n",
    "- `OUT_DIR = '/kaggle/working'` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "24b8668a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T19:52:06.259313Z",
     "iopub.status.busy": "2025-10-01T19:52:06.258556Z",
     "iopub.status.idle": "2025-10-01T19:53:48.568315Z",
     "shell.execute_reply": "2025-10-01T19:53:48.567284Z"
    },
    "papermill": {
     "duration": 102.319349,
     "end_time": "2025-10-01T19:53:48.570339",
     "exception": false,
     "start_time": "2025-10-01T19:52:06.250990",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m31.4/31.4 MB\u001b[0m \u001b[31m46.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.9/8.9 MB\u001b[0m \u001b[31m96.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m193.6/193.6 kB\u001b[0m \u001b[31m12.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m82.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m52.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m36.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m27.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m11.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m7.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m74.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "bigframes 2.8.0 requires google-cloud-bigquery-storage<3.0.0,>=2.30.0, which is not installed.\r\n",
      "cesium 0.12.4 requires numpy<3.0,>=2.0, but you have numpy 1.26.4 which is incompatible.\r\n",
      "gcsfs 2025.3.2 requires fsspec==2025.3.2, but you have fsspec 2025.3.0 which is incompatible.\r\n",
      "bigframes 2.8.0 requires google-cloud-bigquery[bqstorage,pandas]>=3.31.0, but you have google-cloud-bigquery 3.25.0 which is incompatible.\r\n",
      "bigframes 2.8.0 requires rich<14,>=12.4.4, but you have rich 14.0.0 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0mEnvironment flags — HAS_SBERT: True HAS_IMPLICIT: True HAS_FAISS: True\n"
     ]
    }
   ],
   "source": [
    "# Cell 1: Setup — Install-check and imports (non-blocking installs)\n",
    "# Optional: uncomment pip installs if you have internet and want to ensure all libs are present.\n",
    "!pip install -q datasets sentence-transformers scikit-learn lightgbm optuna joblib tqdm pandas scipy faiss-cpu implicit\n",
    "\n",
    "import os, time, warnings, importlib\n",
    "import numpy as np, pandas as pd, random, joblib\n",
    "from collections import Counter, defaultdict\n",
    "from scipy.sparse import csr_matrix\n",
    "from tqdm.auto import tqdm\n",
    "from math import log2\n",
    "\n",
    "warnings.filterwarnings('ignore', category=UserWarning)\n",
    "\n",
    "# Feature list and output directory (kept consistent with original notebook)\n",
    "OUT_DIR = '/kaggle/working'\n",
    "feature_names = ['sem_score','sem_rank','als_score','als_rank','svd_score','svd_rank','pop_log','pop_rank','recency_days','title_len','txt_len','user_mean_rating','user_activity_count']\n",
    "feat_cols = feature_names\n",
    "now_ts = int(time.time() * 1000)\n",
    "\n",
    "# Flags for optional libs — later cells use these flags to decide runtime paths\n",
    "HAS_IMPLICIT = importlib.util.find_spec('implicit') is not None\n",
    "HAS_FAISS = importlib.util.find_spec('faiss') is not None\n",
    "HAS_SBERT = importlib.util.find_spec('sentence_transformers') is not None\n",
    "\n",
    "print('Environment flags — HAS_SBERT:', HAS_SBERT, 'HAS_IMPLICIT:', HAS_IMPLICIT, 'HAS_FAISS:', HAS_FAISS)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bda7eb99",
   "metadata": {
    "papermill": {
     "duration": 0.039242,
     "end_time": "2025-10-01T19:53:48.650242",
     "exception": false,
     "start_time": "2025-10-01T19:53:48.611000",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1 — Prototype Data Load (10k)\n",
    "\n",
    "Load a small streaming sample (10k rows) from the Hugging Face Amazon Reviews dataset to iterate quickly and debug logic. This cell normalizes timestamps to milliseconds, drops records missing `asin` or `reviewerID`, and writes `sampled_reviews_10k.parquet` to `OUT_DIR`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b606dc5",
   "metadata": {
    "papermill": {
     "duration": 0.037641,
     "end_time": "2025-10-01T19:53:48.726141",
     "exception": false,
     "start_time": "2025-10-01T19:53:48.688500",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 5\n",
    "\n",
    "**Purpose:** Imports libraries used later. Saves results or models to disk.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Prototype Data Load (10k)` → Comment describing intent.\n",
    "- `SAMPLE_N = 10000` → Performs a step relevant to data processing or modelling.\n",
    "- `HF_DATASET = 'McAuley-Lab/Amazon-Reviews-2023'` → Performs a step relevant to data processing or modelling.\n",
    "- `HF_CONFIG = 'raw_review_Electronics'` → Performs a step relevant to data processing or modelling.\n",
    "- `OUT_DIR = OUT_DIR if 'OUT_DIR' in globals() else '/kaggle/working'` → Performs a step relevant to data processing or modelling.\n",
    "- `from datasets import load_dataset` → Imports module(s).\n",
    "- `rows = []` → Performs a step relevant to data processing or modelling.\n",
    "- `cnt = 0` → Performs a step relevant to data processing or modelling.\n",
    "- `t0 = time.time()` → Performs a step relevant to data processing or modelling.\n",
    "- `ds_iter = load_dataset(HF_DATASET, HF_CONFIG, split='full', streaming=True, trust_remote_code=True)` → Performs a step relevant to data processing or modelling.\n",
    "- `for rec in ds_iter:` → Performs a step relevant to data processing or modelling.\n",
    "- `try:` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3fe4af22",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T19:53:48.916870Z",
     "iopub.status.busy": "2025-10-01T19:53:48.916342Z",
     "iopub.status.idle": "2025-10-01T19:53:56.610528Z",
     "shell.execute_reply": "2025-10-01T19:53:56.609377Z"
    },
    "papermill": {
     "duration": 7.735787,
     "end_time": "2025-10-01T19:53:56.612199",
     "exception": false,
     "start_time": "2025-10-01T19:53:48.876412",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c247945e3185427184853ed86e33c748",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "README.md: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "487190fe32b54fbc99d9563d58ad8c0b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Amazon-Reviews-2023.py: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded 10000 rows. Saved to /kaggle/working/sampled_reviews_10k.parquet\n"
     ]
    }
   ],
   "source": [
    "# Prototype Data Load (10k)\n",
    "SAMPLE_N = 10000\n",
    "HF_DATASET = 'McAuley-Lab/Amazon-Reviews-2023'\n",
    "HF_CONFIG = 'raw_review_Electronics'\n",
    "OUT_DIR = OUT_DIR if 'OUT_DIR' in globals() else '/kaggle/working'\n",
    "\n",
    "from datasets import load_dataset\n",
    "\n",
    "rows = []\n",
    "cnt = 0\n",
    "t0 = time.time()\n",
    "ds_iter = load_dataset(HF_DATASET, HF_CONFIG, split='full', streaming=True, trust_remote_code=True)\n",
    "for rec in ds_iter:\n",
    "    try:\n",
    "        asin = rec.get('asin') or rec.get('parent_asin')\n",
    "        user = rec.get('user_id') or rec.get('reviewerID')\n",
    "        text = rec.get('text') or rec.get('reviewText') or ''\n",
    "        overall = rec.get('rating') or rec.get('overall')\n",
    "        ts = rec.get('timestamp') or rec.get('unixReviewTime') or 0\n",
    "        helpful = rec.get('helpful_vote') or 0\n",
    "        if asin is None or user is None: \n",
    "            continue\n",
    "        ts_i = int(ts); ts_i = ts_i * 1000 if ts_i < 10**10 else ts_i\n",
    "        rows.append({'asin': str(asin), 'reviewerID': str(user), 'reviewText': str(text), 'overall': float(overall) if overall is not None else float('nan'), 'unixReviewTime': int(ts_i), 'helpful_vote': int(helpful)})\n",
    "        cnt += 1\n",
    "        if cnt >= SAMPLE_N: break\n",
    "    except Exception:\n",
    "        continue\n",
    "df = pd.DataFrame(rows)\n",
    "os.makedirs(OUT_DIR, exist_ok=True)\n",
    "df.to_parquet(f\"{OUT_DIR}/sampled_reviews_10k.parquet\", index=False)\n",
    "print('Loaded', len(df), 'rows. Saved to', f\"{OUT_DIR}/sampled_reviews_10k.parquet\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c65d66c0",
   "metadata": {
    "papermill": {
     "duration": 0.03938,
     "end_time": "2025-10-01T19:53:56.691788",
     "exception": false,
     "start_time": "2025-10-01T19:53:56.652408",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Build maps and interaction (prototype)\n",
    "\n",
    "Create `item_map`, `user_map` and the sparse interaction matrix used by ALS and candidate generation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a5fb1a66",
   "metadata": {
    "papermill": {
     "duration": 0.038344,
     "end_time": "2025-10-01T19:53:56.769269",
     "exception": false,
     "start_time": "2025-10-01T19:53:56.730925",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 7\n",
    "\n",
    "**Purpose:** Performs an operation relevant to the pipeline (see code).\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Build maps and interaction (prototype)` → Comment describing intent.\n",
    "- `unique_asins = sorted(df['asin'].unique().tolist())` → Performs a step relevant to data processing or modelling.\n",
    "- `unique_users = sorted(df['reviewerID'].unique().tolist())` → Performs a step relevant to data processing or modelling.\n",
    "- `item_map = {a:i for i,a in enumerate(unique_asins)}` → Performs a step relevant to data processing or modelling.\n",
    "- `inv_item_map = {i:a for a,i in item_map.items()}` → Performs a step relevant to data processing or modelling.\n",
    "- `user_map = {u:i for i,u in enumerate(unique_users)}` → Performs a step relevant to data processing or modelling.\n",
    "- `inv_user_map = {i:u for u,i in user_map.items()}` → Performs a step relevant to data processing or modelling.\n",
    "- `n_users, n_items = len(user_map), len(item_map)` → Performs a step relevant to data processing or modelling.\n",
    "- `u_idx = []; i_idx = []; data = []` → Performs a step relevant to data processing or modelling.\n",
    "- `for _, r in df.iterrows():` → Performs a step relevant to data processing or modelling.\n",
    "- `try:` → Performs a step relevant to data processing or modelling.\n",
    "- `u = user_map[r['reviewerID']]; i = item_map[r['asin']]` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "72750bac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T19:53:56.848480Z",
     "iopub.status.busy": "2025-10-01T19:53:56.847953Z",
     "iopub.status.idle": "2025-10-01T19:53:57.385472Z",
     "shell.execute_reply": "2025-10-01T19:53:57.384489Z"
    },
    "papermill": {
     "duration": 0.579169,
     "end_time": "2025-10-01T19:53:57.387054",
     "exception": false,
     "start_time": "2025-10-01T19:53:56.807885",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Maps built: 1561 users x 8907 items\n"
     ]
    }
   ],
   "source": [
    "# Build maps and interaction (prototype)\n",
    "unique_asins = sorted(df['asin'].unique().tolist())\n",
    "unique_users = sorted(df['reviewerID'].unique().tolist())\n",
    "item_map = {a:i for i,a in enumerate(unique_asins)}\n",
    "inv_item_map = {i:a for a,i in item_map.items()}\n",
    "user_map = {u:i for i,u in enumerate(unique_users)}\n",
    "inv_user_map = {i:u for u,i in user_map.items()}\n",
    "\n",
    "n_users, n_items = len(user_map), len(item_map)\n",
    "u_idx = []; i_idx = []; data = []\n",
    "for _, r in df.iterrows():\n",
    "    try:\n",
    "        u = user_map[r['reviewerID']]; i = item_map[r['asin']]\n",
    "        w = float(r['overall']) if not pd.isna(r['overall']) else 1.0 + int(r.get('helpful_vote',0))\n",
    "        u_idx.append(u); i_idx.append(i); data.append(w)\n",
    "    except KeyError:\n",
    "        continue\n",
    "\n",
    "interaction = csr_matrix((data, (u_idx, i_idx)), shape=(n_users, n_items)).tocsr()\n",
    "item_user_matrix = interaction.T.tocsr()\n",
    "pop_counts = Counter(df['asin'])\n",
    "test_df_proto = df.groupby('reviewerID').tail(1).reset_index(drop=True)\n",
    "print('Maps built:', n_users, 'users x', n_items, 'items')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7436035b",
   "metadata": {
    "papermill": {
     "duration": 0.038442,
     "end_time": "2025-10-01T19:53:57.464990",
     "exception": false,
     "start_time": "2025-10-01T19:53:57.426548",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 2 — Helper functions & Feature Builder\n",
    "\n",
    "This cell defines helper utilities used throughout the notebook:\n",
    "\n",
    "- `user_profile_emb`: compute a user's profile embedding (mean of item embeddings) with safe fallbacks.\n",
    "- `build_candidates_union`: aggregate candidates from semantic nearest neighbors, ALS, SVD, popularity and MF neighbors.\n",
    "- `build_features_for_candidates`: compute features used by the LightGBM reranker.\n",
    "\n",
    "All functions include robust error handling so the notebook runs even if optional libraries are missing."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1c4b3c68",
   "metadata": {
    "papermill": {
     "duration": 0.039053,
     "end_time": "2025-10-01T19:53:57.543690",
     "exception": false,
     "start_time": "2025-10-01T19:53:57.504637",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 9\n",
    "\n",
    "**Purpose:** Imports libraries used later. Defines function(s) used downstream.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Helper functions and feature builder (robust)` → Comment describing intent.\n",
    "- `import numpy as np, pandas as pd, math` → Imports module(s).\n",
    "- `from collections import defaultdict` → Imports module(s).\n",
    "- `# Ensure inv maps exist` → Comment describing intent.\n",
    "- `if 'inv_item_map' not in globals(): inv_item_map = {}` → Performs a step relevant to data processing or modelling.\n",
    "- `if 'inv_user_map' not in globals(): inv_user_map = {}` → Performs a step relevant to data processing or modelling.\n",
    "- `def user_profile_emb(uidx, emb_array, df_data, i_map, u_map):` → Performs a step relevant to data processing or modelling.\n",
    "- `# uid -> user string` → Comment describing intent.\n",
    "- `uid = None` → Performs a step relevant to data processing or modelling.\n",
    "- `if 'inv_user_map' in globals() and uidx in inv_user_map:` → Performs a step relevant to data processing or modelling.\n",
    "- `uid = inv_user_map.get(uidx)` → Performs a step relevant to data processing or modelling.\n",
    "- `if uid is None:` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e7f71160",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T19:53:57.626320Z",
     "iopub.status.busy": "2025-10-01T19:53:57.625989Z",
     "iopub.status.idle": "2025-10-01T19:53:57.654934Z",
     "shell.execute_reply": "2025-10-01T19:53:57.654064Z"
    },
    "papermill": {
     "duration": 0.071041,
     "end_time": "2025-10-01T19:53:57.656470",
     "exception": false,
     "start_time": "2025-10-01T19:53:57.585429",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Helper functions and feature builder (robust)\n",
    "import numpy as np, pandas as pd, math\n",
    "from collections import defaultdict\n",
    "\n",
    "# Ensure inv maps exist\n",
    "if 'inv_item_map' not in globals(): inv_item_map = {}\n",
    "if 'inv_user_map' not in globals(): inv_user_map = {}\n",
    "\n",
    "def user_profile_emb(uidx, emb_array, df_data, i_map, u_map):\n",
    "    # uid -> user string\n",
    "    uid = None\n",
    "    if 'inv_user_map' in globals() and uidx in inv_user_map:\n",
    "        uid = inv_user_map.get(uidx)\n",
    "    if uid is None:\n",
    "        # fallback: if uidx already a string, try that\n",
    "        uid = uidx if isinstance(uidx, str) else None\n",
    "    if uid is None:\n",
    "        return emb_array.mean(axis=0)\n",
    "    item_list = df_data[df_data['reviewerID']==uid]['asin'].map(i_map).dropna().astype(int).tolist()\n",
    "    if item_list and len(item_list)>0:\n",
    "        return emb_array[item_list].mean(axis=0)\n",
    "    else:\n",
    "        return emb_array.mean(axis=0)\n",
    "\n",
    "def build_candidates_union(uidx, emb_array, als_model, svd_facs, i_map, p_counts, u_map, df_data, inter_mat, top_sem=500, top_als=200, top_svd=200, top_pop=200, top_mf=200, max_cands=2000):\n",
    "    candidates = []; seen = set()\n",
    "    # semantic\n",
    "    if emb_array is not None:\n",
    "        try:\n",
    "            up = user_profile_emb(uidx, emb_array, df_data, i_map, u_map).astype('float32')\n",
    "            un = up / (np.linalg.norm(up) + 1e-9)\n",
    "            scores = emb_array.dot(un)\n",
    "            sem_idxs = np.argsort(-scores)[:top_sem]\n",
    "            for it in map(int, sem_idxs):\n",
    "                if it not in seen: seen.add(it); candidates.append(it)\n",
    "        except Exception:\n",
    "            pass\n",
    "    # ALS recommend\n",
    "    if als_model is not None:\n",
    "        try:\n",
    "            rec = als_model.recommend(uidx, inter_mat[uidx], N=top_als)\n",
    "            als_list = []\n",
    "            if isinstance(rec, list) and len(rec)>0 and isinstance(rec[0], (list,tuple)):\n",
    "                als_list = [int(r[0]) for r in rec]\n",
    "            elif isinstance(rec, tuple) and len(rec)==2:\n",
    "                als_list = [int(x) for x in rec[0]]\n",
    "            else:\n",
    "                try:\n",
    "                    als_list = [int(r[0]) if isinstance(r,(list,tuple)) else int(r) for r in rec]\n",
    "                except Exception:\n",
    "                    als_list = []\n",
    "            for it in als_list:\n",
    "                if it not in seen: seen.add(it); candidates.append(it)\n",
    "        except Exception:\n",
    "            pass\n",
    "    # SVD global similarity\n",
    "    if svd_facs is not None:\n",
    "        try:\n",
    "            user_vec = svd_facs.mean(axis=0)\n",
    "            svd_scores = svd_facs.dot(user_vec)\n",
    "            svd_idx = np.argsort(-svd_scores)[:top_svd]\n",
    "            for it in map(int, svd_idx):\n",
    "                if it not in seen: seen.add(it); candidates.append(it)\n",
    "        except Exception:\n",
    "            pass\n",
    "    # popularity\n",
    "    try:\n",
    "        pop_list = [i_map.get(a) for a,_ in p_counts.most_common(top_pop) if a in i_map]\n",
    "        for it in pop_list:\n",
    "            if it not in seen: seen.add(it); candidates.append(it)\n",
    "    except Exception:\n",
    "        pass\n",
    "    # MF neighbors (approx via item factors if available)\n",
    "    try:\n",
    "        if als_model is not None and hasattr(als_model, 'item_factors'):\n",
    "            item_facs = als_model.item_factors\n",
    "            user_items = inter_mat[uidx].indices.tolist() if hasattr(inter_mat[uidx], 'indices') else []\n",
    "            for it in user_items[:5]:\n",
    "                vec = item_facs[it]\n",
    "                sim = item_facs.dot(vec)\n",
    "                neigh = np.argsort(-sim)[:top_mf]\n",
    "                for ni in map(int, neigh):\n",
    "                    if ni not in seen: seen.add(ni); candidates.append(ni)\n",
    "    except Exception:\n",
    "        pass\n",
    "    return candidates[:max_cands]\n",
    "\n",
    "def build_features_for_candidates(uidx, cands, emb_array, als_facs, als_u_facs, svd_facs, df_data, i_map, u_map, p_counts, feat_names, now_ts):\n",
    "    n = len(cands); X = np.zeros((n, len(feat_names)), dtype=float)\n",
    "    # user emb\n",
    "    try:\n",
    "        uemb = user_profile_emb(uidx, emb_array, df_data, i_map, u_map); uembn = uemb/(np.linalg.norm(uemb)+1e-9)\n",
    "    except Exception:\n",
    "        uembn = emb_array.mean(axis=0); uembn = uembn/(np.linalg.norm(uembn)+1e-9)\n",
    "    # sem\n",
    "    try:\n",
    "        sem_scores = (emb_array[cands] * uembn).sum(axis=1)\n",
    "        X[:, feat_names.index('sem_score')] = sem_scores\n",
    "        ranks = np.empty(n, dtype=int); ranks[np.argsort(-sem_scores)] = np.arange(n); X[:, feat_names.index('sem_rank')] = ranks\n",
    "    except Exception:\n",
    "        pass\n",
    "    # als\n",
    "    try:\n",
    "        if als_facs is not None and als_u_facs is not None:\n",
    "            uf = als_u_facs[uidx] if uidx < als_u_facs.shape[0] else als_facs.mean(axis=0)\n",
    "            als_scores = np.dot(als_facs[cands], uf)\n",
    "            X[:, feat_names.index('als_score')] = als_scores\n",
    "            ranks = np.empty(n, dtype=int); ranks[np.argsort(-als_scores)] = np.arange(n); X[:, feat_names.index('als_rank')] = ranks\n",
    "    except Exception:\n",
    "        pass\n",
    "    # svd\n",
    "    try:\n",
    "        if svd_facs is not None:\n",
    "            user_fact = svd_facs.mean(axis=0); svd_scores = svd_facs[cands].dot(user_fact)\n",
    "            X[:, feat_names.index('svd_score')] = svd_scores; ranks = np.empty(n, dtype=int); ranks[np.argsort(-svd_scores)] = np.arange(n); X[:, feat_names.index('svd_rank')] = ranks\n",
    "    except Exception:\n",
    "        pass\n",
    "    # pop & recency\n",
    "    try:\n",
    "        pop_vals = np.array([p_counts.get(inv_item_map.get(i, ''), 0) for i in cands], dtype=float)\n",
    "        X[:, feat_names.index('pop_log')] = np.log1p(pop_vals); ranks = np.empty(n,dtype=int); ranks[np.argsort(-pop_vals)] = np.arange(n); X[:, feat_names.index('pop_rank')] = ranks\n",
    "        recency_ms = np.array([item_last_ts.get(inv_item_map.get(i, ''), 0) for i in cands], dtype=float); X[:, feat_names.index('recency_days')] = ((now_ts - recency_ms)/(1000*60*60*24)).clip(min=0)\n",
    "    except Exception:\n",
    "        pass\n",
    "    # text & user stats\n",
    "    try:\n",
    "        title_len=[]; txt_len=[]\n",
    "        for idx in cands:\n",
    "            asin = inv_item_map.get(idx, ''); rows_sub = df_data[df_data['asin']==asin]\n",
    "            title = rows_sub['title'].iloc[0] if ('title' in rows_sub.columns and len(rows_sub)>0 and pd.notna(rows_sub['title'].iloc[0])) else ''\n",
    "            text = rows_sub['reviewText'].iloc[0] if ('reviewText' in rows_sub.columns and len(rows_sub)>0 and pd.notna(rows_sub['reviewText'].iloc[0])) else ''\n",
    "            title_len.append(len(str(title))); txt_len.append(len(str(text)))\n",
    "        X[:, feat_names.index('title_len')] = np.array(title_len); X[:, feat_names.index('txt_len')] = np.array(txt_len)\n",
    "        uid = inv_user_map.get(uidx, None); user_rows = df_data[df_data['reviewerID']==uid] if uid else pd.DataFrame()\n",
    "        X[:, feat_names.index('user_mean_rating')] = float(user_rows['overall'].mean() if len(user_rows)>0 else 0.0); X[:, feat_names.index('user_activity_count')] = float(len(user_rows))\n",
    "    except Exception:\n",
    "        pass\n",
    "    return {'X': X, 'cands': cands, 'feature_names': feat_names}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "479f74cd",
   "metadata": {
    "papermill": {
     "duration": 0.038352,
     "end_time": "2025-10-01T19:53:57.734131",
     "exception": false,
     "start_time": "2025-10-01T19:53:57.695779",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 3 — Hard-negative mining (prototype)\n",
    "\n",
    "Create meta-training pairs (pos/neg) for the LTR model. This prototype uses a combination of hard negatives (top-ranked non-pos by ALS/SVD) and random negatives."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bfa126cf",
   "metadata": {
    "papermill": {
     "duration": 0.038209,
     "end_time": "2025-10-01T19:53:57.811070",
     "exception": false,
     "start_time": "2025-10-01T19:53:57.772861",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 11\n",
    "\n",
    "**Purpose:** Imports libraries used later.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Hard-negative mining (prototype)` → Comment describing intent.\n",
    "- `import random` → Imports module(s).\n",
    "- `USERS_TO_USE = 300; HARD_NEG_PER_POS = 60; RANDOM_NEG_PER_POS = 5` → Performs a step relevant to data processing or modelling.\n",
    "- `meta_rows = []; all_users = list(df['reviewerID'].unique()); sample_users = all_users[:min(USERS_TO_USE, len(all_users))]` → Performs a step relevant to data processing or modelling.\n",
    "- `for uid in tqdm(sample_users, desc='Building Meta Prototype'):` → Performs a step relevant to data processing or modelling.\n",
    "- `uidx = user_map.get(uid);` → Performs a step relevant to data processing or modelling.\n",
    "- `if uidx is None: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `cands = build_candidates_union(uidx, None, None, None, item_map, pop_counts, user_map, df, interaction, top_sem=500, top_als=200, top_svd=200, top_pop=200, max_cands=1000)` → Performs a step relevant to data processing or modelling.\n",
    "- `if not cands: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `mf = build_features_for_candidates(uidx, cands, np.zeros((len(item_map), 768)), None, None, None, df, item_map, user_map, pop_counts, feature_names, now_ts)` → Performs a step relevant to data processing or modelling.\n",
    "- `Xc = mf['X']; cidx = mf['cands']; fns = mf['feature_names']` → Performs a step relevant to data processing or modelling.\n",
    "- `true_asins = test_df_proto[test_df_proto['reviewerID']==uid]['asin'].tolist(); true_idxs = [item_map[a] for a in true_asins if a in item_map]` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f81e3a24",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T19:53:57.908566Z",
     "iopub.status.busy": "2025-10-01T19:53:57.908244Z",
     "iopub.status.idle": "2025-10-01T19:55:13.997868Z",
     "shell.execute_reply": "2025-10-01T19:55:13.996779Z"
    },
    "papermill": {
     "duration": 76.149038,
     "end_time": "2025-10-01T19:55:13.999383",
     "exception": false,
     "start_time": "2025-10-01T19:53:57.850345",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a4033f585fe04b138666159d7623f6e5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Building Meta Prototype:   0%|          | 0/300 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "meta_df_small shape: (2640, 16)\n"
     ]
    }
   ],
   "source": [
    "# Hard-negative mining (prototype)\n",
    "import random\n",
    "USERS_TO_USE = 300; HARD_NEG_PER_POS = 60; RANDOM_NEG_PER_POS = 5\n",
    "meta_rows = []; all_users = list(df['reviewerID'].unique()); sample_users = all_users[:min(USERS_TO_USE, len(all_users))]\n",
    "for uid in tqdm(sample_users, desc='Building Meta Prototype'):\n",
    "    uidx = user_map.get(uid); \n",
    "    if uidx is None: continue\n",
    "    cands = build_candidates_union(uidx, None, None, None, item_map, pop_counts, user_map, df, interaction, top_sem=500, top_als=200, top_svd=200, top_pop=200, max_cands=1000)\n",
    "    if not cands: continue\n",
    "    mf = build_features_for_candidates(uidx, cands, np.zeros((len(item_map), 768)), None, None, None, df, item_map, user_map, pop_counts, feature_names, now_ts)\n",
    "    Xc = mf['X']; cidx = mf['cands']; fns = mf['feature_names']\n",
    "    true_asins = test_df_proto[test_df_proto['reviewerID']==uid]['asin'].tolist(); true_idxs = [item_map[a] for a in true_asins if a in item_map]\n",
    "    if not true_idxs: continue\n",
    "    als_col = Xc[:, fns.index('als_score')] if 'als_score' in fns else np.zeros(Xc.shape[0])\n",
    "    svd_col = Xc[:, fns.index('svd_score')] if 'svd_score' in fns else np.zeros(Xc.shape[0])\n",
    "    hard_score = 0.5 * als_col + 0.5 * svd_col\n",
    "    cand_arr = np.array(cidx); pos_mask = np.isin(cand_arr, true_idxs); non_pos_idx = np.where(~pos_mask)[0]\n",
    "    if len(non_pos_idx)==0: continue\n",
    "    ordering = non_pos_idx[np.argsort(-hard_score[non_pos_idx])]; hard_negs_idx = ordering[:HARD_NEG_PER_POS].tolist()\n",
    "    remaining = list(set(non_pos_idx.tolist()) - set(hard_negs_idx)); random_negs_idx = random.sample(remaining, min(RANDOM_NEG_PER_POS, len(remaining))) if remaining else []\n",
    "    for t in true_idxs:\n",
    "        pos_loc = np.where(cand_arr==t)[0]; \n",
    "        if len(pos_loc)==0: continue\n",
    "        for p in pos_loc:\n",
    "            row = {'user_idx': uidx, 'item_idx': int(cidx[p]), 'label': 1}\n",
    "            for j,fn in enumerate(fns):\n",
    "                try: row[fn] = float(Xc[p,j])\n",
    "                except: row[fn] = 0.0\n",
    "            meta_rows.append(row)\n",
    "            for idx in hard_negs_idx:\n",
    "                rn = {'user_idx': uidx, 'item_idx': int(cidx[idx]), 'label': 0}\n",
    "                for j,fn in enumerate(fns):\n",
    "                    try: rn[fn] = float(Xc[idx,j])\n",
    "                    except: rn[fn] = 0.0\n",
    "                meta_rows.append(rn)\n",
    "            for idx in random_negs_idx:\n",
    "                rr = {'user_idx': uidx, 'item_idx': int(cidx[idx]), 'label': 0}\n",
    "                for j,fn in enumerate(fns):\n",
    "                    try: rr[fn] = float(Xc[idx,j])\n",
    "                    except: rr[fn] = 0.0\n",
    "                meta_rows.append(rr)\n",
    "meta_df_small = pd.DataFrame(meta_rows).sample(frac=1.0, random_state=42).reset_index(drop=True)\n",
    "meta_df_small.to_parquet(f\"{OUT_DIR}/meta_enhanced_small.parquet\", index=False)\n",
    "print('meta_df_small shape:', meta_df_small.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6725ae01",
   "metadata": {
    "papermill": {
     "duration": 0.03906,
     "end_time": "2025-10-01T19:55:14.078088",
     "exception": false,
     "start_time": "2025-10-01T19:55:14.039028",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 4 — LightGBM Tuning & Prototype Training\n",
    "\n",
    "Use Optuna to tune lambdarank hyperparameters. Important: set `feature_pre_filter=False` so trials changing `min_data_in_leaf` don't error."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b4c8eb0",
   "metadata": {
    "papermill": {
     "duration": 0.038612,
     "end_time": "2025-10-01T19:55:14.157549",
     "exception": false,
     "start_time": "2025-10-01T19:55:14.118937",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 13\n",
    "\n",
    "**Purpose:** Imports libraries used later. Defines function(s) used downstream. Trains a model / fits parameters. Produces predictions on data.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# LightGBM tuning & training (prototype)` → Comment describing intent.\n",
    "- `import lightgbm as lgb, optuna` → Imports module(s).\n",
    "- `from sklearn.model_selection import train_test_split` → Imports module(s).\n",
    "- `from math import log2` → Imports module(s).\n",
    "- `feat_cols = [c for c in meta_df_small.columns if c not in ('user_idx','item_idx','label')]` → Performs a step relevant to data processing or modelling.\n",
    "- `users = meta_df_small['user_idx'].unique(); train_u, valid_u = train_test_split(list(users), test_size=0.20, random_state=42)` → Performs a step relevant to data processing or modelling.\n",
    "- `tr_mask = meta_df_small['user_idx'].isin(train_u); val_mask = meta_df_small['user_idx'].isin(valid_u)` → Performs a step relevant to data processing or modelling.\n",
    "- `X_tr = meta_df_small[tr_mask][feat_cols].values; y_tr = meta_df_small[tr_mask]['label'].values` → Performs a step relevant to data processing or modelling.\n",
    "- `gr_tr = meta_df_small[tr_mask].groupby('user_idx', sort=False).size().astype(int).values` → Groups and aggregates data.\n",
    "- `X_val = meta_df_small[val_mask][feat_cols].values; y_val = meta_df_small[val_mask]['label'].values` → Performs a step relevant to data processing or modelling.\n",
    "- `gr_val = meta_df_small[val_mask].groupby('user_idx', sort=False).size().astype(int).values` → Groups and aggregates data.\n",
    "- `dtrain = lgb.Dataset(X_tr, label=y_tr, group=gr_tr); dval = lgb.Dataset(X_val, label=y_val, group=gr_val, reference=dtrain)` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d1295907",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T19:55:14.237416Z",
     "iopub.status.busy": "2025-10-01T19:55:14.236347Z",
     "iopub.status.idle": "2025-10-01T19:55:21.499424Z",
     "shell.execute_reply": "2025-10-01T19:55:21.498545Z"
    },
    "papermill": {
     "duration": 7.304457,
     "end_time": "2025-10-01T19:55:21.500858",
     "exception": false,
     "start_time": "2025-10-01T19:55:14.196401",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-10-01 19:55:19,887] A new study created in memory with name: no-name-22ad1b40-a287-4af5-b6ce-2586049811a0\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "46716599285c433b94c3e9ac29bbb9fe",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/20 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[24]\tvalid_0's ndcg@10: 0.769504\n",
      "[I 2025-10-01 19:55:20,007] Trial 0 finished with value: -0.0 and parameters: {'learning_rate': 0.032542870505834216, 'num_leaves': 121, 'min_data_in_leaf': 99, 'feature_fraction': 0.7492742816056076}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[9]\tvalid_0's ndcg@10: 0.686436\n",
      "[I 2025-10-01 19:55:20,060] Trial 1 finished with value: -0.0 and parameters: {'learning_rate': 0.006481244100335988, 'num_leaves': 73, 'min_data_in_leaf': 149, 'feature_fraction': 0.9723640789519143}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[6]\tvalid_0's ndcg@10: 0.720161\n",
      "[I 2025-10-01 19:55:20,127] Trial 2 finished with value: -0.0 and parameters: {'learning_rate': 0.0027502036109170297, 'num_leaves': 36, 'min_data_in_leaf': 23, 'feature_fraction': 0.7722554897278279}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[26]\tvalid_0's ndcg@10: 0.763554\n",
      "[I 2025-10-01 19:55:20,194] Trial 3 finished with value: -0.0 and parameters: {'learning_rate': 0.005467615348657102, 'num_leaves': 99, 'min_data_in_leaf': 105, 'feature_fraction': 0.7372127147128966}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[2]\tvalid_0's ndcg@10: 0.810039\n",
      "[I 2025-10-01 19:55:20,245] Trial 4 finished with value: -0.0 and parameters: {'learning_rate': 0.010416948611683297, 'num_leaves': 62, 'min_data_in_leaf': 76, 'feature_fraction': 0.6484533269625268}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[18]\tvalid_0's ndcg@10: 0.730185\n",
      "[I 2025-10-01 19:55:20,308] Trial 5 finished with value: -0.0 and parameters: {'learning_rate': 0.09674094848369234, 'num_leaves': 66, 'min_data_in_leaf': 124, 'feature_fraction': 0.5748005773187491}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[8]\tvalid_0's ndcg@10: 0.804846\n",
      "[I 2025-10-01 19:55:20,366] Trial 6 finished with value: -0.0 and parameters: {'learning_rate': 0.0012449711316575053, 'num_leaves': 46, 'min_data_in_leaf': 67, 'feature_fraction': 0.8150139093062175}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[14]\tvalid_0's ndcg@10: 0.701643\n",
      "[I 2025-10-01 19:55:20,423] Trial 7 finished with value: -0.0 and parameters: {'learning_rate': 0.07439583861723577, 'num_leaves': 49, 'min_data_in_leaf': 162, 'feature_fraction': 0.8825785605391093}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[3]\tvalid_0's ndcg@10: 0.788322\n",
      "[I 2025-10-01 19:55:20,481] Trial 8 finished with value: -0.0 and parameters: {'learning_rate': 0.09483993055035624, 'num_leaves': 76, 'min_data_in_leaf': 72, 'feature_fraction': 0.6796066446073065}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[2]\tvalid_0's ndcg@10: 0.803399\n",
      "[I 2025-10-01 19:55:20,537] Trial 9 finished with value: -0.0 and parameters: {'learning_rate': 0.024233704971149045, 'num_leaves': 93, 'min_data_in_leaf': 75, 'feature_fraction': 0.9043255026353767}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[21]\tvalid_0's ndcg@10: 0.675473\n",
      "[I 2025-10-01 19:55:20,720] Trial 10 finished with value: -0.0 and parameters: {'learning_rate': 0.026946706894663653, 'num_leaves': 127, 'min_data_in_leaf': 11, 'feature_fraction': 0.539002741938923}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[1]\tvalid_0's ndcg@10: 0.671532\n",
      "[I 2025-10-01 19:55:20,784] Trial 11 finished with value: -0.0 and parameters: {'learning_rate': 0.01616879560072615, 'num_leaves': 120, 'min_data_in_leaf': 177, 'feature_fraction': 0.9420027556666167}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[14]\tvalid_0's ndcg@10: 0.686436\n",
      "[I 2025-10-01 19:55:20,851] Trial 12 finished with value: -0.0 and parameters: {'learning_rate': 0.004762661001139419, 'num_leaves': 104, 'min_data_in_leaf': 145, 'feature_fraction': 0.9988782640058795}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[44]\tvalid_0's ndcg@10: 0.713041\n",
      "[I 2025-10-01 19:55:20,953] Trial 13 finished with value: -0.0 and parameters: {'learning_rate': 0.04689230205751962, 'num_leaves': 85, 'min_data_in_leaf': 115, 'feature_fraction': 0.8220264371534882}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[9]\tvalid_0's ndcg@10: 0.746328\n",
      "[I 2025-10-01 19:55:21,017] Trial 14 finished with value: -0.0 and parameters: {'learning_rate': 0.008576733503259734, 'num_leaves': 108, 'min_data_in_leaf': 194, 'feature_fraction': 0.6799190614816119}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[7]\tvalid_0's ndcg@10: 0.723739\n",
      "[I 2025-10-01 19:55:21,087] Trial 15 finished with value: -0.0 and parameters: {'learning_rate': 0.0021968512742283524, 'num_leaves': 67, 'min_data_in_leaf': 142, 'feature_fraction': 0.8440873447143487}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[6]\tvalid_0's ndcg@10: 0.720439\n",
      "[I 2025-10-01 19:55:21,161] Trial 16 finished with value: -0.036133103289735985 and parameters: {'learning_rate': 0.03780773512016114, 'num_leaves': 85, 'min_data_in_leaf': 98, 'feature_fraction': 0.9754900224233751}. Best is trial 16 with value: -0.036133103289735985.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[3]\tvalid_0's ndcg@10: 0.723247\n",
      "[I 2025-10-01 19:55:21,251] Trial 17 finished with value: -0.0 and parameters: {'learning_rate': 0.0442162778707885, 'num_leaves': 115, 'min_data_in_leaf': 41, 'feature_fraction': 0.7448170761675927}. Best is trial 16 with value: -0.036133103289735985.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[50]\tvalid_0's ndcg@10: 0.747532\n",
      "[I 2025-10-01 19:55:21,353] Trial 18 finished with value: -0.0 and parameters: {'learning_rate': 0.03813738309358293, 'num_leaves': 88, 'min_data_in_leaf': 96, 'feature_fraction': 0.5986422236672704}. Best is trial 16 with value: -0.036133103289735985.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[3]\tvalid_0's ndcg@10: 0.700181\n",
      "[I 2025-10-01 19:55:21,437] Trial 19 finished with value: -0.0 and parameters: {'learning_rate': 0.021002733941166113, 'num_leaves': 112, 'min_data_in_leaf': 51, 'feature_fraction': 0.8962077427408733}. Best is trial 16 with value: -0.036133103289735985.\n",
      "Best params: {'learning_rate': 0.03780773512016114, 'num_leaves': 85, 'min_data_in_leaf': 98, 'feature_fraction': 0.9754900224233751}\n",
      "Training until validation scores don't improve for 50 rounds\n",
      "Early stopping, best iteration is:\n",
      "[6]\tvalid_0's ndcg@10: 0.720439\tvalid_0's ndcg@50: 0.735504\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['/kaggle/working/lgbm_reranker_prototype.joblib']"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# LightGBM tuning & training (prototype)\n",
    "import lightgbm as lgb, optuna\n",
    "from sklearn.model_selection import train_test_split\n",
    "from math import log2\n",
    "\n",
    "feat_cols = [c for c in meta_df_small.columns if c not in ('user_idx','item_idx','label')]\n",
    "users = meta_df_small['user_idx'].unique(); train_u, valid_u = train_test_split(list(users), test_size=0.20, random_state=42)\n",
    "tr_mask = meta_df_small['user_idx'].isin(train_u); val_mask = meta_df_small['user_idx'].isin(valid_u)\n",
    "X_tr = meta_df_small[tr_mask][feat_cols].values; y_tr = meta_df_small[tr_mask]['label'].values\n",
    "gr_tr = meta_df_small[tr_mask].groupby('user_idx', sort=False).size().astype(int).values\n",
    "X_val = meta_df_small[val_mask][feat_cols].values; y_val = meta_df_small[val_mask]['label'].values\n",
    "gr_val = meta_df_small[val_mask].groupby('user_idx', sort=False).size().astype(int).values\n",
    "dtrain = lgb.Dataset(X_tr, label=y_tr, group=gr_tr); dval = lgb.Dataset(X_val, label=y_val, group=gr_val, reference=dtrain)\n",
    "\n",
    "def ndcg_per_group(preds, df_masked, K=10):\n",
    "    eval_users = df_masked['user_idx'].unique(); idx = 0; ndcgs = []\n",
    "    for u in eval_users:\n",
    "        sub = df_masked[df_masked['user_idx']==u]; n = len(sub)\n",
    "        if n==0: continue\n",
    "        p = preds[idx: idx + n]; items = sub['item_idx'].values; order = np.argsort(-p); ranked = items[order].tolist()\n",
    "        true_items = sub['item_idx'][sub['label']==1].tolist()\n",
    "        gains = [1.0 if it in true_items else 0.0 for it in ranked[:K]]\n",
    "        dcg = sum(g / log2(i+2) for i,g in enumerate(gains)); idcg = sum(1.0 / log2(i+2) for i in range(min(len(true_items), K))) if len(true_items)>0 else 0.0\n",
    "        ndcgs.append(dcg/idcg if idcg>0 else 0.0); idx += n\n",
    "    return float(np.mean(ndcgs)) if len(ndcgs)>0 else 0.0\n",
    "\n",
    "def objective(trial):\n",
    "    param = {'objective':'lambdarank','metric':'ndcg','ndcg_eval_at':[10],\n",
    "             'learning_rate': trial.suggest_float('learning_rate', 1e-3, 1e-1, log=True),\n",
    "             'num_leaves': trial.suggest_int('num_leaves', 31, 127),\n",
    "             'min_data_in_leaf': trial.suggest_int('min_data_in_leaf', 10, 200),\n",
    "             'feature_fraction': trial.suggest_float('feature_fraction', 0.5, 1.0),\n",
    "             'verbosity': -1, 'seed': 42, 'feature_pre_filter': False}\n",
    "    try:\n",
    "        bst = lgb.train(param, dtrain, num_boost_round=500, valid_sets=[dval], callbacks=[lgb.early_stopping(stopping_rounds=40), lgb.log_evaluation(period=0)])\n",
    "        preds_val = bst.predict(X_val); df_val = meta_df_small[val_mask].copy().reset_index(drop=True)\n",
    "        return -ndcg_per_group(preds_val, df_val, K=10)\n",
    "    except Exception as e:\n",
    "        print('LightGBM failed in objective:', e); return 1.0\n",
    "\n",
    "study = optuna.create_study(direction='minimize'); study.optimize(objective, n_trials=20, show_progress_bar=True)\n",
    "best_params_proto = study.best_params; print('Best params:', best_params_proto)\n",
    "\n",
    "params = {'objective':'lambdarank','metric':'ndcg','ndcg_eval_at':[10,50],\n",
    "          'learning_rate':float(best_params_proto.get('learning_rate',0.05)),\n",
    "          'num_leaves':int(best_params_proto.get('num_leaves',63)),\n",
    "          'min_data_in_leaf':int(best_params_proto.get('min_data_in_leaf',20)),\n",
    "          'feature_fraction':float(best_params_proto.get('feature_fraction',0.8)),'verbosity':-1,'seed':42,'feature_pre_filter':False}\n",
    "bst_proto = lgb.train(params, dtrain, num_boost_round=1000, valid_sets=[dval], callbacks=[lgb.early_stopping(stopping_rounds=50), lgb.log_evaluation(period=100)])\n",
    "joblib.dump(bst_proto, f\"{OUT_DIR}/lgbm_reranker_prototype.joblib\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4aeb8482",
   "metadata": {
    "papermill": {
     "duration": 0.039441,
     "end_time": "2025-10-01T19:55:21.581530",
     "exception": false,
     "start_time": "2025-10-01T19:55:21.542089",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 5 — Scale-up Data Load (100k) & Model Initialization\n",
    "\n",
    "This cell builds a larger sample (100k rows) and computes final embeddings and factors. It prefers SBERT/implicit/FAISS when available but includes CPU-friendly fallbacks (TF-IDF + SVD and TruncatedSVD-based MF) so the notebook runs offline."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b346337",
   "metadata": {
    "papermill": {
     "duration": 0.039767,
     "end_time": "2025-10-01T19:55:21.661371",
     "exception": false,
     "start_time": "2025-10-01T19:55:21.621604",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 15\n",
    "\n",
    "**Purpose:** Imports libraries used later. Trains a model / fits parameters.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Scale-up data load (100k) with fallbacks` → Comment describing intent.\n",
    "- `SCALE_N = 10000` → Performs a step relevant to data processing or modelling.\n",
    "- `SBERT_MODEL_FINAL = 'all-mpnet-base-v2'` → Performs a step relevant to data processing or modelling.\n",
    "- `from datasets import load_dataset` → Imports module(s).\n",
    "- `ds_iter = load_dataset('McAuley-Lab/Amazon-Reviews-2023', 'raw_review_Electronics', split='full', streaming=True, trust_remote_code=True)` → Performs a step relevant to data processing or modelling.\n",
    "- `rows = []; cnt = 0` → Performs a step relevant to data processing or modelling.\n",
    "- `for rec in ds_iter:` → Performs a step relevant to data processing or modelling.\n",
    "- `try:` → Performs a step relevant to data processing or modelling.\n",
    "- `asin = rec.get('asin') or rec.get('parent_asin'); user = rec.get('user_id') or rec.get('reviewerID'); text = rec.get('text') or rec.get('reviewText') or ''` → Performs a step relevant to data processing or modelling.\n",
    "- `overall = rec.get('rating') or rec.get('overall'); ts = rec.get('timestamp') or rec.get('unixReviewTime') or 0` → Performs a step relevant to data processing or modelling.\n",
    "- `if asin is None or user is None: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `ts_i = int(ts); ts_i = ts_i*1000 if ts_i < 10**10 else ts_i` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6fc92e06",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T19:55:21.744201Z",
     "iopub.status.busy": "2025-10-01T19:55:21.743485Z",
     "iopub.status.idle": "2025-10-01T20:31:31.037222Z",
     "shell.execute_reply": "2025-10-01T20:31:31.035972Z"
    },
    "papermill": {
     "duration": 2169.337157,
     "end_time": "2025-10-01T20:31:31.039520",
     "exception": false,
     "start_time": "2025-10-01T19:55:21.702363",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-10-01 19:55:36.054983: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1759348536.242483      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1759348536.301437      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2dc32ac43f654e868c10d9a5afa51074",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "modules.json:   0%|          | 0.00/349 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "00fbfdb0efda4279885cad1c1148d17a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config_sentence_transformers.json:   0%|          | 0.00/116 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "84efd5f632864c06934039fce13ef471",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "README.md: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ad1ce6e85f734f90a3d2cc6925f613e9",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "sentence_bert_config.json:   0%|          | 0.00/53.0 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a7ffb50652fd4a1783cef825f3dada25",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/571 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c165fbb883284bbb94d042bad365e794",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/438M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9c6e6526cdbd42f681da7542f172d19d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer_config.json:   0%|          | 0.00/363 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0514a1939a714a50b8c658f1973a8163",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "vocab.txt: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ded92b22443442599de461ba632a1baf",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer.json: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "45e3ccac4e3446fca4e9a63417fa9e8c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "special_tokens_map.json:   0%|          | 0.00/239 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a58d7570f8fc4d919b12ca0997e26a0d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/190 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7403b7d62a244cd1a5f96aa63a1af7c6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "SBERT encode:   0%|          | 0/35 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/implicit/cpu/als.py:95: RuntimeWarning: Intel MKL BLAS is configured to use 2 threads. It is highly recommended to disable its internal threadpool by setting the environment variable 'MKL_NUM_THREADS=1' or by callng 'threadpoolctl.threadpool_limits(1, \"blas\")'. Having MKL use a threadpool can lead to severe performance issues\n",
      "  check_blas_config()\n",
      "/usr/local/lib/python3.11/dist-packages/implicit/cpu/als.py:95: RuntimeWarning: OpenBLAS is configured to use 4 threads. It is highly recommended to disable its internal threadpool by setting the environment variable 'OPENBLAS_NUM_THREADS=1' or by calling 'threadpoolctl.threadpool_limits(1, \"blas\")'. Having OpenBLAS use a threadpool can lead to severe performance issues here.\n",
      "  check_blas_config()\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "82d5e3e4e395472fb10a8690cd7777b3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/20 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final item_emb shape: (8907, 768)\n"
     ]
    }
   ],
   "source": [
    "# Scale-up data load (100k) with fallbacks\n",
    "SCALE_N = 10000\n",
    "SBERT_MODEL_FINAL = 'all-mpnet-base-v2'\n",
    "\n",
    "from datasets import load_dataset\n",
    "ds_iter = load_dataset('McAuley-Lab/Amazon-Reviews-2023', 'raw_review_Electronics', split='full', streaming=True, trust_remote_code=True)\n",
    "rows = []; cnt = 0\n",
    "for rec in ds_iter:\n",
    "    try:\n",
    "        asin = rec.get('asin') or rec.get('parent_asin'); user = rec.get('user_id') or rec.get('reviewerID'); text = rec.get('text') or rec.get('reviewText') or ''\n",
    "        overall = rec.get('rating') or rec.get('overall'); ts = rec.get('timestamp') or rec.get('unixReviewTime') or 0\n",
    "        if asin is None or user is None: continue\n",
    "        ts_i = int(ts); ts_i = ts_i*1000 if ts_i < 10**10 else ts_i\n",
    "        rows.append({'asin':str(asin),'reviewerID':str(user),'reviewText':str(text),'overall':float(overall) if overall is not None else float('nan'),'unixReviewTime':int(ts_i)})\n",
    "        cnt += 1\n",
    "        if cnt >= SCALE_N: break\n",
    "    except Exception:\n",
    "        continue\n",
    "df_scale = pd.DataFrame(rows)\n",
    "unique_asins_scale = sorted(df_scale['asin'].unique().tolist()); unique_users_scale = sorted(df_scale['reviewerID'].unique().tolist())\n",
    "item_map_scale = {a:i for i,a in enumerate(unique_asins_scale)}; inv_item_map_scale = {i:a for a,i in item_map_scale.items()}\n",
    "user_map_scale = {u:i for i,u in enumerate(unique_users_scale)}; inv_user_map_scale = {i:u for u,i in user_map_scale.items()}\n",
    "n_users_scale, n_items_scale = len(user_map_scale), len(item_map_scale)\n",
    "u_idx=[]; i_idx=[]; data=[]\n",
    "for _, r in df_scale.iterrows():\n",
    "    try:\n",
    "        u = user_map_scale[r['reviewerID']]; i = item_map_scale[r['asin']]\n",
    "        w = float(r['overall']) if not pd.isna(r['overall']) else 1.0; u_idx.append(u); i_idx.append(i); data.append(w)\n",
    "    except KeyError: continue\n",
    "interaction_scale = csr_matrix((data,(u_idx,i_idx)), shape=(n_users_scale,n_items_scale)).tocsr()\n",
    "item_user_matrix_scale = interaction_scale.T.tocsr()\n",
    "pop_counts_scale = Counter(df_scale['asin'])\n",
    "test_df_scale = df_scale.groupby('reviewerID').tail(1).reset_index(drop=True)\n",
    "\n",
    "# Build semantic embeddings: SBERT if available else TF-IDF+SVD fallback\n",
    "if HAS_SBERT:\n",
    "    from sentence_transformers import SentenceTransformer\n",
    "    sbert_final = SentenceTransformer(SBERT_MODEL_FINAL, device='cpu')\n",
    "    agg = defaultdict(list)\n",
    "    for _, r in df_scale[['asin','reviewText']].iterrows():\n",
    "        a = r['asin']\n",
    "        if len(agg[a]) < 5: agg[a].append(str(r['reviewText'])[:1200])\n",
    "    texts = [' . '.join(agg.get(a, [''])) for a in sorted(item_map_scale.keys(), key=lambda x: item_map_scale[x])]\n",
    "    emb_batches = []; batch_size = 256\n",
    "    for i in tqdm(range(0, len(texts), batch_size), desc='SBERT encode'):\n",
    "        emb = sbert_final.encode(texts[i:i+batch_size], convert_to_numpy=True, show_progress_bar=False)\n",
    "        emb_batches.append(emb)\n",
    "    item_emb_final = np.vstack(emb_batches).astype('float32')\n",
    "else:\n",
    "    from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "    from sklearn.decomposition import TruncatedSVD as _TSVD\n",
    "    agg = defaultdict(list)\n",
    "    for _, r in df_scale[['asin','reviewText']].iterrows():\n",
    "        a = r['asin']\n",
    "        if len(agg[a]) < 5: agg[a].append(str(r['reviewText'])[:1200])\n",
    "    texts = [' . '.join(agg.get(a, [''])) for a in sorted(item_map_scale.keys(), key=lambda x: item_map_scale[x])]\n",
    "    tf = TfidfVectorizer(max_features=65536, ngram_range=(1,2), min_df=2)\n",
    "    Xtf = tf.fit_transform(texts)\n",
    "    svd_text = _TSVD(n_components=384, random_state=42)\n",
    "    item_emb_final = svd_text.fit_transform(Xtf).astype('float32')\n",
    "\n",
    "# Build MF factors: implicit ALS if available else TruncatedSVD fallback\n",
    "if HAS_IMPLICIT:\n",
    "    try:\n",
    "        from implicit.als import AlternatingLeastSquares\n",
    "        als_model_final = AlternatingLeastSquares(factors=128, regularization=0.1, iterations=20, use_gpu=False)\n",
    "        als_model_final.fit(item_user_matrix_scale.astype('float32'))\n",
    "        als_item_factors_final = als_model_final.item_factors; als_user_factors_final = als_model_final.user_factors\n",
    "    except Exception:\n",
    "        # fallback to SVD factors below\n",
    "        HAS_IMPLICIT = False\n",
    "\n",
    "if not HAS_IMPLICIT:\n",
    "    from sklearn.decomposition import TruncatedSVD as _TSVD2\n",
    "    print('implicit not available or failed; using TruncatedSVD fallback for MF factors')\n",
    "    svd_mf = _TSVD2(n_components=128, random_state=42)\n",
    "    als_item_factors_final = svd_mf.fit_transform(item_user_matrix_scale)\n",
    "    # user factors: approximate by dividing R^T * F by counts\n",
    "    try:\n",
    "        R = item_user_matrix_scale\n",
    "        user_num = (R.T).dot(als_item_factors_final)\n",
    "        user_counts = np.array((R != 0).sum(axis=0)).reshape(-1)\n",
    "        user_counts = np.where(user_counts == 0, 1.0, user_counts)\n",
    "        als_user_factors_final = (user_num / user_counts[:, None]).astype('float32')\n",
    "    except Exception:\n",
    "        als_user_factors_final = np.random.normal(scale=0.01, size=(n_users_scale, als_item_factors_final.shape[1])).astype('float32')\n",
    "\n",
    "svd_item_factors_final = als_item_factors_final  # reuse\n",
    "item_emb_norm_final = item_emb_final / (np.linalg.norm(item_emb_final, axis=1, keepdims=True) + 1e-9)\n",
    "print('Final item_emb shape:', item_emb_final.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51fcf47e",
   "metadata": {
    "papermill": {
     "duration": 0.045656,
     "end_time": "2025-10-01T20:31:31.130184",
     "exception": false,
     "start_time": "2025-10-01T20:31:31.084528",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 6 — Scale Hard-negative Mining & Final LTR Training\n",
    "\n",
    "This cell mines hard negatives across many users and trains the final LightGBM reranker on the large meta dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b8a2c47",
   "metadata": {
    "papermill": {
     "duration": 0.180328,
     "end_time": "2025-10-01T20:31:31.352726",
     "exception": false,
     "start_time": "2025-10-01T20:31:31.172398",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 17\n",
    "\n",
    "**Purpose:** Imports libraries used later. Trains a model / fits parameters.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Scale hard-neg mining + LTR training` → Comment describing intent.\n",
    "- `USERS_TO_USE_SCALE = 5000; HARD_NEG_PER_POS = 80; RANDOM_NEG_PER_POS = 5` → Performs a step relevant to data processing or modelling.\n",
    "- `meta_rows_scale = []` → Performs a step relevant to data processing or modelling.\n",
    "- `sample_users_scale = df_scale['reviewerID'].unique()[:min(USERS_TO_USE_SCALE, n_users_scale)]` → Performs a step relevant to data processing or modelling.\n",
    "- `for uid in tqdm(sample_users_scale, desc='Building Meta Scale'):` → Performs a step relevant to data processing or modelling.\n",
    "- `uidx = user_map_scale.get(uid);` → Performs a step relevant to data processing or modelling.\n",
    "- `if uidx is None: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `cands = build_candidates_union(uidx, item_emb_final, (als_model_final if 'als_model_final' in globals() else None), svd_item_factors_final, item_map_scale, pop_counts_scale, user_map_scale, df_scale, interaction_scale, top_sem=1000, top_als=500, top_svd=500, top_pop=500, top_mf=200, max_cands=3000)` → Performs a step relevant to data processing or modelling.\n",
    "- `if not cands: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `mf = build_features_for_candidates(uidx, cands, item_emb_final, (als_item_factors_final if 'als_item_factors_final' in globals() else None), (als_user_factors_final if 'als_user_factors_final' in globals() else None), svd_item_factors_final, df_scale, item_map_scale, user_map_scale, pop_counts_scale, feature_names, now_ts)` → Performs a step relevant to data processing or modelling.\n",
    "- `Xc = mf['X']; cidx = mf['cands']; fns = mf['feature_names']` → Performs a step relevant to data processing or modelling.\n",
    "- `true_asins = test_df_scale[test_df_scale['reviewerID']==uid]['asin'].tolist()` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f72530ea",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T20:31:31.442691Z",
     "iopub.status.busy": "2025-10-01T20:31:31.437296Z",
     "iopub.status.idle": "2025-10-01T21:31:43.046241Z",
     "shell.execute_reply": "2025-10-01T21:31:43.045355Z"
    },
    "papermill": {
     "duration": 3611.653471,
     "end_time": "2025-10-01T21:31:43.047893",
     "exception": false,
     "start_time": "2025-10-01T20:31:31.394422",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ed5a30dd0c624461ad71d7286332d5d0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Building Meta Scale:   0%|          | 0/1561 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "meta_df_scale shape: (129516, 16)\n",
      "Training until validation scores don't improve for 50 rounds\n",
      "Early stopping, best iteration is:\n",
      "[3]\tvalid_0's ndcg@10: 0.937583\tvalid_0's ndcg@50: 0.937583\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['/kaggle/working/lgbm_reranker_final.joblib']"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Scale hard-neg mining + LTR training\n",
    "USERS_TO_USE_SCALE = 5000; HARD_NEG_PER_POS = 80; RANDOM_NEG_PER_POS = 5\n",
    "meta_rows_scale = []\n",
    "sample_users_scale = df_scale['reviewerID'].unique()[:min(USERS_TO_USE_SCALE, n_users_scale)]\n",
    "for uid in tqdm(sample_users_scale, desc='Building Meta Scale'):\n",
    "    uidx = user_map_scale.get(uid); \n",
    "    if uidx is None: continue\n",
    "    cands = build_candidates_union(uidx, item_emb_final, (als_model_final if 'als_model_final' in globals() else None), svd_item_factors_final, item_map_scale, pop_counts_scale, user_map_scale, df_scale, interaction_scale, top_sem=1000, top_als=500, top_svd=500, top_pop=500, top_mf=200, max_cands=3000)\n",
    "    if not cands: continue\n",
    "    mf = build_features_for_candidates(uidx, cands, item_emb_final, (als_item_factors_final if 'als_item_factors_final' in globals() else None), (als_user_factors_final if 'als_user_factors_final' in globals() else None), svd_item_factors_final, df_scale, item_map_scale, user_map_scale, pop_counts_scale, feature_names, now_ts)\n",
    "    Xc = mf['X']; cidx = mf['cands']; fns = mf['feature_names']\n",
    "    true_asins = test_df_scale[test_df_scale['reviewerID']==uid]['asin'].tolist()\n",
    "    true_idxs = [item_map_scale[a] for a in true_asins if a in item_map_scale]\n",
    "    if not true_idxs: continue\n",
    "    als_col = Xc[:, fns.index('als_score')] if 'als_score' in fns else np.zeros(Xc.shape[0])\n",
    "    svd_col = Xc[:, fns.index('svd_score')] if 'svd_score' in fns else np.zeros(Xc.shape[0])\n",
    "    hard_score = 0.5 * als_col + 0.5 * svd_col\n",
    "    cand_arr = np.array(cidx); pos_mask = np.isin(cand_arr, true_idxs); non_pos_idx = np.where(~pos_mask)[0]\n",
    "    if len(non_pos_idx)==0: continue\n",
    "    ordering = non_pos_idx[np.argsort(-hard_score[non_pos_idx])]; hard_negs_idx = ordering[:HARD_NEG_PER_POS].tolist()\n",
    "    remaining = list(set(non_pos_idx.tolist()) - set(hard_negs_idx)); random_negs_idx = random.sample(remaining, min(RANDOM_NEG_PER_POS, len(remaining))) if remaining else []\n",
    "    for t in true_idxs:\n",
    "        pos_loc = np.where(cand_arr==t)[0]; \n",
    "        if len(pos_loc)==0: continue\n",
    "        for p in pos_loc:\n",
    "            row = {'user_idx': uidx, 'item_idx': int(cidx[p]), 'label': 1}\n",
    "            for j,fn in enumerate(fns):\n",
    "                try: row[fn] = float(Xc[p,j])\n",
    "                except: row[fn] = 0.0\n",
    "            meta_rows_scale.append(row)\n",
    "            for idx in hard_negs_idx:\n",
    "                rn = {'user_idx': uidx, 'item_idx': int(cidx[idx]), 'label': 0}\n",
    "                for j,fn in enumerate(fns):\n",
    "                    try: rn[fn] = float(Xc[idx,j])\n",
    "                    except: rn[fn] = 0.0\n",
    "                meta_rows_scale.append(rn)\n",
    "            for idx in random_negs_idx:\n",
    "                rr = {'user_idx': uidx, 'item_idx': int(cidx[idx]), 'label': 0}\n",
    "                for j,fn in enumerate(fns):\n",
    "                    try: rr[fn] = float(Xc[idx,j])\n",
    "                    except: rr[fn] = 0.0\n",
    "                meta_rows_scale.append(rr)\n",
    "meta_df_scale = pd.DataFrame(meta_rows_scale).sample(frac=1.0, random_state=42).reset_index(drop=True)\n",
    "print('meta_df_scale shape:', meta_df_scale.shape)\n",
    "\n",
    "# Train final LTR\n",
    "from sklearn.model_selection import train_test_split\n",
    "feat_cols = [c for c in meta_df_scale.columns if c not in ('user_idx','item_idx','label')]\n",
    "X = meta_df_scale[feat_cols].values; y = meta_df_scale['label'].values\n",
    "users_all = meta_df_scale['user_idx'].unique(); train_u, valid_u = train_test_split(list(users_all), test_size=0.10, random_state=42)\n",
    "tr_mask = meta_df_scale['user_idx'].isin(train_u); val_mask = meta_df_scale['user_idx'].isin(valid_u)\n",
    "X_tr = meta_df_scale[tr_mask][feat_cols].values; y_tr = meta_df_scale[tr_mask]['label'].values; gr_tr = meta_df_scale[tr_mask].groupby('user_idx', sort=False).size().astype(int).values\n",
    "X_val = meta_df_scale[val_mask][feat_cols].values; y_val = meta_df_scale[val_mask]['label'].values; gr_val = meta_df_scale[val_mask].groupby('user_idx', sort=False).size().astype(int).values\n",
    "\n",
    "dtrain = lgb.Dataset(X_tr, label=y_tr, group=gr_tr); dval = lgb.Dataset(X_val, label=y_val, group=gr_val, reference=dtrain)\n",
    "params_scale = {'objective':'lambdarank','metric':'ndcg','ndcg_eval_at':[10,50],'learning_rate':float(best_params_proto.get('learning_rate',0.05)),'num_leaves':int(best_params_proto.get('num_leaves',63)),'min_data_in_leaf':int(best_params_proto.get('min_data_in_leaf',20)),'feature_fraction':float(best_params_proto.get('feature_fraction',0.8)),'verbosity':-1,'seed':42,'feature_pre_filter':False}\n",
    "bst_final_scale = lgb.train(params_scale, dtrain, num_boost_round=1000, valid_sets=[dval], callbacks=[lgb.early_stopping(stopping_rounds=50), lgb.log_evaluation(period=100)])\n",
    "joblib.dump(bst_final_scale, f\"{OUT_DIR}/lgbm_reranker_final.joblib\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d221a146",
   "metadata": {
    "papermill": {
     "duration": 0.041704,
     "end_time": "2025-10-01T21:31:43.132148",
     "exception": false,
     "start_time": "2025-10-01T21:31:43.090444",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 7 — Final Evaluation & Metrics\n",
    "\n",
    "Compute P@K, R@K, NDCG@K, MAP, and MPR for the LGBM hybrid reranker and a semantic baseline. Results are saved to `OUT_DIR/final_scale_summary_metrics.csv`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f29cc3a",
   "metadata": {
    "papermill": {
     "duration": 0.041856,
     "end_time": "2025-10-01T21:31:43.216348",
     "exception": false,
     "start_time": "2025-10-01T21:31:43.174492",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 19\n",
    "\n",
    "**Purpose:** Imports libraries used later. Defines function(s) used downstream. Produces predictions on data. Saves results or models to disk.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Final evaluation utilities and run` → Comment describing intent.\n",
    "- `from math import log2` → Imports module(s).\n",
    "- `def ndcg_at_k(pred_list, true_list, k=10):` → Performs a step relevant to data processing or modelling.\n",
    "- `if not true_list: return 0.0` → Performs a step relevant to data processing or modelling.\n",
    "- `pred_k = pred_list[:k]; gains = [1.0 if p in true_list else 0.0 for p in pred_k]` → Performs a step relevant to data processing or modelling.\n",
    "- `dcg = sum(g / log2(i+2) for i,g in enumerate(gains)); idcg = sum(1.0 / log2(i+2) for i in range(min(len(true_list), k)))` → Performs a step relevant to data processing or modelling.\n",
    "- `return dcg/idcg if idcg>0 else 0.0` → Performs a step relevant to data processing or modelling.\n",
    "- `def apk(actual, predicted, k=10):` → Performs a step relevant to data processing or modelling.\n",
    "- `if not actual: return 0.0` → Performs a step relevant to data processing or modelling.\n",
    "- `score = 0.0; num_hits = 0.0` → Performs a step relevant to data processing or modelling.\n",
    "- `for i,p in enumerate(predicted[:k]):` → Performs a step relevant to data processing or modelling.\n",
    "- `if p in actual and p not in predicted[:i]:` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "48b62fda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T21:31:43.302851Z",
     "iopub.status.busy": "2025-10-01T21:31:43.302402Z",
     "iopub.status.idle": "2025-10-01T22:10:22.655169Z",
     "shell.execute_reply": "2025-10-01T22:10:22.654159Z"
    },
    "papermill": {
     "duration": 2319.398246,
     "end_time": "2025-10-01T22:10:22.656682",
     "exception": false,
     "start_time": "2025-10-01T21:31:43.258436",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e171f0d587494aaab86f56e1c3645c16",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating lgbm_final_topk:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1ea01165f2f54bf68268af82252740e0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating semantic_final_topk:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final evaluation complete — metrics saved to /kaggle/working/final_scale_summary_metrics.csv\n"
     ]
    }
   ],
   "source": [
    "# Final evaluation utilities and run\n",
    "from math import log2\n",
    "def ndcg_at_k(pred_list, true_list, k=10):\n",
    "    if not true_list: return 0.0\n",
    "    pred_k = pred_list[:k]; gains = [1.0 if p in true_list else 0.0 for p in pred_k]\n",
    "    dcg = sum(g / log2(i+2) for i,g in enumerate(gains)); idcg = sum(1.0 / log2(i+2) for i in range(min(len(true_list), k)))\n",
    "    return dcg/idcg if idcg>0 else 0.0\n",
    "\n",
    "def apk(actual, predicted, k=10):\n",
    "    if not actual: return 0.0\n",
    "    score = 0.0; num_hits = 0.0\n",
    "    for i,p in enumerate(predicted[:k]):\n",
    "        if p in actual and p not in predicted[:i]:\n",
    "            num_hits += 1.0; score += num_hits/(i+1.0)\n",
    "    return score/min(len(actual), k)\n",
    "\n",
    "def lgbm_final_topk(uidx, k=10):\n",
    "    cands = build_candidates_union(uidx, item_emb_final, (als_model_final if 'als_model_final' in globals() else None), svd_item_factors_final, item_map_scale, pop_counts_scale, user_map_scale, df_scale, interaction_scale, top_sem=1000, top_als=500, top_svd=500, top_pop=500, top_mf=200, max_cands=3000)\n",
    "    if not cands: return []\n",
    "    mf = build_features_for_candidates(uidx, cands, item_emb_final, (als_item_factors_final if 'als_item_factors_final' in globals() else None), (als_user_factors_final if 'als_user_factors_final' in globals() else None), svd_item_factors_final, df_scale, item_map_scale, user_map_scale, pop_counts_scale, feature_names, now_ts)\n",
    "    preds = bst_final_scale.predict(mf['X']); order = np.argsort(-preds)[:k]; return [cands[i] for i in order]\n",
    "\n",
    "def semantic_final_topk(uidx, k=10):\n",
    "    uvec = user_profile_emb(uidx, item_emb_final, df_scale, item_map_scale, user_map_scale); uvec = uvec/(np.linalg.norm(uvec)+1e-9)\n",
    "    scores = item_emb_final.dot(uvec); return list(np.argsort(-scores)[:k])\n",
    "\n",
    "def evaluate_final(scorer_fn, K=10, max_users=1000):\n",
    "    actuals=[]; preds=[]; cnt=0\n",
    "    for uid in tqdm(test_df_scale['reviewerID'].unique()[:max_users], desc=f\"Evaluating {scorer_fn.__name__}\"):\n",
    "        if uid not in user_map_scale: continue\n",
    "        uidx = user_map_scale[uid]\n",
    "        true_asins = test_df_scale[test_df_scale['reviewerID']==uid]['asin'].tolist()\n",
    "        if not true_asins: continue\n",
    "        rec_idxs = scorer_fn(uidx, k=K)\n",
    "        rec_asins = [inv_item_map_scale[i] for i in rec_idxs if i in inv_item_map_scale]\n",
    "        preds.append(rec_asins); actuals.append(true_asins); cnt += 1\n",
    "    if cnt==0: return {'P@10':0.0,'R@10':0.0,'NDCG@10':0.0,'MAP@10':0.0,'MPR@10':0.0,'EvalUsers':0}\n",
    "    P = np.mean([len(set(p[:K]) & set(a))/float(K) for p,a in zip(preds,actuals)])\n",
    "    R = np.mean([len(set(p[:K]) & set(a))/max(1,len(a)) for p,a in zip(preds,actuals)])\n",
    "    N = np.mean([ndcg_at_k(p,a,K) for p,a in zip(preds,actuals)])\n",
    "    MAP = np.mean([apk(a,p,K) for a,p in zip(actuals,preds)])\n",
    "    MPR = np.mean([np.mean([1.0 - (p.index(t)+1)/K if (t in p[:K]) else 0.0 for t in a]) for a,p in zip(actuals,preds)])\n",
    "    return {'P@10':P,'R@10':R,'NDCG@10':N,'MAP@10':MAP,'MPR@10':MPR,'EvalUsers':len(actuals)}\n",
    "\n",
    "final_results = {}\n",
    "final_results['LGBM_Hybrid_Rerank'] = evaluate_final(lgbm_final_topk, K=10)\n",
    "final_results['Semantic_Baseline'] = evaluate_final(semantic_final_topk, K=10)\n",
    "final_df = pd.DataFrame(final_results).T\n",
    "final_df = final_df[['P@10','R@10','NDCG@10','MAP@10','MPR@10','EvalUsers']]\n",
    "final_df.to_csv(f\"{OUT_DIR}/final_scale_summary_metrics.csv\", index=False)\n",
    "print('Final evaluation complete — metrics saved to', f\"{OUT_DIR}/final_scale_summary_metrics.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f262329",
   "metadata": {
    "papermill": {
     "duration": 0.042233,
     "end_time": "2025-10-01T22:10:22.741265",
     "exception": false,
     "start_time": "2025-10-01T22:10:22.699032",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Feature importance\n",
    "\n",
    "Export and inspect feature importances from the final LightGBM model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "818e39e1",
   "metadata": {
    "papermill": {
     "duration": 0.042233,
     "end_time": "2025-10-01T22:10:22.825511",
     "exception": false,
     "start_time": "2025-10-01T22:10:22.783278",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 21\n",
    "\n",
    "**Purpose:** Saves results or models to disk.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Feature importances` → Comment describing intent.\n",
    "- `fi_df = pd.DataFrame({'feature': feat_cols, 'importance': bst_final_scale.feature_importance()}).sort_values('importance', ascending=False)` → Performs a step relevant to data processing or modelling.\n",
    "- `fi_df.to_csv(f\"{OUT_DIR}/feature_importances_final.csv\", index=False)` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "94349c47",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T22:10:22.911521Z",
     "iopub.status.busy": "2025-10-01T22:10:22.911194Z",
     "iopub.status.idle": "2025-10-01T22:10:22.922527Z",
     "shell.execute_reply": "2025-10-01T22:10:22.921553Z"
    },
    "papermill": {
     "duration": 0.056908,
     "end_time": "2025-10-01T22:10:22.924336",
     "exception": false,
     "start_time": "2025-10-01T22:10:22.867428",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Feature importances\n",
    "fi_df = pd.DataFrame({'feature': feat_cols, 'importance': bst_final_scale.feature_importance()}).sort_values('importance', ascending=False)\n",
    "fi_df.to_csv(f\"{OUT_DIR}/feature_importances_final.csv\", index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5c77b9d",
   "metadata": {
    "papermill": {
     "duration": 0.043024,
     "end_time": "2025-10-01T22:10:23.010424",
     "exception": false,
     "start_time": "2025-10-01T22:10:22.967400",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 22\n",
    "\n",
    "**Purpose:** Performs an operation relevant to the pipeline (see code).\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Fixed sample recommendation printing (maps indices -> ASIN strings, computes true HITs)` → Comment describing intent.\n",
    "- `SAMPLE_USERS_TO_DISPLAY = 5` → Performs a step relevant to data processing or modelling.\n",
    "- `test_users = test_df_scale['reviewerID'].unique()` → Performs a step relevant to data processing or modelling.\n",
    "- `if len(test_users) == 0:` → Performs a step relevant to data processing or modelling.\n",
    "- `print(\"\\nNo unique test users found to display sample recommendations.\")` → Displays a quick diagnostic for the user.\n",
    "- `else:` → Performs a step relevant to data processing or modelling.\n",
    "- `num_samples = min(SAMPLE_USERS_TO_DISPLAY, len(test_users))` → Performs a step relevant to data processing or modelling.\n",
    "- `sample_uids = random.sample(list(test_users), num_samples)` → Samples rows from a DataFrame.\n",
    "- `print(f\"\\n--- Sample User Recommendation Output (LGBM Hybrid) for {num_samples} Users ---\")` → Displays a quick diagnostic for the user.\n",
    "- `for sample_uid in sample_uids:` → Performs a step relevant to data processing or modelling.\n",
    "- `sample_uidx = user_map_scale.get(sample_uid)` → Performs a step relevant to data processing or modelling.\n",
    "- `if sample_uidx is None:` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "84d5d47e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T22:10:23.097508Z",
     "iopub.status.busy": "2025-10-01T22:10:23.097082Z",
     "iopub.status.idle": "2025-10-01T22:10:34.787401Z",
     "shell.execute_reply": "2025-10-01T22:10:34.786361Z"
    },
    "papermill": {
     "duration": 11.736178,
     "end_time": "2025-10-01T22:10:34.789286",
     "exception": false,
     "start_time": "2025-10-01T22:10:23.053108",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Sample User Recommendation Output (LGBM Hybrid) for 5 Users ---\n",
      "\n",
      "User ID: AEBEJ6DXXVSLCXD6NJ4XPVWRYDNA\n",
      "True Last Item (to predict): B00FA4Y66U\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B00HX0RTTU (❌ MISS)\n",
      "  2. B00NXE4N4Y (❌ MISS)\n",
      "  3. B07NXQ668X (❌ MISS)\n",
      "  4. B003YKG86S (❌ MISS)\n",
      "  5. B07RQLRTR4 (❌ MISS)\n",
      "  6. B00FRKOFIQ (❌ MISS)\n",
      "  7. B0748N1BZD (❌ MISS)\n",
      "  8. B09YLCXLKY (❌ MISS)\n",
      "  9. B07QKTLJ96 (❌ MISS)\n",
      "  10. B00J3O9YRY (❌ MISS)\n",
      "True ASIN in candidate pool? YES\n",
      "\n",
      "User ID: AHIKFBG7C6T4VFVWDFKIXPDV57QQ\n",
      "True Last Item (to predict): B005JZMGM6\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B072V3478X (❌ MISS)\n",
      "  2. B072C77LPK (❌ MISS)\n",
      "  3. B08N4CW66B (❌ MISS)\n",
      "  4. B073VLYXRW (❌ MISS)\n",
      "  5. B00RH29CJO (❌ MISS)\n",
      "  6. B09JSMNZRG (❌ MISS)\n",
      "  7. B07Z6G7FDW (❌ MISS)\n",
      "  8. B0742N5RFR (❌ MISS)\n",
      "  9. B01HIS30IA (❌ MISS)\n",
      "  10. B07L814B45 (❌ MISS)\n",
      "True ASIN in candidate pool? YES\n",
      "\n",
      "User ID: AGSQ6UFQQSDUCSHAEPJ5L2VZWQHA\n",
      "True Last Item (to predict): B000HVHYJW\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B07PGGFFW8 (❌ MISS)\n",
      "  2. B08RHMD51S (❌ MISS)\n",
      "  3. B08BLSF473 (❌ MISS)\n",
      "  4. B09Y9D4LGV (❌ MISS)\n",
      "  5. B00DPC015E (❌ MISS)\n",
      "  6. B06ZYB8VD7 (❌ MISS)\n",
      "  7. B07211G2X7 (❌ MISS)\n",
      "  8. B076BKGLCN (❌ MISS)\n",
      "  9. B08MWZHHKP (❌ MISS)\n",
      "  10. B07T4NH5BD (❌ MISS)\n",
      "True ASIN in candidate pool? YES\n",
      "\n",
      "User ID: AG3HMLZJHOGT7PJQX3KGGHHC3AEQ\n",
      "True Last Item (to predict): B0033VKKB2\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B00I0QF8EO (❌ MISS)\n",
      "  2. B09ND91NRF (❌ MISS)\n",
      "  3. B01K6MPHV8 (❌ MISS)\n",
      "  4. B0BNT7YX1C (❌ MISS)\n",
      "  5. B00HL7Z46K (❌ MISS)\n",
      "  6. B087LWC6BM (❌ MISS)\n",
      "  7. B071WYXY6B (❌ MISS)\n",
      "  8. B07KNHLHDW (❌ MISS)\n",
      "  9. B09YLCXLKY (❌ MISS)\n",
      "  10. B07FVH1BFX (❌ MISS)\n",
      "True ASIN in candidate pool? YES\n",
      "\n",
      "User ID: AFAFOJDV3TNEQMR2H3EYKM4UEMNQ\n",
      "True Last Item (to predict): B0753QWL5X\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B00S67CZLG (❌ MISS)\n",
      "  2. B07RHS6KK9 (❌ MISS)\n",
      "  3. B07FPLCZSL (❌ MISS)\n",
      "  4. B07DN4DRSS (❌ MISS)\n",
      "  5. B07CH42JNS (❌ MISS)\n",
      "  6. B0031U1ATG (❌ MISS)\n",
      "  7. B07C79YL5N (❌ MISS)\n",
      "  8. B07BVZJP4J (❌ MISS)\n",
      "  9. B0713VGCJX (❌ MISS)\n",
      "  10. B07BNXXJKB (❌ MISS)\n",
      "True ASIN in candidate pool? YES\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Fixed sample recommendation printing (maps indices -> ASIN strings, computes true HITs)\n",
    "SAMPLE_USERS_TO_DISPLAY = 5\n",
    "\n",
    "test_users = test_df_scale['reviewerID'].unique()\n",
    "if len(test_users) == 0:\n",
    "    print(\"\\nNo unique test users found to display sample recommendations.\")\n",
    "else:\n",
    "    num_samples = min(SAMPLE_USERS_TO_DISPLAY, len(test_users))\n",
    "    sample_uids = random.sample(list(test_users), num_samples)\n",
    "\n",
    "    print(f\"\\n--- Sample User Recommendation Output (LGBM Hybrid) for {num_samples} Users ---\")\n",
    "\n",
    "    for sample_uid in sample_uids:\n",
    "        sample_uidx = user_map_scale.get(sample_uid)\n",
    "\n",
    "        if sample_uidx is None:\n",
    "            print(f\"\\n[SKIP] User {sample_uid} not in user_map_scale.\")\n",
    "            continue\n",
    "\n",
    "        if 'bst_final_scale' not in globals() or bst_final_scale is None:\n",
    "            print(\"\\n[SKIP] bst_final_scale not available — model wasn't trained or loaded.\")\n",
    "            break\n",
    "\n",
    "        # true ASIN string\n",
    "        actual_asin = test_df_scale[test_df_scale['reviewerID'] == sample_uid]['asin'].iloc[0]\n",
    "\n",
    "        # get recommended item indices (ints)\n",
    "        rec_idxs = lgbm_final_topk(sample_uidx, k=10)\n",
    "\n",
    "        # convert indices -> ASINs (use appropriate inv map)\n",
    "        inv_map = inv_item_map_scale if 'inv_item_map_scale' in globals() else inv_item_map\n",
    "        rec_asins = [inv_map[i] if (i in inv_map) else f\"IDX_{i}\" for i in rec_idxs]\n",
    "\n",
    "        print(f\"\\nUser ID: {sample_uid}\")\n",
    "        print(f\"True Last Item (to predict): {actual_asin}\")\n",
    "        print(\"Top 10 Recommended ASINs:\")\n",
    "        for i, asin in enumerate(rec_asins):\n",
    "            hit_status = \"✅ HIT\" if asin == actual_asin else \"❌ MISS\"\n",
    "            print(f\"  {i+1}. {asin} ({hit_status})\")\n",
    "\n",
    "        # helpful additional info: was the true item present in the candidate set at all?\n",
    "        # Build candidate set with the same function used by the scorer (using larger pool for clarity)\n",
    "        cands = build_candidates_union(sample_uidx,\n",
    "                                       item_emb_final if 'item_emb_final' in globals() else None,\n",
    "                                       als_model_final if 'als_model_final' in globals() else None,\n",
    "                                       svd_item_factors_final if 'svd_item_factors_final' in globals() else None,\n",
    "                                       item_map_scale if 'item_map_scale' in globals() else item_map,\n",
    "                                       pop_counts_scale if 'pop_counts_scale' in globals() else pop_counts,\n",
    "                                       user_map_scale if 'user_map_scale' in globals() else user_map,\n",
    "                                       df_scale if 'df_scale' in globals() else df,\n",
    "                                       interaction_scale if 'interaction_scale' in globals() else interaction,\n",
    "                                       top_sem=1000, top_als=500, top_svd=500, top_pop=500, top_mf=200, max_cands=3000)\n",
    "        cand_asins = {inv_map[i] for i in cands if i in inv_map}\n",
    "        in_candidates = actual_asin in cand_asins\n",
    "        print(f\"True ASIN in candidate pool? {'YES' if in_candidates else 'NO'}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2cc542b",
   "metadata": {
    "papermill": {
     "duration": 0.042686,
     "end_time": "2025-10-01T22:10:34.877501",
     "exception": false,
     "start_time": "2025-10-01T22:10:34.834815",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 8 — Diagnostics, Ablations & Next Steps\n",
    "\n",
    "**Diagnostics included in this notebook:**\n",
    "\n",
    "- Candidate recall checks (small and large pools)\n",
    "- Feature distributions for positives vs negatives\n",
    "- Per-user inspection utilities (`inspect_user_rerank`, `compare_top_bottom`)\n",
    "\n",
    "**Suggested next steps:**\n",
    "\n",
    "1. If reranker underperforms but recall is high: increase meta training size, upsample positives, and tune hard-negative ratios.\n",
    "2. If ALS/SVD features are weak, consider training implicit ALS on denser data or using matrix factorization with alternating optimization.\n",
    "3. Add more content features (title tokens, brand, category) and context signals (time of day, device) if available.\n",
    "4. For production: build offline candidate pipeline (FAISS HNSW) and a lightweight online reranker (optimized model export).\n",
    "\n",
    "---\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f380622c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T22:10:34.966567Z",
     "iopub.status.busy": "2025-10-01T22:10:34.966219Z",
     "iopub.status.idle": "2025-10-01T22:10:35.166544Z",
     "shell.execute_reply": "2025-10-01T22:10:35.165749Z"
    },
    "papermill": {
     "duration": 0.246342,
     "end_time": "2025-10-01T22:10:35.167945",
     "exception": false,
     "start_time": "2025-10-01T22:10:34.921603",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_13/2234177804.py:59: FutureWarning: errors='ignore' is deprecated and will raise in a future version. Use to_numeric without passing `errors` and catch exceptions explicitly instead\n",
      "  df[c] = pd.to_numeric(df[c], errors='ignore')\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "## 📊 Final evaluation metrics (loaded from `/kaggle/working/final_scale_summary_metrics.csv`)"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "</style>\n",
       "<table id=\"T_f6aa5\">\n",
       "  <caption>Cleaned final scale summary metrics</caption>\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_f6aa5_level0_col0\" class=\"col_heading level0 col0\" >P@10</th>\n",
       "      <th id=\"T_f6aa5_level0_col1\" class=\"col_heading level0 col1\" >R@10</th>\n",
       "      <th id=\"T_f6aa5_level0_col2\" class=\"col_heading level0 col2\" >NDCG@10</th>\n",
       "      <th id=\"T_f6aa5_level0_col3\" class=\"col_heading level0 col3\" >MAP@10</th>\n",
       "      <th id=\"T_f6aa5_level0_col4\" class=\"col_heading level0 col4\" >MPR@10</th>\n",
       "      <th id=\"T_f6aa5_level0_col5\" class=\"col_heading level0 col5\" >EvalUsers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_f6aa5_level0_row0\" class=\"row_heading level0 row0\" >Model_1</th>\n",
       "      <td id=\"T_f6aa5_row0_col0\" class=\"data row0 col0\" >0.048100</td>\n",
       "      <td id=\"T_f6aa5_row0_col1\" class=\"data row0 col1\" >0.481000</td>\n",
       "      <td id=\"T_f6aa5_row0_col2\" class=\"data row0 col2\" >0.437147</td>\n",
       "      <td id=\"T_f6aa5_row0_col3\" class=\"data row0 col3\" >0.423403</td>\n",
       "      <td id=\"T_f6aa5_row0_col4\" class=\"data row0 col4\" >0.404900</td>\n",
       "      <td id=\"T_f6aa5_row0_col5\" class=\"data row0 col5\" >1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_f6aa5_level0_row1\" class=\"row_heading level0 row1\" >Model_2</th>\n",
       "      <td id=\"T_f6aa5_row1_col0\" class=\"data row1 col0\" >0.073000</td>\n",
       "      <td id=\"T_f6aa5_row1_col1\" class=\"data row1 col1\" >0.730000</td>\n",
       "      <td id=\"T_f6aa5_row1_col2\" class=\"data row1 col2\" >0.624721</td>\n",
       "      <td id=\"T_f6aa5_row1_col3\" class=\"data row1 col3\" >0.589946</td>\n",
       "      <td id=\"T_f6aa5_row1_col4\" class=\"data row1 col4\" >0.605900</td>\n",
       "      <td id=\"T_f6aa5_row1_col5\" class=\"data row1 col5\" >1000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x79c4ee58bb10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "### 🔍 Qualitative model winners (per metric)"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "- **P@10**: top performer — **Model_2**.\n",
       "- **R@10**: top performer — **Model_2**.\n",
       "- **NDCG@10**: top performer — **Model_2**.\n",
       "- **MAP@10**: top performer — **Model_2**.\n",
       "- **MPR@10**: top performer — **Model_2**."
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "### 📘 Metric meanings (guidance — no numeric thresholds)\n",
       "\n",
       "- **Precision@10 (P@10)** — Of the top-10 items returned, the fraction that are relevant. In very large catalogs, absolute Precision values can be low while still being useful.\n",
       "\n",
       "- **Recall@10 (R@10)** — Fraction of the user's relevant items that appear in the top-10. High Recall means good coverage of what the user is likely to want.\n",
       "\n",
       "- **NDCG@10** — Rewards placing the most relevant items near the top. This is often the primary ranking metric to optimize when user satisfaction depends on top-list order.\n",
       "\n",
       "- **MAP@10** — Mean Average Precision across users; emphasizes consistent early correct placements.\n",
       "\n",
       "- **MPR@10** — A rank-based measure capturing how near the top relevant items are on average; complements NDCG/MAP.\n",
       "\n",
       "- **EvalUsers** — The number of users used for evaluation; larger is more reliable.\n",
       "\n",
       "### 🔎 How to interpret combinations (qualitative)\n",
       "\n",
       "- If **NDCG** and **MAP** improve together, the model provides reliably better top-ranked results across users.\n",
       "- If a model shows higher **Recall** but lower **Precision**, it finds many relevant items but the top list may include more noise — consider stronger reranking or feature signals.\n",
       "- A modest Precision in a huge catalog can still be valuable if **Recall** and **NDCG** are strong — the system surfaces relevant items and ranks them well even if many slots remain non-relevant.\n",
       "\n",
       "### ✅ Practical next steps (if you want to improve results)\n",
       "\n",
       "- Verify candidate recall (if many true items never enter the candidate pool, increase pool size or add ANN).\n",
       "- Improve hard-negative mining diversity to teach the reranker harder distinctions.\n",
       "- Add more features (metadata, temporal signals) to the LTR training data.\n",
       "- Consider using stronger encoders (on GPU) or FAISS for ANN retrieval if compute allows."
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Cleanly load & display the saved final metrics table, then give number-free explanations\n",
    "import os\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from IPython.display import display, Markdown\n",
    "\n",
    "# Candidate CSV paths to try (prefer OUT_DIR if available)\n",
    "csv_candidates = []\n",
    "if 'OUT_DIR' in globals() and OUT_DIR:\n",
    "    csv_candidates.append(os.path.join(OUT_DIR, \"final_scale_summary_metrics.csv\"))\n",
    "csv_candidates.extend([\n",
    "    \"final_scale_summary_metrics.csv\",\n",
    "    os.path.join(os.getcwd(), \"final_scale_summary_metrics.csv\"),\n",
    "])\n",
    "\n",
    "# Find a readable CSV\n",
    "metrics_df = None\n",
    "csv_used = None\n",
    "for p in csv_candidates:\n",
    "    if p and os.path.exists(p):\n",
    "        try:\n",
    "            df_try = pd.read_csv(p)\n",
    "            # Basic heuristics for readability: prefer files with expected metric columns\n",
    "            metrics_df = df_try.copy()\n",
    "            csv_used = p\n",
    "            break\n",
    "        except Exception as e:\n",
    "            display(Markdown(f\"**Found file but failed to read** `{p}` — error: `{e}`\"))\n",
    "\n",
    "# If not found, show friendly error\n",
    "if metrics_df is None:\n",
    "    display(Markdown(\"❌ **Could not find or read** `final_scale_summary_metrics.csv` in OUT_DIR or current directory. \"\n",
    "                     \"Make sure the notebook saved it earlier.\"))\n",
    "else:\n",
    "    # ---- CLEANUP ----\n",
    "    df = metrics_df.copy()\n",
    "\n",
    "    # 1) Drop obvious accidental index column (Unnamed: 0 or first column named '0')\n",
    "    if df.columns[0].startswith(\"Unnamed\") or df.columns[0] == \"0\":\n",
    "        df = df.iloc[:, 1:].copy()\n",
    "\n",
    "    # 2) If columns are metrics but are rows (transposed), try to detect and transpose\n",
    "    expected_metrics = {'P@10','R@10','NDCG@10','MAP@10','MPR@10','EvalUsers'}\n",
    "    cols_set = set(df.columns.astype(str))\n",
    "    # If the expected metrics are not in columns but are in the first column values, transpose.\n",
    "    if not expected_metrics.intersection(cols_set):\n",
    "        # check if first column contains metric names\n",
    "        first_col_vals = set(df.iloc[:,0].astype(str).str.strip().tolist())\n",
    "        if expected_metrics.intersection(first_col_vals):\n",
    "            try:\n",
    "                df = df.set_index(df.columns[0]).T.reset_index(drop=True)\n",
    "            except Exception:\n",
    "                pass\n",
    "\n",
    "    # 3) Ensure numeric columns are numeric\n",
    "    for c in df.columns:\n",
    "        # try to coerce numeric-like columns\n",
    "        try:\n",
    "            df[c] = pd.to_numeric(df[c], errors='ignore')\n",
    "        except Exception:\n",
    "            pass\n",
    "\n",
    "    # 4) If no friendly model names in index, create readable labels\n",
    "    if df.index.dtype != 'object' or all(isinstance(i, (int, np.integer, float)) for i in df.index):\n",
    "        # If a 'Model' column exists, use it; otherwise create Model_1, Model_2...\n",
    "        if 'Model' in df.columns:\n",
    "            df = df.set_index('Model')\n",
    "        else:\n",
    "            df.index = [f\"Model_{i+1}\" for i in range(len(df))]\n",
    "\n",
    "    # 5) Reorder columns to expected order where possible\n",
    "    desired_order = ['P@10','R@10','NDCG@10','MAP@10','MPR@10','EvalUsers']\n",
    "    present = [c for c in desired_order if c in df.columns]\n",
    "    others = [c for c in df.columns if c not in present]\n",
    "    df = df[present + others]\n",
    "\n",
    "    # ---- DISPLAY CLEAN TABLE ----\n",
    "    display(Markdown(f\"## 📊 Final evaluation metrics (loaded from `{csv_used}`)\"))\n",
    "    # Format numeric display: 6 decimals for floats, integer for EvalUsers if present\n",
    "    fmt = {}\n",
    "    for c in df.columns:\n",
    "        if c == 'EvalUsers':\n",
    "            fmt[c] = \"{:.0f}\"\n",
    "        else:\n",
    "            # only apply float format if column is numeric\n",
    "            if pd.api.types.is_numeric_dtype(df[c]):\n",
    "                fmt[c] = \"{:.6f}\"\n",
    "            else:\n",
    "                fmt[c] = \"{}\"\n",
    "    display(df.style.format(fmt).set_caption(\"Cleaned final scale summary metrics\"))\n",
    "\n",
    "    # ---- QUALITATIVE COMPARISONS (NO RAW NUMBERS) ----\n",
    "    present_metric_cols = [c for c in ['P@10','R@10','NDCG@10','MAP@10','MPR@10'] if c in df.columns]\n",
    "    qualitative_notes = []\n",
    "\n",
    "    if len(df) == 1:\n",
    "        qualitative_notes.append(\"Only a single model/row is present — no cross-model comparison available.\")\n",
    "    else:\n",
    "        for col in present_metric_cols:\n",
    "            try:\n",
    "                # Determine best model(s) for this metric (higher is better)\n",
    "                best_val = df[col].max()\n",
    "                best_models = df.index[df[col] == best_val].tolist()\n",
    "                if len(best_models) == 1:\n",
    "                    qualitative_notes.append(f\"- **{col}**: top performer — **{best_models[0]}**.\")\n",
    "                else:\n",
    "                    qualitative_notes.append(f\"- **{col}**: top performers (tie) — **{', '.join(best_models)}**.\")\n",
    "            except Exception:\n",
    "                # skip if comparison fails for a column\n",
    "                pass\n",
    "\n",
    "    # ---- HUMAN-FRIENDLY EXPLANATION (NO HARD THRESHOLDS) ----\n",
    "    explanation_lines = [\n",
    "        \"### 📘 Metric meanings (guidance — no numeric thresholds)\",\n",
    "        \"\",\n",
    "        \"- **Precision@10 (P@10)** — Of the top-10 items returned, the fraction that are relevant. In very large catalogs, absolute Precision values can be low while still being useful.\",\n",
    "        \"\",\n",
    "        \"- **Recall@10 (R@10)** — Fraction of the user's relevant items that appear in the top-10. High Recall means good coverage of what the user is likely to want.\",\n",
    "        \"\",\n",
    "        \"- **NDCG@10** — Rewards placing the most relevant items near the top. This is often the primary ranking metric to optimize when user satisfaction depends on top-list order.\",\n",
    "        \"\",\n",
    "        \"- **MAP@10** — Mean Average Precision across users; emphasizes consistent early correct placements.\",\n",
    "        \"\",\n",
    "        \"- **MPR@10** — A rank-based measure capturing how near the top relevant items are on average; complements NDCG/MAP.\",\n",
    "        \"\",\n",
    "        \"- **EvalUsers** — The number of users used for evaluation; larger is more reliable.\",\n",
    "        \"\",\n",
    "        \"### 🔎 How to interpret combinations (qualitative)\",\n",
    "        \"\",\n",
    "        \"- If **NDCG** and **MAP** improve together, the model provides reliably better top-ranked results across users.\",\n",
    "        \"- If a model shows higher **Recall** but lower **Precision**, it finds many relevant items but the top list may include more noise — consider stronger reranking or feature signals.\",\n",
    "        \"- A modest Precision in a huge catalog can still be valuable if **Recall** and **NDCG** are strong — the system surfaces relevant items and ranks them well even if many slots remain non-relevant.\",\n",
    "        \"\",\n",
    "        \"### ✅ Practical next steps (if you want to improve results)\",\n",
    "        \"\",\n",
    "        \"- Verify candidate recall (if many true items never enter the candidate pool, increase pool size or add ANN).\",\n",
    "        \"- Improve hard-negative mining diversity to teach the reranker harder distinctions.\",\n",
    "        \"- Add more features (metadata, temporal signals) to the LTR training data.\",\n",
    "        \"- Consider using stronger encoders (on GPU) or FAISS for ANN retrieval if compute allows.\"\n",
    "    ]\n",
    "\n",
    "    # ---- OUTPUT ----\n",
    "    if qualitative_notes:\n",
    "        display(Markdown(\"### 🔍 Qualitative model winners (per metric)\"))\n",
    "        display(Markdown(\"\\n\".join(qualitative_notes)))\n",
    "    display(Markdown(\"\\n\".join(explanation_lines)))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d41a9ea2",
   "metadata": {
    "papermill": {
     "duration": 0.042761,
     "end_time": "2025-10-01T22:10:35.254024",
     "exception": false,
     "start_time": "2025-10-01T22:10:35.211263",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8319.52074,
   "end_time": "2025-10-01T22:10:38.433009",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-10-01T19:51:58.912269",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "00fbfdb0efda4279885cad1c1148d17a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_870d7d9d429b4af9b46a9fdf53426630",
        "IPY_MODEL_7be1e590ee594c4b9b9755ee02bb8578",
        "IPY_MODEL_533870fe8ba349a1b6c0323735c900ce"
       ],
       "layout": "IPY_MODEL_4c9a1919b5684087acfa4bfecc9177ff",
       "tabbable": null,
       "tooltip": null
      }
     },
     "010654670003428bbc79897225cc5d56": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "01262bb843f149d083b47a44d104961b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0167f12bc77c472ea3464bd0c3f51ca9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_71d2c615a9df4d06be69c56865b555d2",
       "placeholder": "​",
       "style": "IPY_MODEL_0c28110786354343b7c9d5ccfbc570b7",
       "tabbable": null,
       "tooltip": null,
       "value": "model.safetensors: 100%"
      }
     },
     "01e7d410087b47bb9a046fb1cd4956f4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_cd09e6ad5a6a42f582df31ccbd523b4d",
       "placeholder": "​",
       "style": "IPY_MODEL_e78a4322b0fd43f985578d1a962aee66",
       "tabbable": null,
       "tooltip": null,
       "value": " 53.0/53.0 [00:00&lt;00:00, 5.01kB/s]"
      }
     },
     "0514a1939a714a50b8c658f1973a8163": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_f7d239ec79f54c1ab389c8880afe1758",
        "IPY_MODEL_24fe438c9a6c4b6dac242808c0304ff1",
        "IPY_MODEL_e589b392468e4363b9b70c3028f8002c"
       ],
       "layout": "IPY_MODEL_91ae11bd18944063b98655203ebe3b48",
       "tabbable": null,
       "tooltip": null
      }
     },
     "05e16737abcb43e6b2f6e84f650cfde9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2155b91f3d4d4013be8ba96be1126b65",
       "placeholder": "​",
       "style": "IPY_MODEL_91ce0aabeb4e4a8ea0a0701361409851",
       "tabbable": null,
       "tooltip": null,
       "value": "tokenizer.json: "
      }
     },
     "06efae3609a14e02b7a3128b30e7b423": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "07cf7cbf57c64219b7c61e958d7a64e1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8b60fd044c27497ba330a3ad374c43a5",
       "placeholder": "​",
       "style": "IPY_MODEL_5b921b572ac44301bcf7848dbac82302",
       "tabbable": null,
       "tooltip": null,
       "value": "SBERT encode: 100%"
      }
     },
     "084247587a184611b6dbc9dea437d6e5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0901d2505a3d4ae3afe117b864ca82f3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0942033f9a4a4dd5a37af7f07c52ab64": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d2c1dda0c7254b84acc9204daa5b232c",
       "placeholder": "​",
       "style": "IPY_MODEL_6acbb72058364b43be7db721443ef33f",
       "tabbable": null,
       "tooltip": null,
       "value": " 190/190 [00:00&lt;00:00, 15.2kB/s]"
      }
     },
     "0c28110786354343b7c9d5ccfbc570b7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0ddad15ef7b64aa8b7885627bfd17380": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "0e41f491260d442fa88789a5837704dc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0e6035d3cd3b47ccbeb6a4bb6591e019": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0f1ba13df79c46aab5d302b5758a2f58": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "0fc84bbfa7434c1d81cbf624732ef835": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "142ce5d583dd4815988969093e62a0f1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "1477c9ab080f4ef58bf4cfce5afb0e11": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_429fa60e01af4ab79340ae8f071e6a02",
       "placeholder": "​",
       "style": "IPY_MODEL_e735ecdb85b541f3b76b7d053ac0b362",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating lgbm_final_topk: 100%"
      }
     },
     "15eb3df2dd9f425e99a3f69c1e17441b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "19c5e2c43b234779815c85e3c05530aa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1ad23222bffd4cc291d7335a6b9bf101": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1af1bcf4e93f492994044e443d7a4298": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1bb8d9eb9e8b4afba494e51451440615": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "1ea01165f2f54bf68268af82252740e0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a2f8e08b09684e6daabbc12309289b89",
        "IPY_MODEL_fda53290924f4ba8bb9f88951a971b98",
        "IPY_MODEL_dd91b6c5be2d495da33146e2c9f2f53a"
       ],
       "layout": "IPY_MODEL_19c5e2c43b234779815c85e3c05530aa",
       "tabbable": null,
       "tooltip": null
      }
     },
     "1ec110203bd34b6b8dfe631ba8988c28": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ee142b067f13420c830dd0a6fe82e3fb",
       "max": 363.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_0fc84bbfa7434c1d81cbf624732ef835",
       "tabbable": null,
       "tooltip": null,
       "value": 363.0
      }
     },
     "1ef5bd0c046848fc9da8a15acf305e1f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "20082b46712f4cefacab70072152c079": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8eb2bb01915e493b96e603fe58dc434a",
       "max": 35.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_1ef5bd0c046848fc9da8a15acf305e1f",
       "tabbable": null,
       "tooltip": null,
       "value": 35.0
      }
     },
     "2155b91f3d4d4013be8ba96be1126b65": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "24fe438c9a6c4b6dac242808c0304ff1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0ddad15ef7b64aa8b7885627bfd17380",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_7c48acc24da84a3f8620779bf5e06eea",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "2526075cc3dc4389b6d911159f0a0a97": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2604107c0f4c4fbfa71c697b71c4eb40": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "29aa917ac2394fedab645afe1b17d9ca": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2ae2ff8a1a81433384caa67a3cda4d02": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_eca3464158674161be28f9610584c69c",
       "placeholder": "​",
       "style": "IPY_MODEL_4bbd694fd9ae41dcbac8f61f704b673e",
       "tabbable": null,
       "tooltip": null,
       "value": "special_tokens_map.json: 100%"
      }
     },
     "2bec2ce489ff413eb785e5dfcf6cd6fa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2d73526578244b6ca7e95028f54a2734": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2dc32ac43f654e868c10d9a5afa51074": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_c4b8917381114a78b99e41ed89b0ec6c",
        "IPY_MODEL_5cf25a66c5194a57889a7ebe740b8535",
        "IPY_MODEL_9026c4c8b2fd459c874686b94e702258"
       ],
       "layout": "IPY_MODEL_828820f0bab743b68ab5052bdfa31399",
       "tabbable": null,
       "tooltip": null
      }
     },
     "2fec2012a286475b8a18e133ec75dc6d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "32390c763f9f42259b2cfb29f89c05c7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_dbfbdeb260a94e03bdda337ec20a64c1",
       "max": 300.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_e6fa4d9ee43048af97f44ac7e48ada79",
       "tabbable": null,
       "tooltip": null,
       "value": 300.0
      }
     },
     "347045b439184acf82b88c6576d3b715": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3589a69d389d4bf1adbe480105bae314": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3675e9508b6c4a98b7415236a5d83437": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "380a536614444e00bffcf3310c8881b9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_347045b439184acf82b88c6576d3b715",
       "placeholder": "​",
       "style": "IPY_MODEL_9468bc9eafe340b09dcd68070a9d9008",
       "tabbable": null,
       "tooltip": null,
       "value": "config.json: 100%"
      }
     },
     "382ee4a9d108476585fe076ea8f98e1a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_57661d0302214528a268ddc924f6e209",
       "placeholder": "​",
       "style": "IPY_MODEL_2bec2ce489ff413eb785e5dfcf6cd6fa",
       "tabbable": null,
       "tooltip": null,
       "value": " 466k/? [00:00&lt;00:00, 27.2MB/s]"
      }
     },
     "3a7e011f07964bf690860ef4b679dee8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3ac9b5ace8f448d0ad58e14718fcc04e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1ad23222bffd4cc291d7335a6b9bf101",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_452f2dbe25a6440aa96d6226358d945d",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "3b5f9fd8b1cc48a4bfda5daf70767564": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3c309723e55e46068a2830e1456b2361": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3c32ee816fdf43c5a5f5aea831f4e853": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3c7bcd2eb88a4ee588eb08182c72d73b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3d4b9ecfe9d64ea8b066da207f34ff80": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "3ed8f41bac034c51a99f32c1544cf7b1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3c32ee816fdf43c5a5f5aea831f4e853",
       "max": 190.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_dd53430da65246919e7b93c294baa260",
       "tabbable": null,
       "tooltip": null,
       "value": 190.0
      }
     },
     "3f0584dd0f1d43b08a3a367b7339c0cd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "425a30b784bd45689c8f30ea5578ef97": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "429b4f869f104333b925239e81411588": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ecd5e3ab4b724ae09e558750ee3c3444",
       "placeholder": "​",
       "style": "IPY_MODEL_3f0584dd0f1d43b08a3a367b7339c0cd",
       "tabbable": null,
       "tooltip": null,
       "value": "100%"
      }
     },
     "429fa60e01af4ab79340ae8f071e6a02": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "452f2dbe25a6440aa96d6226358d945d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "45e3ccac4e3446fca4e9a63417fa9e8c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_2ae2ff8a1a81433384caa67a3cda4d02",
        "IPY_MODEL_6542a3ac5abb416c80a67ca04c2beffd",
        "IPY_MODEL_b92368efa00a4198a01bfb5645574ce8"
       ],
       "layout": "IPY_MODEL_ffdb349da3114a18a35463b6452e7e29",
       "tabbable": null,
       "tooltip": null
      }
     },
     "461a7b015b8649bbb191515ceffdad92": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_29aa917ac2394fedab645afe1b17d9ca",
       "placeholder": "​",
       "style": "IPY_MODEL_e76700af31134f9eb64d6b78bf71617b",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [38:30&lt;00:00,  2.26s/it]"
      }
     },
     "46716599285c433b94c3e9ac29bbb9fe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_6a23a06ba3a545eb822670f2f0e0f712",
        "IPY_MODEL_7f9fb180fc79466d918aea856ed41f7e",
        "IPY_MODEL_a9df8825bd324b48a494a4cac1fa012f"
       ],
       "layout": "IPY_MODEL_7ea02871adfa47dfa5ee7f58c319d5e1",
       "tabbable": null,
       "tooltip": null
      }
     },
     "467e23515a7e42a29cd8e1b424c91195": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c0a2f8dc0e8e46119857037c24f3e3d8",
       "placeholder": "​",
       "style": "IPY_MODEL_2526075cc3dc4389b6d911159f0a0a97",
       "tabbable": null,
       "tooltip": null,
       "value": " 35/35 [35:25&lt;00:00, 59.20s/it]"
      }
     },
     "4680535c4a1b4fd4bf6623b1f1e150ef": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "46fa5fd8fc044eb5b959f0d6ddef8e9e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "487190fe32b54fbc99d9563d58ad8c0b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_7f5316be6bd14594b1f8a66ee671b006",
        "IPY_MODEL_4cb1b21180de43ed92b8efd32a5fbfbb",
        "IPY_MODEL_9543ec09753748eeb04c517863f03293"
       ],
       "layout": "IPY_MODEL_cee7d1763d564ca0baad82c545a3857c",
       "tabbable": null,
       "tooltip": null
      }
     },
     "48bdb0f952bd4015a3003aed8ba555fd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "48d28745009b47cba5889f97a7b1279f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "49c5199187214d618690461bc8efaf90": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e009d23912fa47958e9dfefadec0adce",
       "placeholder": "​",
       "style": "IPY_MODEL_50f9d2cc76e94002bce8ab66e8ec53bb",
       "tabbable": null,
       "tooltip": null,
       "value": "Building Meta Prototype: 100%"
      }
     },
     "49f1a1dba1554aac81c24615fa2c297c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "4a9275afd29e453db77c285a5636f763": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4bbd694fd9ae41dcbac8f61f704b673e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "4c8e3ab7ef0148e6954852dea65cd9d6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "4c9a1919b5684087acfa4bfecc9177ff": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4cb1b21180de43ed92b8efd32a5fbfbb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_142ce5d583dd4815988969093e62a0f1",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_3d4b9ecfe9d64ea8b066da207f34ff80",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "4d0804dc33a0487b919d38fbfc27beec": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_90c82d8aa4074669a64494b74a2d111a",
       "placeholder": "​",
       "style": "IPY_MODEL_084247587a184611b6dbc9dea437d6e5",
       "tabbable": null,
       "tooltip": null,
       "value": "config.json: 100%"
      }
     },
     "4dacabbda44740108008a24f99fa3da0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "4e5bb00d820a43c0af0bd06f466c5ecd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4edfc68bc380433791915b064319c7f3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "50b3faa42b72473dbe6e33c5586b7a75": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "50f9d2cc76e94002bce8ab66e8ec53bb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "525ee2f7539f4eb7ac6aa50d04671cf5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "533870fe8ba349a1b6c0323735c900ce": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_aa3fe3232b2a48aeb7d5937b57aa0509",
       "placeholder": "​",
       "style": "IPY_MODEL_8e83e89a1e70465bb7cfd81345f58279",
       "tabbable": null,
       "tooltip": null,
       "value": " 116/116 [00:00&lt;00:00, 12.5kB/s]"
      }
     },
     "561e74f57cff48b9a399ddca9ed5ba4e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0e41f491260d442fa88789a5837704dc",
       "placeholder": "​",
       "style": "IPY_MODEL_7ac56fbff94d4ed69a0836d8c400263e",
       "tabbable": null,
       "tooltip": null,
       "value": " 571/571 [00:00&lt;00:00, 61.5kB/s]"
      }
     },
     "56924ac27117445caf70be416fd353b2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_48d28745009b47cba5889f97a7b1279f",
       "max": 53.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_010654670003428bbc79897225cc5d56",
       "tabbable": null,
       "tooltip": null,
       "value": 53.0
      }
     },
     "57661d0302214528a268ddc924f6e209": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5809012c011d483aaa04571bd0ca3f8e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "585543d386c64df6b72edb914cd4dbcc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5b921b572ac44301bcf7848dbac82302": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "5cf25a66c5194a57889a7ebe740b8535": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3675e9508b6c4a98b7415236a5d83437",
       "max": 349.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_46fa5fd8fc044eb5b959f0d6ddef8e9e",
       "tabbable": null,
       "tooltip": null,
       "value": 349.0
      }
     },
     "5e7de13980b24aec8478166a1d666229": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "5fcc8b480daf42829b01e0cd8d37e9fb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_bb9447e534584e768209ae81b13ae44a",
       "placeholder": "​",
       "style": "IPY_MODEL_deb8880be8cc44a6a4ce77ee4a27ccc4",
       "tabbable": null,
       "tooltip": null,
       "value": " 30.3k/? [00:00&lt;00:00, 2.52MB/s]"
      }
     },
     "621d3c9a210947419946daab30d3f0db": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "63629287fc2d49448ae3c69125e5e3ff": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "64b3f6153e07400e9e47662bc58ccdd5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "6542a3ac5abb416c80a67ca04c2beffd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9f1cf47c2f5c4b699d210316729d5a6c",
       "max": 239.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_d5404e97522d4bf4821d13961482fcb1",
       "tabbable": null,
       "tooltip": null,
       "value": 239.0
      }
     },
     "68f3f1a7eba94066b53904674b2c719b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6a23a06ba3a545eb822670f2f0e0f712": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0e6035d3cd3b47ccbeb6a4bb6591e019",
       "placeholder": "​",
       "style": "IPY_MODEL_5e7de13980b24aec8478166a1d666229",
       "tabbable": null,
       "tooltip": null,
       "value": "Best trial: 16. Best value: -0.0361331: 100%"
      }
     },
     "6acbb72058364b43be7db721443ef33f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6afb0da1690f4f839db039255c7b24a8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6cdddc514cfd43fc8274540a14d697f2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_81572a9c863f480f8e15de6c5b19e456",
       "placeholder": "​",
       "style": "IPY_MODEL_3c309723e55e46068a2830e1456b2361",
       "tabbable": null,
       "tooltip": null,
       "value": "sentence_bert_config.json: 100%"
      }
     },
     "6df241e3177a478aa6bbf5b1b66311b4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6afb0da1690f4f839db039255c7b24a8",
       "placeholder": "​",
       "style": "IPY_MODEL_7d76da060c2d43c39309df512b2c9769",
       "tabbable": null,
       "tooltip": null,
       "value": "README.md: "
      }
     },
     "71d2c615a9df4d06be69c56865b555d2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7403b7d62a244cd1a5f96aa63a1af7c6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_07cf7cbf57c64219b7c61e958d7a64e1",
        "IPY_MODEL_20082b46712f4cefacab70072152c079",
        "IPY_MODEL_467e23515a7e42a29cd8e1b424c91195"
       ],
       "layout": "IPY_MODEL_810f7c2c85ca4d1f90b7c8d0b7d8e4c1",
       "tabbable": null,
       "tooltip": null
      }
     },
     "74f1cd113d6944678d5a0b6e6d2d90a0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "751e5738a9b349759fd711db7af1dc42": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7a64b42260de41ffaff0389a971e4c16": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7ac56fbff94d4ed69a0836d8c400263e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7ad74a528d044a279b64a24a9ed207ee": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_525ee2f7539f4eb7ac6aa50d04671cf5",
       "placeholder": "​",
       "style": "IPY_MODEL_9a7d0faa894647d097d579fa86bec03a",
       "tabbable": null,
       "tooltip": null,
       "value": "README.md: "
      }
     },
     "7be1e590ee594c4b9b9755ee02bb8578": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e0d33dc382df4596aea406bf5d2bb7c5",
       "max": 116.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_5809012c011d483aaa04571bd0ca3f8e",
       "tabbable": null,
       "tooltip": null,
       "value": 116.0
      }
     },
     "7c48acc24da84a3f8620779bf5e06eea": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "7d76da060c2d43c39309df512b2c9769": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7ea02871adfa47dfa5ee7f58c319d5e1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7f5316be6bd14594b1f8a66ee671b006": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0901d2505a3d4ae3afe117b864ca82f3",
       "placeholder": "​",
       "style": "IPY_MODEL_2fec2012a286475b8a18e133ec75dc6d",
       "tabbable": null,
       "tooltip": null,
       "value": "Amazon-Reviews-2023.py: "
      }
     },
     "7f9fb180fc79466d918aea856ed41f7e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b1d3de1a51b5439e876314818c7e0df4",
       "max": 20.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_d8176a9799a34a7ebd1b33ddbb360e7a",
       "tabbable": null,
       "tooltip": null,
       "value": 20.0
      }
     },
     "810f7c2c85ca4d1f90b7c8d0b7d8e4c1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "81572a9c863f480f8e15de6c5b19e456": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "828820f0bab743b68ab5052bdfa31399": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "82d5e3e4e395472fb10a8690cd7777b3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_429b4f869f104333b925239e81411588",
        "IPY_MODEL_cfd2753bbe9249bfbd2b61137dc84b1b",
        "IPY_MODEL_d5f286c766c14914b4426156a43f97b2"
       ],
       "layout": "IPY_MODEL_b32d8aca9dba48cb9078182278d14135",
       "tabbable": null,
       "tooltip": null
      }
     },
     "84efd5f632864c06934039fce13ef471": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_6df241e3177a478aa6bbf5b1b66311b4",
        "IPY_MODEL_b39d1278dedf407daa42b7834945ea49",
        "IPY_MODEL_f43c3c9cfee148efb315d63ab4be162c"
       ],
       "layout": "IPY_MODEL_ee9dae2ea93c45c79139b49ec96a8920",
       "tabbable": null,
       "tooltip": null
      }
     },
     "870d7d9d429b4af9b46a9fdf53426630": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4680535c4a1b4fd4bf6623b1f1e150ef",
       "placeholder": "​",
       "style": "IPY_MODEL_4edfc68bc380433791915b064319c7f3",
       "tabbable": null,
       "tooltip": null,
       "value": "config_sentence_transformers.json: 100%"
      }
     },
     "890924ecf8e04499985a00fd444077b5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "8b60fd044c27497ba330a3ad374c43a5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8e83e89a1e70465bb7cfd81345f58279": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "8eb2bb01915e493b96e603fe58dc434a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9026c4c8b2fd459c874686b94e702258": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_91486392a76840999a44b73f5029c8c8",
       "placeholder": "​",
       "style": "IPY_MODEL_93324e6de6144c8e862a09fc6472d53e",
       "tabbable": null,
       "tooltip": null,
       "value": " 349/349 [00:00&lt;00:00, 36.5kB/s]"
      }
     },
     "90c82d8aa4074669a64494b74a2d111a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "91486392a76840999a44b73f5029c8c8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "91ae11bd18944063b98655203ebe3b48": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "91ce0aabeb4e4a8ea0a0701361409851": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "926886f33c894e17b01498f832da6056": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "93324e6de6144c8e862a09fc6472d53e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9468bc9eafe340b09dcd68070a9d9008": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9543ec09753748eeb04c517863f03293": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c15e119e84ae4eb5a27eb33a6fdaa22c",
       "placeholder": "​",
       "style": "IPY_MODEL_4c8e3ab7ef0148e6954852dea65cd9d6",
       "tabbable": null,
       "tooltip": null,
       "value": " 39.6k/? [00:00&lt;00:00, 3.16MB/s]"
      }
     },
     "96d8090bbc994722824fcc584d0382b5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_50b3faa42b72473dbe6e33c5586b7a75",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_f226540cb5724ff5acb27d06159bba88",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "9a7d0faa894647d097d579fa86bec03a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9c6e6526cdbd42f681da7542f172d19d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_f08385c307ca4526a7a87cc926d95144",
        "IPY_MODEL_1ec110203bd34b6b8dfe631ba8988c28",
        "IPY_MODEL_c9f5dee36b6a4dc893f25f35e72c6887"
       ],
       "layout": "IPY_MODEL_a798f4f39b00410d80332c36117f9c2d",
       "tabbable": null,
       "tooltip": null
      }
     },
     "9dff76dcdc76467e979bd8053d9eda87": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9f1cf47c2f5c4b699d210316729d5a6c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a2f8e08b09684e6daabbc12309289b89": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_bd3d4013fb1a4732863661035b5f9070",
       "placeholder": "​",
       "style": "IPY_MODEL_ae18016c509642a59415bf35eddcc630",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating semantic_final_topk: 100%"
      }
     },
     "a4033f585fe04b138666159d7623f6e5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_49c5199187214d618690461bc8efaf90",
        "IPY_MODEL_32390c763f9f42259b2cfb29f89c05c7",
        "IPY_MODEL_c2517beca0944d088876c7a7470eb56b"
       ],
       "layout": "IPY_MODEL_1af1bcf4e93f492994044e443d7a4298",
       "tabbable": null,
       "tooltip": null
      }
     },
     "a410c70eb9204f089f0e4665338c87e4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a58d7570f8fc4d919b12ca0997e26a0d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_380a536614444e00bffcf3310c8881b9",
        "IPY_MODEL_3ed8f41bac034c51a99f32c1544cf7b1",
        "IPY_MODEL_0942033f9a4a4dd5a37af7f07c52ab64"
       ],
       "layout": "IPY_MODEL_aa34368e1e4e42f4b3ded413820cfbd6",
       "tabbable": null,
       "tooltip": null
      }
     },
     "a5d8c9c492b84080b609fbcc9d675b80": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a798f4f39b00410d80332c36117f9c2d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a7ffb50652fd4a1783cef825f3dada25": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_4d0804dc33a0487b919d38fbfc27beec",
        "IPY_MODEL_ea89a10195a1405180cef0575b95fec5",
        "IPY_MODEL_561e74f57cff48b9a399ddca9ed5ba4e"
       ],
       "layout": "IPY_MODEL_bef15d4372d6488bbd2d93eebb73210d",
       "tabbable": null,
       "tooltip": null
      }
     },
     "a84fda7ee6a5478984a11e3edd1dd48b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a9df8825bd324b48a494a4cac1fa012f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c016d581316f4c77b3fee26ddec8117f",
       "placeholder": "​",
       "style": "IPY_MODEL_3b5f9fd8b1cc48a4bfda5daf70767564",
       "tabbable": null,
       "tooltip": null,
       "value": " 20/20 [00:01&lt;00:00, 12.13it/s]"
      }
     },
     "aa34368e1e4e42f4b3ded413820cfbd6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "aa3fe3232b2a48aeb7d5937b57aa0509": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ad1ce6e85f734f90a3d2cc6925f613e9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_6cdddc514cfd43fc8274540a14d697f2",
        "IPY_MODEL_56924ac27117445caf70be416fd353b2",
        "IPY_MODEL_01e7d410087b47bb9a046fb1cd4956f4"
       ],
       "layout": "IPY_MODEL_926886f33c894e17b01498f832da6056",
       "tabbable": null,
       "tooltip": null
      }
     },
     "ae18016c509642a59415bf35eddcc630": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "aed991659ad34b04ae50f6cfd497fc26": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2604107c0f4c4fbfa71c697b71c4eb40",
       "placeholder": "​",
       "style": "IPY_MODEL_49f1a1dba1554aac81c24615fa2c297c",
       "tabbable": null,
       "tooltip": null,
       "value": "Building Meta Scale: 100%"
      }
     },
     "b179c599858f4355b959e923e96623d3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3a7e011f07964bf690860ef4b679dee8",
       "placeholder": "​",
       "style": "IPY_MODEL_db97194a54fe45a2b81c9ec31cb74a59",
       "tabbable": null,
       "tooltip": null,
       "value": " 438M/438M [00:02&lt;00:00, 268MB/s]"
      }
     },
     "b1d3de1a51b5439e876314818c7e0df4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b27b6e9e81394b66b5c494e5fac286ba": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b32d8aca9dba48cb9078182278d14135": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b39d1278dedf407daa42b7834945ea49": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0f1ba13df79c46aab5d302b5758a2f58",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_f6df7d23aee643fb81794119e9c7216d",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "b49bba1c0cd743088589a6aa5dd19c6f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e2f50099585d42eeb658a17a1c0ffe00",
       "max": 437971872.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_890924ecf8e04499985a00fd444077b5",
       "tabbable": null,
       "tooltip": null,
       "value": 437971872.0
      }
     },
     "b68933f94eea45f18619c95160d1b023": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b92368efa00a4198a01bfb5645574ce8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a410c70eb9204f089f0e4665338c87e4",
       "placeholder": "​",
       "style": "IPY_MODEL_06efae3609a14e02b7a3128b30e7b423",
       "tabbable": null,
       "tooltip": null,
       "value": " 239/239 [00:00&lt;00:00, 26.8kB/s]"
      }
     },
     "bb9447e534584e768209ae81b13ae44a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bd3d4013fb1a4732863661035b5f9070": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bd884a9894f14818ada9b053926a7a4c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bef15d4372d6488bbd2d93eebb73210d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c016d581316f4c77b3fee26ddec8117f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c0a2f8dc0e8e46119857037c24f3e3d8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c15e119e84ae4eb5a27eb33a6fdaa22c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c165fbb883284bbb94d042bad365e794": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_0167f12bc77c472ea3464bd0c3f51ca9",
        "IPY_MODEL_b49bba1c0cd743088589a6aa5dd19c6f",
        "IPY_MODEL_b179c599858f4355b959e923e96623d3"
       ],
       "layout": "IPY_MODEL_7a64b42260de41ffaff0389a971e4c16",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c247945e3185427184853ed86e33c748": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_7ad74a528d044a279b64a24a9ed207ee",
        "IPY_MODEL_96d8090bbc994722824fcc584d0382b5",
        "IPY_MODEL_5fcc8b480daf42829b01e0cd8d37e9fb"
       ],
       "layout": "IPY_MODEL_a5d8c9c492b84080b609fbcc9d675b80",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c2517beca0944d088876c7a7470eb56b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_585543d386c64df6b72edb914cd4dbcc",
       "placeholder": "​",
       "style": "IPY_MODEL_751e5738a9b349759fd711db7af1dc42",
       "tabbable": null,
       "tooltip": null,
       "value": " 300/300 [01:16&lt;00:00,  3.88it/s]"
      }
     },
     "c48dc064c2e84ab1b20c477e83f1b860": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "c4b8917381114a78b99e41ed89b0ec6c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_bd884a9894f14818ada9b053926a7a4c",
       "placeholder": "​",
       "style": "IPY_MODEL_d400df05eff740a6a2e8fac12cbc76f4",
       "tabbable": null,
       "tooltip": null,
       "value": "modules.json: 100%"
      }
     },
     "c96c0ff9efbb49dfbd1476dc7a8afdd2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c9f5dee36b6a4dc893f25f35e72c6887": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_dc66684c7ede4a9fa0f34c90a6d356c4",
       "placeholder": "​",
       "style": "IPY_MODEL_2d73526578244b6ca7e95028f54a2734",
       "tabbable": null,
       "tooltip": null,
       "value": " 363/363 [00:00&lt;00:00, 40.4kB/s]"
      }
     },
     "cb9d303692f8400baa14ce40973058de": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "cd09e6ad5a6a42f582df31ccbd523b4d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cee7d1763d564ca0baad82c545a3857c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cfd2753bbe9249bfbd2b61137dc84b1b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b27b6e9e81394b66b5c494e5fac286ba",
       "max": 20.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_4dacabbda44740108008a24f99fa3da0",
       "tabbable": null,
       "tooltip": null,
       "value": 20.0
      }
     },
     "d2c1dda0c7254b84acc9204daa5b232c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d400df05eff740a6a2e8fac12cbc76f4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d5404e97522d4bf4821d13961482fcb1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "d5f286c766c14914b4426156a43f97b2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9dff76dcdc76467e979bd8053d9eda87",
       "placeholder": "​",
       "style": "IPY_MODEL_a84fda7ee6a5478984a11e3edd1dd48b",
       "tabbable": null,
       "tooltip": null,
       "value": " 20/20 [00:01&lt;00:00, 17.40it/s]"
      }
     },
     "d8176a9799a34a7ebd1b33ddbb360e7a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "db97194a54fe45a2b81c9ec31cb74a59": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "dbfbdeb260a94e03bdda337ec20a64c1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "dc66684c7ede4a9fa0f34c90a6d356c4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "dd53430da65246919e7b93c294baa260": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "dd91b6c5be2d495da33146e2c9f2f53a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_63629287fc2d49448ae3c69125e5e3ff",
       "placeholder": "​",
       "style": "IPY_MODEL_b68933f94eea45f18619c95160d1b023",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [00:09&lt;00:00, 111.16it/s]"
      }
     },
     "deb8880be8cc44a6a4ce77ee4a27ccc4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ded92b22443442599de461ba632a1baf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_05e16737abcb43e6b2f6e84f650cfde9",
        "IPY_MODEL_f63288878b47411cab84b24330f28cf7",
        "IPY_MODEL_382ee4a9d108476585fe076ea8f98e1a"
       ],
       "layout": "IPY_MODEL_4a9275afd29e453db77c285a5636f763",
       "tabbable": null,
       "tooltip": null
      }
     },
     "e009d23912fa47958e9dfefadec0adce": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e0d33dc382df4596aea406bf5d2bb7c5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e171f0d587494aaab86f56e1c3645c16": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_1477c9ab080f4ef58bf4cfce5afb0e11",
        "IPY_MODEL_3ac9b5ace8f448d0ad58e14718fcc04e",
        "IPY_MODEL_461a7b015b8649bbb191515ceffdad92"
       ],
       "layout": "IPY_MODEL_e49024d819154adaae10e4ab38d316da",
       "tabbable": null,
       "tooltip": null
      }
     },
     "e1bf2b0423b24e0f8f3d7b02d30f897f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "e2f50099585d42eeb658a17a1c0ffe00": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e36598ef85aa46f798a1250d4bc18583": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3589a69d389d4bf1adbe480105bae314",
       "max": 1561.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_e1bf2b0423b24e0f8f3d7b02d30f897f",
       "tabbable": null,
       "tooltip": null,
       "value": 1561.0
      }
     },
     "e49024d819154adaae10e4ab38d316da": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e589b392468e4363b9b70c3028f8002c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c96c0ff9efbb49dfbd1476dc7a8afdd2",
       "placeholder": "​",
       "style": "IPY_MODEL_68f3f1a7eba94066b53904674b2c719b",
       "tabbable": null,
       "tooltip": null,
       "value": " 232k/? [00:00&lt;00:00, 15.7MB/s]"
      }
     },
     "e6fa4d9ee43048af97f44ac7e48ada79": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "e735ecdb85b541f3b76b7d053ac0b362": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e76700af31134f9eb64d6b78bf71617b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e78a4322b0fd43f985578d1a962aee66": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e9b06613274a43a296d09fa7e5a7bc87": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3c7bcd2eb88a4ee588eb08182c72d73b",
       "placeholder": "​",
       "style": "IPY_MODEL_f8933eb228a14b8cb974085d67e64f93",
       "tabbable": null,
       "tooltip": null,
       "value": " 1561/1561 [1:00:10&lt;00:00,  2.28s/it]"
      }
     },
     "ea89a10195a1405180cef0575b95fec5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_15eb3df2dd9f425e99a3f69c1e17441b",
       "max": 571.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_64b3f6153e07400e9e47662bc58ccdd5",
       "tabbable": null,
       "tooltip": null,
       "value": 571.0
      }
     },
     "eca3464158674161be28f9610584c69c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ecd5e3ab4b724ae09e558750ee3c3444": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ed5a30dd0c624461ad71d7286332d5d0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_aed991659ad34b04ae50f6cfd497fc26",
        "IPY_MODEL_e36598ef85aa46f798a1250d4bc18583",
        "IPY_MODEL_e9b06613274a43a296d09fa7e5a7bc87"
       ],
       "layout": "IPY_MODEL_621d3c9a210947419946daab30d3f0db",
       "tabbable": null,
       "tooltip": null
      }
     },
     "ee142b067f13420c830dd0a6fe82e3fb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ee9dae2ea93c45c79139b49ec96a8920": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f08385c307ca4526a7a87cc926d95144": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4e5bb00d820a43c0af0bd06f466c5ecd",
       "placeholder": "​",
       "style": "IPY_MODEL_cb9d303692f8400baa14ce40973058de",
       "tabbable": null,
       "tooltip": null,
       "value": "tokenizer_config.json: 100%"
      }
     },
     "f226540cb5724ff5acb27d06159bba88": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "f2e0f2652f8444198031fdd178a00688": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f43c3c9cfee148efb315d63ab4be162c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_425a30b784bd45689c8f30ea5578ef97",
       "placeholder": "​",
       "style": "IPY_MODEL_48bdb0f952bd4015a3003aed8ba555fd",
       "tabbable": null,
       "tooltip": null,
       "value": " 11.6k/? [00:00&lt;00:00, 1.07MB/s]"
      }
     },
     "f63288878b47411cab84b24330f28cf7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1bb8d9eb9e8b4afba494e51451440615",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_fb428c34ee4440d7aff4679d5d444cbb",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "f6df7d23aee643fb81794119e9c7216d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "f7d239ec79f54c1ab389c8880afe1758": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_74f1cd113d6944678d5a0b6e6d2d90a0",
       "placeholder": "​",
       "style": "IPY_MODEL_01262bb843f149d083b47a44d104961b",
       "tabbable": null,
       "tooltip": null,
       "value": "vocab.txt: "
      }
     },
     "f8933eb228a14b8cb974085d67e64f93": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "fb428c34ee4440d7aff4679d5d444cbb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "fda53290924f4ba8bb9f88951a971b98": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f2e0f2652f8444198031fdd178a00688",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_c48dc064c2e84ab1b20c477e83f1b860",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "ffdb349da3114a18a35463b6452e7e29": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
