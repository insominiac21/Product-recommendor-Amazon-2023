{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "857326d8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T16:50:28.010058Z",
     "iopub.status.busy": "2025-10-01T16:50:28.009682Z",
     "iopub.status.idle": "2025-10-01T16:50:29.962695Z",
     "shell.execute_reply": "2025-10-01T16:50:29.961643Z"
    },
    "papermill": {
     "duration": 1.963849,
     "end_time": "2025-10-01T16:50:29.964465",
     "exception": false,
     "start_time": "2025-10-01T16:50:28.000616",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e39d2335",
   "metadata": {
    "papermill": {
     "duration": 0.00628,
     "end_time": "2025-10-01T16:50:29.978014",
     "exception": false,
     "start_time": "2025-10-01T16:50:29.971734",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Variant: Run with 30,000 sample rows (second phase)\n",
    "\n",
    "This variant includes `SAMPLE_ROWS=30000`. To actually restrict the dataset to 30k rows, add `.sample(SAMPLE_ROWS, random_state=42)` to the cell that loads the CSV (or adapt that read to use SAMPLE_ROWS). The rest of the notebook is unchanged and contains detailed explanations before each original code cell."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ef018437",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T16:50:29.993058Z",
     "iopub.status.busy": "2025-10-01T16:50:29.992621Z",
     "iopub.status.idle": "2025-10-01T16:50:29.996806Z",
     "shell.execute_reply": "2025-10-01T16:50:29.996110Z"
    },
    "papermill": {
     "duration": 0.013541,
     "end_time": "2025-10-01T16:50:29.998211",
     "exception": false,
     "start_time": "2025-10-01T16:50:29.984670",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "SAMPLE_ROWS = 50000  # set to 30000 to use a 30k-sample in the data-loading step\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23a4b9ba",
   "metadata": {
    "papermill": {
     "duration": 0.006704,
     "end_time": "2025-10-01T16:50:30.012792",
     "exception": false,
     "start_time": "2025-10-01T16:50:30.006088",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Amazon Hybrid Recommender — Final Notebook\n",
    "\n",
    "Comprehensive, runnable notebook containing prototype and scale stages, candidate generation, feature engineering, hard-negative mining, LightGBM ranking, diagnostics, and recommendations. This version contains full code and explanatory markdowns. Run cells sequentially. Some cells are resource-heavy (SBERT encoding, ALS, FAISS). The notebook includes CPU fallbacks for environments without `implicit` or `faiss`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ec18283",
   "metadata": {
    "papermill": {
     "duration": 0.006192,
     "end_time": "2025-10-01T16:50:30.025783",
     "exception": false,
     "start_time": "2025-10-01T16:50:30.019591",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## How to run\n",
    "\n",
    "1. Run top-to-bottom. If your environment is offline or lacks `implicit`/`faiss`, the notebook falls back to CPU-friendly alternatives.\n",
    "2. The notebook writes artifact files to `OUT_DIR` (default `/kaggle/working`).\n",
    "3. If you install new packages mid-run (e.g., `implicit`), you may need to restart the kernel.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc5d4f9f",
   "metadata": {
    "papermill": {
     "duration": 0.006454,
     "end_time": "2025-10-01T16:50:30.040032",
     "exception": false,
     "start_time": "2025-10-01T16:50:30.033578",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 3\n",
    "\n",
    "**Purpose:** Imports libraries used later.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Cell 1: Setup — Install-check and imports (non-blocking installs)` → Comment describing intent.\n",
    "- `# Optional: uncomment pip installs if you have internet and want to ensure all libs are present.` → Comment describing intent.\n",
    "- `!pip install -q datasets sentence-transformers scikit-learn lightgbm optuna joblib tqdm pandas scipy faiss-cpu implicit` → Performs a step relevant to data processing or modelling.\n",
    "- `import os, time, warnings, importlib` → Imports module(s).\n",
    "- `import numpy as np, pandas as pd, random, joblib` → Imports module(s).\n",
    "- `from collections import Counter, defaultdict` → Imports module(s).\n",
    "- `from scipy.sparse import csr_matrix` → Imports module(s).\n",
    "- `from tqdm.auto import tqdm` → Imports module(s).\n",
    "- `from math import log2` → Imports module(s).\n",
    "- `warnings.filterwarnings('ignore', category=UserWarning)` → Performs a step relevant to data processing or modelling.\n",
    "- `# Feature list and output directory (kept consistent with original notebook)` → Comment describing intent.\n",
    "- `OUT_DIR = '/kaggle/working'` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "73ab10ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T16:50:30.054674Z",
     "iopub.status.busy": "2025-10-01T16:50:30.054299Z",
     "iopub.status.idle": "2025-10-01T16:51:52.442850Z",
     "shell.execute_reply": "2025-10-01T16:51:52.441937Z"
    },
    "papermill": {
     "duration": 82.39774,
     "end_time": "2025-10-01T16:51:52.444403",
     "exception": false,
     "start_time": "2025-10-01T16:50:30.046663",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m31.4/31.4 MB\u001b[0m \u001b[31m55.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.9/8.9 MB\u001b[0m \u001b[31m104.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m193.6/193.6 kB\u001b[0m \u001b[31m11.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m82.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m79.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m46.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m30.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m12.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m7.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m75.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "bigframes 2.8.0 requires google-cloud-bigquery-storage<3.0.0,>=2.30.0, which is not installed.\r\n",
      "cesium 0.12.4 requires numpy<3.0,>=2.0, but you have numpy 1.26.4 which is incompatible.\r\n",
      "gcsfs 2025.3.2 requires fsspec==2025.3.2, but you have fsspec 2025.3.0 which is incompatible.\r\n",
      "bigframes 2.8.0 requires google-cloud-bigquery[bqstorage,pandas]>=3.31.0, but you have google-cloud-bigquery 3.25.0 which is incompatible.\r\n",
      "bigframes 2.8.0 requires rich<14,>=12.4.4, but you have rich 14.0.0 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0mEnvironment flags — HAS_SBERT: True HAS_IMPLICIT: True HAS_FAISS: True\n"
     ]
    }
   ],
   "source": [
    "# Cell 1: Setup — Install-check and imports (non-blocking installs)\n",
    "# Optional: uncomment pip installs if you have internet and want to ensure all libs are present.\n",
    "!pip install -q datasets sentence-transformers scikit-learn lightgbm optuna joblib tqdm pandas scipy faiss-cpu implicit\n",
    "\n",
    "import os, time, warnings, importlib\n",
    "import numpy as np, pandas as pd, random, joblib\n",
    "from collections import Counter, defaultdict\n",
    "from scipy.sparse import csr_matrix\n",
    "from tqdm.auto import tqdm\n",
    "from math import log2\n",
    "\n",
    "warnings.filterwarnings('ignore', category=UserWarning)\n",
    "\n",
    "# Feature list and output directory (kept consistent with original notebook)\n",
    "OUT_DIR = '/kaggle/working'\n",
    "feature_names = ['sem_score','sem_rank','als_score','als_rank','svd_score','svd_rank','pop_log','pop_rank','recency_days','title_len','txt_len','user_mean_rating','user_activity_count']\n",
    "feat_cols = feature_names\n",
    "now_ts = int(time.time() * 1000)\n",
    "\n",
    "# Flags for optional libs — later cells use these flags to decide runtime paths\n",
    "HAS_IMPLICIT = importlib.util.find_spec('implicit') is not None\n",
    "HAS_FAISS = importlib.util.find_spec('faiss') is not None\n",
    "HAS_SBERT = importlib.util.find_spec('sentence_transformers') is not None\n",
    "\n",
    "print('Environment flags — HAS_SBERT:', HAS_SBERT, 'HAS_IMPLICIT:', HAS_IMPLICIT, 'HAS_FAISS:', HAS_FAISS)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0a98681",
   "metadata": {
    "papermill": {
     "duration": 0.030806,
     "end_time": "2025-10-01T16:51:52.506909",
     "exception": false,
     "start_time": "2025-10-01T16:51:52.476103",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1 — Prototype Data Load (10k)\n",
    "\n",
    "Load a small streaming sample (10k rows) from the Hugging Face Amazon Reviews dataset to iterate quickly and debug logic. This cell normalizes timestamps to milliseconds, drops records missing `asin` or `reviewerID`, and writes `sampled_reviews_10k.parquet` to `OUT_DIR`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "221b2fde",
   "metadata": {
    "papermill": {
     "duration": 0.03071,
     "end_time": "2025-10-01T16:51:52.568697",
     "exception": false,
     "start_time": "2025-10-01T16:51:52.537987",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 5\n",
    "\n",
    "**Purpose:** Imports libraries used later. Saves results or models to disk.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Prototype Data Load (10k)` → Comment describing intent.\n",
    "- `SAMPLE_N = 10000` → Performs a step relevant to data processing or modelling.\n",
    "- `HF_DATASET = 'McAuley-Lab/Amazon-Reviews-2023'` → Performs a step relevant to data processing or modelling.\n",
    "- `HF_CONFIG = 'raw_review_Electronics'` → Performs a step relevant to data processing or modelling.\n",
    "- `OUT_DIR = OUT_DIR if 'OUT_DIR' in globals() else '/kaggle/working'` → Performs a step relevant to data processing or modelling.\n",
    "- `from datasets import load_dataset` → Imports module(s).\n",
    "- `rows = []` → Performs a step relevant to data processing or modelling.\n",
    "- `cnt = 0` → Performs a step relevant to data processing or modelling.\n",
    "- `t0 = time.time()` → Performs a step relevant to data processing or modelling.\n",
    "- `ds_iter = load_dataset(HF_DATASET, HF_CONFIG, split='full', streaming=True, trust_remote_code=True)` → Performs a step relevant to data processing or modelling.\n",
    "- `for rec in ds_iter:` → Performs a step relevant to data processing or modelling.\n",
    "- `try:` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b3e6f422",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T16:51:52.631892Z",
     "iopub.status.busy": "2025-10-01T16:51:52.631389Z",
     "iopub.status.idle": "2025-10-01T16:51:59.178835Z",
     "shell.execute_reply": "2025-10-01T16:51:59.177844Z"
    },
    "papermill": {
     "duration": 6.580777,
     "end_time": "2025-10-01T16:51:59.180267",
     "exception": false,
     "start_time": "2025-10-01T16:51:52.599490",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f8268315452a4fb4a23fe7cbf9a84827",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "README.md: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8c3c265bd9634412823f962b7c3d1c1e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Amazon-Reviews-2023.py: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded 10000 rows. Saved to /kaggle/working/sampled_reviews_10k.parquet\n"
     ]
    }
   ],
   "source": [
    "# Prototype Data Load (10k)\n",
    "SAMPLE_N = 10000\n",
    "HF_DATASET = 'McAuley-Lab/Amazon-Reviews-2023'\n",
    "HF_CONFIG = 'raw_review_Electronics'\n",
    "OUT_DIR = OUT_DIR if 'OUT_DIR' in globals() else '/kaggle/working'\n",
    "\n",
    "from datasets import load_dataset\n",
    "\n",
    "rows = []\n",
    "cnt = 0\n",
    "t0 = time.time()\n",
    "ds_iter = load_dataset(HF_DATASET, HF_CONFIG, split='full', streaming=True, trust_remote_code=True)\n",
    "for rec in ds_iter:\n",
    "    try:\n",
    "        asin = rec.get('asin') or rec.get('parent_asin')\n",
    "        user = rec.get('user_id') or rec.get('reviewerID')\n",
    "        text = rec.get('text') or rec.get('reviewText') or ''\n",
    "        overall = rec.get('rating') or rec.get('overall')\n",
    "        ts = rec.get('timestamp') or rec.get('unixReviewTime') or 0\n",
    "        helpful = rec.get('helpful_vote') or 0\n",
    "        if asin is None or user is None: \n",
    "            continue\n",
    "        ts_i = int(ts); ts_i = ts_i * 1000 if ts_i < 10**10 else ts_i\n",
    "        rows.append({'asin': str(asin), 'reviewerID': str(user), 'reviewText': str(text), 'overall': float(overall) if overall is not None else float('nan'), 'unixReviewTime': int(ts_i), 'helpful_vote': int(helpful)})\n",
    "        cnt += 1\n",
    "        if cnt >= SAMPLE_N: break\n",
    "    except Exception:\n",
    "        continue\n",
    "df = pd.DataFrame(rows)\n",
    "os.makedirs(OUT_DIR, exist_ok=True)\n",
    "df.to_parquet(f\"{OUT_DIR}/sampled_reviews_10k.parquet\", index=False)\n",
    "print('Loaded', len(df), 'rows. Saved to', f\"{OUT_DIR}/sampled_reviews_10k.parquet\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7cd34e0",
   "metadata": {
    "papermill": {
     "duration": 0.094865,
     "end_time": "2025-10-01T16:51:59.306911",
     "exception": false,
     "start_time": "2025-10-01T16:51:59.212046",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Build maps and interaction (prototype)\n",
    "\n",
    "Create `item_map`, `user_map` and the sparse interaction matrix used by ALS and candidate generation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70d1f0c6",
   "metadata": {
    "papermill": {
     "duration": 0.030916,
     "end_time": "2025-10-01T16:51:59.369124",
     "exception": false,
     "start_time": "2025-10-01T16:51:59.338208",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 7\n",
    "\n",
    "**Purpose:** Performs an operation relevant to the pipeline (see code).\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Build maps and interaction (prototype)` → Comment describing intent.\n",
    "- `unique_asins = sorted(df['asin'].unique().tolist())` → Performs a step relevant to data processing or modelling.\n",
    "- `unique_users = sorted(df['reviewerID'].unique().tolist())` → Performs a step relevant to data processing or modelling.\n",
    "- `item_map = {a:i for i,a in enumerate(unique_asins)}` → Performs a step relevant to data processing or modelling.\n",
    "- `inv_item_map = {i:a for a,i in item_map.items()}` → Performs a step relevant to data processing or modelling.\n",
    "- `user_map = {u:i for i,u in enumerate(unique_users)}` → Performs a step relevant to data processing or modelling.\n",
    "- `inv_user_map = {i:u for u,i in user_map.items()}` → Performs a step relevant to data processing or modelling.\n",
    "- `n_users, n_items = len(user_map), len(item_map)` → Performs a step relevant to data processing or modelling.\n",
    "- `u_idx = []; i_idx = []; data = []` → Performs a step relevant to data processing or modelling.\n",
    "- `for _, r in df.iterrows():` → Performs a step relevant to data processing or modelling.\n",
    "- `try:` → Performs a step relevant to data processing or modelling.\n",
    "- `u = user_map[r['reviewerID']]; i = item_map[r['asin']]` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9904bd35",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T16:51:59.435372Z",
     "iopub.status.busy": "2025-10-01T16:51:59.434537Z",
     "iopub.status.idle": "2025-10-01T16:51:59.941796Z",
     "shell.execute_reply": "2025-10-01T16:51:59.940863Z"
    },
    "papermill": {
     "duration": 0.541773,
     "end_time": "2025-10-01T16:51:59.943319",
     "exception": false,
     "start_time": "2025-10-01T16:51:59.401546",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Maps built: 1561 users x 8907 items\n"
     ]
    }
   ],
   "source": [
    "# Build maps and interaction (prototype)\n",
    "unique_asins = sorted(df['asin'].unique().tolist())\n",
    "unique_users = sorted(df['reviewerID'].unique().tolist())\n",
    "item_map = {a:i for i,a in enumerate(unique_asins)}\n",
    "inv_item_map = {i:a for a,i in item_map.items()}\n",
    "user_map = {u:i for i,u in enumerate(unique_users)}\n",
    "inv_user_map = {i:u for u,i in user_map.items()}\n",
    "\n",
    "n_users, n_items = len(user_map), len(item_map)\n",
    "u_idx = []; i_idx = []; data = []\n",
    "for _, r in df.iterrows():\n",
    "    try:\n",
    "        u = user_map[r['reviewerID']]; i = item_map[r['asin']]\n",
    "        w = float(r['overall']) if not pd.isna(r['overall']) else 1.0 + int(r.get('helpful_vote',0))\n",
    "        u_idx.append(u); i_idx.append(i); data.append(w)\n",
    "    except KeyError:\n",
    "        continue\n",
    "\n",
    "interaction = csr_matrix((data, (u_idx, i_idx)), shape=(n_users, n_items)).tocsr()\n",
    "item_user_matrix = interaction.T.tocsr()\n",
    "pop_counts = Counter(df['asin'])\n",
    "test_df_proto = df.groupby('reviewerID').tail(1).reset_index(drop=True)\n",
    "print('Maps built:', n_users, 'users x', n_items, 'items')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25fbf46a",
   "metadata": {
    "papermill": {
     "duration": 0.033614,
     "end_time": "2025-10-01T16:52:00.008725",
     "exception": false,
     "start_time": "2025-10-01T16:51:59.975111",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 2 — Helper functions & Feature Builder\n",
    "\n",
    "This cell defines helper utilities used throughout the notebook:\n",
    "\n",
    "- `user_profile_emb`: compute a user's profile embedding (mean of item embeddings) with safe fallbacks.\n",
    "- `build_candidates_union`: aggregate candidates from semantic nearest neighbors, ALS, SVD, popularity and MF neighbors.\n",
    "- `build_features_for_candidates`: compute features used by the LightGBM reranker.\n",
    "\n",
    "All functions include robust error handling so the notebook runs even if optional libraries are missing."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "260ed798",
   "metadata": {
    "papermill": {
     "duration": 0.031727,
     "end_time": "2025-10-01T16:52:00.074028",
     "exception": false,
     "start_time": "2025-10-01T16:52:00.042301",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 9\n",
    "\n",
    "**Purpose:** Imports libraries used later. Defines function(s) used downstream.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Helper functions and feature builder (robust)` → Comment describing intent.\n",
    "- `import numpy as np, pandas as pd, math` → Imports module(s).\n",
    "- `from collections import defaultdict` → Imports module(s).\n",
    "- `# Ensure inv maps exist` → Comment describing intent.\n",
    "- `if 'inv_item_map' not in globals(): inv_item_map = {}` → Performs a step relevant to data processing or modelling.\n",
    "- `if 'inv_user_map' not in globals(): inv_user_map = {}` → Performs a step relevant to data processing or modelling.\n",
    "- `def user_profile_emb(uidx, emb_array, df_data, i_map, u_map):` → Performs a step relevant to data processing or modelling.\n",
    "- `# uid -> user string` → Comment describing intent.\n",
    "- `uid = None` → Performs a step relevant to data processing or modelling.\n",
    "- `if 'inv_user_map' in globals() and uidx in inv_user_map:` → Performs a step relevant to data processing or modelling.\n",
    "- `uid = inv_user_map.get(uidx)` → Performs a step relevant to data processing or modelling.\n",
    "- `if uid is None:` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1c53ba22",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T16:52:00.138937Z",
     "iopub.status.busy": "2025-10-01T16:52:00.138626Z",
     "iopub.status.idle": "2025-10-01T16:52:00.165753Z",
     "shell.execute_reply": "2025-10-01T16:52:00.164992Z"
    },
    "papermill": {
     "duration": 0.06136,
     "end_time": "2025-10-01T16:52:00.167069",
     "exception": false,
     "start_time": "2025-10-01T16:52:00.105709",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Helper functions and feature builder (robust)\n",
    "import numpy as np, pandas as pd, math\n",
    "from collections import defaultdict\n",
    "\n",
    "# Ensure inv maps exist\n",
    "if 'inv_item_map' not in globals(): inv_item_map = {}\n",
    "if 'inv_user_map' not in globals(): inv_user_map = {}\n",
    "\n",
    "def user_profile_emb(uidx, emb_array, df_data, i_map, u_map):\n",
    "    # uid -> user string\n",
    "    uid = None\n",
    "    if 'inv_user_map' in globals() and uidx in inv_user_map:\n",
    "        uid = inv_user_map.get(uidx)\n",
    "    if uid is None:\n",
    "        # fallback: if uidx already a string, try that\n",
    "        uid = uidx if isinstance(uidx, str) else None\n",
    "    if uid is None:\n",
    "        return emb_array.mean(axis=0)\n",
    "    item_list = df_data[df_data['reviewerID']==uid]['asin'].map(i_map).dropna().astype(int).tolist()\n",
    "    if item_list and len(item_list)>0:\n",
    "        return emb_array[item_list].mean(axis=0)\n",
    "    else:\n",
    "        return emb_array.mean(axis=0)\n",
    "\n",
    "def build_candidates_union(uidx, emb_array, als_model, svd_facs, i_map, p_counts, u_map, df_data, inter_mat, top_sem=500, top_als=200, top_svd=200, top_pop=200, top_mf=200, max_cands=2000):\n",
    "    candidates = []; seen = set()\n",
    "    # semantic\n",
    "    if emb_array is not None:\n",
    "        try:\n",
    "            up = user_profile_emb(uidx, emb_array, df_data, i_map, u_map).astype('float32')\n",
    "            un = up / (np.linalg.norm(up) + 1e-9)\n",
    "            scores = emb_array.dot(un)\n",
    "            sem_idxs = np.argsort(-scores)[:top_sem]\n",
    "            for it in map(int, sem_idxs):\n",
    "                if it not in seen: seen.add(it); candidates.append(it)\n",
    "        except Exception:\n",
    "            pass\n",
    "    # ALS recommend\n",
    "    if als_model is not None:\n",
    "        try:\n",
    "            rec = als_model.recommend(uidx, inter_mat[uidx], N=top_als)\n",
    "            als_list = []\n",
    "            if isinstance(rec, list) and len(rec)>0 and isinstance(rec[0], (list,tuple)):\n",
    "                als_list = [int(r[0]) for r in rec]\n",
    "            elif isinstance(rec, tuple) and len(rec)==2:\n",
    "                als_list = [int(x) for x in rec[0]]\n",
    "            else:\n",
    "                try:\n",
    "                    als_list = [int(r[0]) if isinstance(r,(list,tuple)) else int(r) for r in rec]\n",
    "                except Exception:\n",
    "                    als_list = []\n",
    "            for it in als_list:\n",
    "                if it not in seen: seen.add(it); candidates.append(it)\n",
    "        except Exception:\n",
    "            pass\n",
    "    # SVD global similarity\n",
    "    if svd_facs is not None:\n",
    "        try:\n",
    "            user_vec = svd_facs.mean(axis=0)\n",
    "            svd_scores = svd_facs.dot(user_vec)\n",
    "            svd_idx = np.argsort(-svd_scores)[:top_svd]\n",
    "            for it in map(int, svd_idx):\n",
    "                if it not in seen: seen.add(it); candidates.append(it)\n",
    "        except Exception:\n",
    "            pass\n",
    "    # popularity\n",
    "    try:\n",
    "        pop_list = [i_map.get(a) for a,_ in p_counts.most_common(top_pop) if a in i_map]\n",
    "        for it in pop_list:\n",
    "            if it not in seen: seen.add(it); candidates.append(it)\n",
    "    except Exception:\n",
    "        pass\n",
    "    # MF neighbors (approx via item factors if available)\n",
    "    try:\n",
    "        if als_model is not None and hasattr(als_model, 'item_factors'):\n",
    "            item_facs = als_model.item_factors\n",
    "            user_items = inter_mat[uidx].indices.tolist() if hasattr(inter_mat[uidx], 'indices') else []\n",
    "            for it in user_items[:5]:\n",
    "                vec = item_facs[it]\n",
    "                sim = item_facs.dot(vec)\n",
    "                neigh = np.argsort(-sim)[:top_mf]\n",
    "                for ni in map(int, neigh):\n",
    "                    if ni not in seen: seen.add(ni); candidates.append(ni)\n",
    "    except Exception:\n",
    "        pass\n",
    "    return candidates[:max_cands]\n",
    "\n",
    "def build_features_for_candidates(uidx, cands, emb_array, als_facs, als_u_facs, svd_facs, df_data, i_map, u_map, p_counts, feat_names, now_ts):\n",
    "    n = len(cands); X = np.zeros((n, len(feat_names)), dtype=float)\n",
    "    # user emb\n",
    "    try:\n",
    "        uemb = user_profile_emb(uidx, emb_array, df_data, i_map, u_map); uembn = uemb/(np.linalg.norm(uemb)+1e-9)\n",
    "    except Exception:\n",
    "        uembn = emb_array.mean(axis=0); uembn = uembn/(np.linalg.norm(uembn)+1e-9)\n",
    "    # sem\n",
    "    try:\n",
    "        sem_scores = (emb_array[cands] * uembn).sum(axis=1)\n",
    "        X[:, feat_names.index('sem_score')] = sem_scores\n",
    "        ranks = np.empty(n, dtype=int); ranks[np.argsort(-sem_scores)] = np.arange(n); X[:, feat_names.index('sem_rank')] = ranks\n",
    "    except Exception:\n",
    "        pass\n",
    "    # als\n",
    "    try:\n",
    "        if als_facs is not None and als_u_facs is not None:\n",
    "            uf = als_u_facs[uidx] if uidx < als_u_facs.shape[0] else als_facs.mean(axis=0)\n",
    "            als_scores = np.dot(als_facs[cands], uf)\n",
    "            X[:, feat_names.index('als_score')] = als_scores\n",
    "            ranks = np.empty(n, dtype=int); ranks[np.argsort(-als_scores)] = np.arange(n); X[:, feat_names.index('als_rank')] = ranks\n",
    "    except Exception:\n",
    "        pass\n",
    "    # svd\n",
    "    try:\n",
    "        if svd_facs is not None:\n",
    "            user_fact = svd_facs.mean(axis=0); svd_scores = svd_facs[cands].dot(user_fact)\n",
    "            X[:, feat_names.index('svd_score')] = svd_scores; ranks = np.empty(n, dtype=int); ranks[np.argsort(-svd_scores)] = np.arange(n); X[:, feat_names.index('svd_rank')] = ranks\n",
    "    except Exception:\n",
    "        pass\n",
    "    # pop & recency\n",
    "    try:\n",
    "        pop_vals = np.array([p_counts.get(inv_item_map.get(i, ''), 0) for i in cands], dtype=float)\n",
    "        X[:, feat_names.index('pop_log')] = np.log1p(pop_vals); ranks = np.empty(n,dtype=int); ranks[np.argsort(-pop_vals)] = np.arange(n); X[:, feat_names.index('pop_rank')] = ranks\n",
    "        recency_ms = np.array([item_last_ts.get(inv_item_map.get(i, ''), 0) for i in cands], dtype=float); X[:, feat_names.index('recency_days')] = ((now_ts - recency_ms)/(1000*60*60*24)).clip(min=0)\n",
    "    except Exception:\n",
    "        pass\n",
    "    # text & user stats\n",
    "    try:\n",
    "        title_len=[]; txt_len=[]\n",
    "        for idx in cands:\n",
    "            asin = inv_item_map.get(idx, ''); rows_sub = df_data[df_data['asin']==asin]\n",
    "            title = rows_sub['title'].iloc[0] if ('title' in rows_sub.columns and len(rows_sub)>0 and pd.notna(rows_sub['title'].iloc[0])) else ''\n",
    "            text = rows_sub['reviewText'].iloc[0] if ('reviewText' in rows_sub.columns and len(rows_sub)>0 and pd.notna(rows_sub['reviewText'].iloc[0])) else ''\n",
    "            title_len.append(len(str(title))); txt_len.append(len(str(text)))\n",
    "        X[:, feat_names.index('title_len')] = np.array(title_len); X[:, feat_names.index('txt_len')] = np.array(txt_len)\n",
    "        uid = inv_user_map.get(uidx, None); user_rows = df_data[df_data['reviewerID']==uid] if uid else pd.DataFrame()\n",
    "        X[:, feat_names.index('user_mean_rating')] = float(user_rows['overall'].mean() if len(user_rows)>0 else 0.0); X[:, feat_names.index('user_activity_count')] = float(len(user_rows))\n",
    "    except Exception:\n",
    "        pass\n",
    "    return {'X': X, 'cands': cands, 'feature_names': feat_names}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e827d022",
   "metadata": {
    "papermill": {
     "duration": 0.031066,
     "end_time": "2025-10-01T16:52:00.229981",
     "exception": false,
     "start_time": "2025-10-01T16:52:00.198915",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 3 — Hard-negative mining (prototype)\n",
    "\n",
    "Create meta-training pairs (pos/neg) for the LTR model. This prototype uses a combination of hard negatives (top-ranked non-pos by ALS/SVD) and random negatives."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43729439",
   "metadata": {
    "papermill": {
     "duration": 0.030881,
     "end_time": "2025-10-01T16:52:00.292203",
     "exception": false,
     "start_time": "2025-10-01T16:52:00.261322",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 11\n",
    "\n",
    "**Purpose:** Imports libraries used later.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Hard-negative mining (prototype)` → Comment describing intent.\n",
    "- `import random` → Imports module(s).\n",
    "- `USERS_TO_USE = 300; HARD_NEG_PER_POS = 60; RANDOM_NEG_PER_POS = 5` → Performs a step relevant to data processing or modelling.\n",
    "- `meta_rows = []; all_users = list(df['reviewerID'].unique()); sample_users = all_users[:min(USERS_TO_USE, len(all_users))]` → Performs a step relevant to data processing or modelling.\n",
    "- `for uid in tqdm(sample_users, desc='Building Meta Prototype'):` → Performs a step relevant to data processing or modelling.\n",
    "- `uidx = user_map.get(uid);` → Performs a step relevant to data processing or modelling.\n",
    "- `if uidx is None: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `cands = build_candidates_union(uidx, None, None, None, item_map, pop_counts, user_map, df, interaction, top_sem=500, top_als=200, top_svd=200, top_pop=200, max_cands=1000)` → Performs a step relevant to data processing or modelling.\n",
    "- `if not cands: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `mf = build_features_for_candidates(uidx, cands, np.zeros((len(item_map), 768)), None, None, None, df, item_map, user_map, pop_counts, feature_names, now_ts)` → Performs a step relevant to data processing or modelling.\n",
    "- `Xc = mf['X']; cidx = mf['cands']; fns = mf['feature_names']` → Performs a step relevant to data processing or modelling.\n",
    "- `true_asins = test_df_proto[test_df_proto['reviewerID']==uid]['asin'].tolist(); true_idxs = [item_map[a] for a in true_asins if a in item_map]` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "67338042",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T16:52:00.356542Z",
     "iopub.status.busy": "2025-10-01T16:52:00.356191Z",
     "iopub.status.idle": "2025-10-01T16:53:12.724654Z",
     "shell.execute_reply": "2025-10-01T16:53:12.723590Z"
    },
    "papermill": {
     "duration": 72.403105,
     "end_time": "2025-10-01T16:53:12.726340",
     "exception": false,
     "start_time": "2025-10-01T16:52:00.323235",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7d92e3f8cfc44eea80ebe570914295e5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Building Meta Prototype:   0%|          | 0/300 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "meta_df_small shape: (2640, 16)\n"
     ]
    }
   ],
   "source": [
    "# Hard-negative mining (prototype)\n",
    "import random\n",
    "USERS_TO_USE = 300; HARD_NEG_PER_POS = 60; RANDOM_NEG_PER_POS = 5\n",
    "meta_rows = []; all_users = list(df['reviewerID'].unique()); sample_users = all_users[:min(USERS_TO_USE, len(all_users))]\n",
    "for uid in tqdm(sample_users, desc='Building Meta Prototype'):\n",
    "    uidx = user_map.get(uid); \n",
    "    if uidx is None: continue\n",
    "    cands = build_candidates_union(uidx, None, None, None, item_map, pop_counts, user_map, df, interaction, top_sem=500, top_als=200, top_svd=200, top_pop=200, max_cands=1000)\n",
    "    if not cands: continue\n",
    "    mf = build_features_for_candidates(uidx, cands, np.zeros((len(item_map), 768)), None, None, None, df, item_map, user_map, pop_counts, feature_names, now_ts)\n",
    "    Xc = mf['X']; cidx = mf['cands']; fns = mf['feature_names']\n",
    "    true_asins = test_df_proto[test_df_proto['reviewerID']==uid]['asin'].tolist(); true_idxs = [item_map[a] for a in true_asins if a in item_map]\n",
    "    if not true_idxs: continue\n",
    "    als_col = Xc[:, fns.index('als_score')] if 'als_score' in fns else np.zeros(Xc.shape[0])\n",
    "    svd_col = Xc[:, fns.index('svd_score')] if 'svd_score' in fns else np.zeros(Xc.shape[0])\n",
    "    hard_score = 0.5 * als_col + 0.5 * svd_col\n",
    "    cand_arr = np.array(cidx); pos_mask = np.isin(cand_arr, true_idxs); non_pos_idx = np.where(~pos_mask)[0]\n",
    "    if len(non_pos_idx)==0: continue\n",
    "    ordering = non_pos_idx[np.argsort(-hard_score[non_pos_idx])]; hard_negs_idx = ordering[:HARD_NEG_PER_POS].tolist()\n",
    "    remaining = list(set(non_pos_idx.tolist()) - set(hard_negs_idx)); random_negs_idx = random.sample(remaining, min(RANDOM_NEG_PER_POS, len(remaining))) if remaining else []\n",
    "    for t in true_idxs:\n",
    "        pos_loc = np.where(cand_arr==t)[0]; \n",
    "        if len(pos_loc)==0: continue\n",
    "        for p in pos_loc:\n",
    "            row = {'user_idx': uidx, 'item_idx': int(cidx[p]), 'label': 1}\n",
    "            for j,fn in enumerate(fns):\n",
    "                try: row[fn] = float(Xc[p,j])\n",
    "                except: row[fn] = 0.0\n",
    "            meta_rows.append(row)\n",
    "            for idx in hard_negs_idx:\n",
    "                rn = {'user_idx': uidx, 'item_idx': int(cidx[idx]), 'label': 0}\n",
    "                for j,fn in enumerate(fns):\n",
    "                    try: rn[fn] = float(Xc[idx,j])\n",
    "                    except: rn[fn] = 0.0\n",
    "                meta_rows.append(rn)\n",
    "            for idx in random_negs_idx:\n",
    "                rr = {'user_idx': uidx, 'item_idx': int(cidx[idx]), 'label': 0}\n",
    "                for j,fn in enumerate(fns):\n",
    "                    try: rr[fn] = float(Xc[idx,j])\n",
    "                    except: rr[fn] = 0.0\n",
    "                meta_rows.append(rr)\n",
    "meta_df_small = pd.DataFrame(meta_rows).sample(frac=1.0, random_state=42).reset_index(drop=True)\n",
    "meta_df_small.to_parquet(f\"{OUT_DIR}/meta_enhanced_small.parquet\", index=False)\n",
    "print('meta_df_small shape:', meta_df_small.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0da36f7",
   "metadata": {
    "papermill": {
     "duration": 0.032065,
     "end_time": "2025-10-01T16:53:12.791277",
     "exception": false,
     "start_time": "2025-10-01T16:53:12.759212",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 4 — LightGBM Tuning & Prototype Training\n",
    "\n",
    "Use Optuna to tune lambdarank hyperparameters. Important: set `feature_pre_filter=False` so trials changing `min_data_in_leaf` don't error."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80921d5c",
   "metadata": {
    "papermill": {
     "duration": 0.031196,
     "end_time": "2025-10-01T16:53:12.854888",
     "exception": false,
     "start_time": "2025-10-01T16:53:12.823692",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 13\n",
    "\n",
    "**Purpose:** Imports libraries used later. Defines function(s) used downstream. Trains a model / fits parameters. Produces predictions on data.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# LightGBM tuning & training (prototype)` → Comment describing intent.\n",
    "- `import lightgbm as lgb, optuna` → Imports module(s).\n",
    "- `from sklearn.model_selection import train_test_split` → Imports module(s).\n",
    "- `from math import log2` → Imports module(s).\n",
    "- `feat_cols = [c for c in meta_df_small.columns if c not in ('user_idx','item_idx','label')]` → Performs a step relevant to data processing or modelling.\n",
    "- `users = meta_df_small['user_idx'].unique(); train_u, valid_u = train_test_split(list(users), test_size=0.20, random_state=42)` → Performs a step relevant to data processing or modelling.\n",
    "- `tr_mask = meta_df_small['user_idx'].isin(train_u); val_mask = meta_df_small['user_idx'].isin(valid_u)` → Performs a step relevant to data processing or modelling.\n",
    "- `X_tr = meta_df_small[tr_mask][feat_cols].values; y_tr = meta_df_small[tr_mask]['label'].values` → Performs a step relevant to data processing or modelling.\n",
    "- `gr_tr = meta_df_small[tr_mask].groupby('user_idx', sort=False).size().astype(int).values` → Groups and aggregates data.\n",
    "- `X_val = meta_df_small[val_mask][feat_cols].values; y_val = meta_df_small[val_mask]['label'].values` → Performs a step relevant to data processing or modelling.\n",
    "- `gr_val = meta_df_small[val_mask].groupby('user_idx', sort=False).size().astype(int).values` → Groups and aggregates data.\n",
    "- `dtrain = lgb.Dataset(X_tr, label=y_tr, group=gr_tr); dval = lgb.Dataset(X_val, label=y_val, group=gr_val, reference=dtrain)` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c2e6d440",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T16:53:12.920265Z",
     "iopub.status.busy": "2025-10-01T16:53:12.919458Z",
     "iopub.status.idle": "2025-10-01T16:53:19.730376Z",
     "shell.execute_reply": "2025-10-01T16:53:19.729490Z"
    },
    "papermill": {
     "duration": 6.845682,
     "end_time": "2025-10-01T16:53:19.731848",
     "exception": false,
     "start_time": "2025-10-01T16:53:12.886166",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-10-01 16:53:18,283] A new study created in memory with name: no-name-064e662f-d58e-49e3-8ad3-8c73a5dfb756\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3ef7f0d58c0f4a6a9515f76c7fa9cc39",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/20 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[2]\tvalid_0's ndcg@10: 0.680692\n",
      "[I 2025-10-01 16:53:18,391] Trial 0 finished with value: -0.0 and parameters: {'learning_rate': 0.0202604814015783, 'num_leaves': 42, 'min_data_in_leaf': 35, 'feature_fraction': 0.7348757495734998}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[24]\tvalid_0's ndcg@10: 0.71854\n",
      "[I 2025-10-01 16:53:18,445] Trial 1 finished with value: -0.0 and parameters: {'learning_rate': 0.0016470567103002523, 'num_leaves': 66, 'min_data_in_leaf': 137, 'feature_fraction': 0.7753786615963891}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[9]\tvalid_0's ndcg@10: 0.746827\n",
      "[I 2025-10-01 16:53:18,493] Trial 2 finished with value: -0.0 and parameters: {'learning_rate': 0.003914718031335473, 'num_leaves': 101, 'min_data_in_leaf': 102, 'feature_fraction': 0.74661246112991}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[91]\tvalid_0's ndcg@10: 0.730543\n",
      "[I 2025-10-01 16:53:18,580] Trial 3 finished with value: -0.0 and parameters: {'learning_rate': 0.0017190689220848146, 'num_leaves': 78, 'min_data_in_leaf': 125, 'feature_fraction': 0.7968147686626081}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[1]\tvalid_0's ndcg@10: 0.782772\n",
      "[I 2025-10-01 16:53:18,659] Trial 4 finished with value: -0.0 and parameters: {'learning_rate': 0.058011269661954905, 'num_leaves': 117, 'min_data_in_leaf': 20, 'feature_fraction': 0.9282542149115017}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[19]\tvalid_0's ndcg@10: 0.743551\n",
      "[I 2025-10-01 16:53:18,708] Trial 5 finished with value: -0.0 and parameters: {'learning_rate': 0.013013549926772424, 'num_leaves': 55, 'min_data_in_leaf': 173, 'feature_fraction': 0.8336426246641788}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[23]\tvalid_0's ndcg@10: 0.689888\n",
      "[I 2025-10-01 16:53:18,778] Trial 6 finished with value: -0.0 and parameters: {'learning_rate': 0.007224150285022497, 'num_leaves': 86, 'min_data_in_leaf': 53, 'feature_fraction': 0.646140354520071}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[11]\tvalid_0's ndcg@10: 0.720727\n",
      "[I 2025-10-01 16:53:18,826] Trial 7 finished with value: -0.0 and parameters: {'learning_rate': 0.002336584590783185, 'num_leaves': 94, 'min_data_in_leaf': 119, 'feature_fraction': 0.7689076002876328}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[37]\tvalid_0's ndcg@10: 0.673145\n",
      "[I 2025-10-01 16:53:18,878] Trial 8 finished with value: -0.0 and parameters: {'learning_rate': 0.017602052174331934, 'num_leaves': 105, 'min_data_in_leaf': 182, 'feature_fraction': 0.9851919167235845}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[54]\tvalid_0's ndcg@10: 0.74022\n",
      "[I 2025-10-01 16:53:18,941] Trial 9 finished with value: -0.0 and parameters: {'learning_rate': 0.0019107638685355514, 'num_leaves': 78, 'min_data_in_leaf': 165, 'feature_fraction': 0.6254043877722623}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[2]\tvalid_0's ndcg@10: 0.67947\n",
      "[I 2025-10-01 16:53:19,015] Trial 10 finished with value: -0.0 and parameters: {'learning_rate': 0.058110289763185066, 'num_leaves': 31, 'min_data_in_leaf': 64, 'feature_fraction': 0.5036138590300409}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[1]\tvalid_0's ndcg@10: 0.730777\n",
      "[I 2025-10-01 16:53:19,100] Trial 11 finished with value: -0.0 and parameters: {'learning_rate': 0.02643769398005751, 'num_leaves': 53, 'min_data_in_leaf': 14, 'feature_fraction': 0.6634019823177835}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[6]\tvalid_0's ndcg@10: 0.81824\n",
      "[I 2025-10-01 16:53:19,165] Trial 12 finished with value: -0.0 and parameters: {'learning_rate': 0.0010092355578625836, 'num_leaves': 51, 'min_data_in_leaf': 84, 'feature_fraction': 0.8748126485004402}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[9]\tvalid_0's ndcg@10: 0.786353\n",
      "[I 2025-10-01 16:53:19,233] Trial 13 finished with value: -0.0 and parameters: {'learning_rate': 0.007416806739771123, 'num_leaves': 32, 'min_data_in_leaf': 148, 'feature_fraction': 0.7129839373240007}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[3]\tvalid_0's ndcg@10: 0.822652\n",
      "[I 2025-10-01 16:53:19,290] Trial 14 finished with value: -0.0 and parameters: {'learning_rate': 0.03094538883517214, 'num_leaves': 65, 'min_data_in_leaf': 200, 'feature_fraction': 0.5242151081154378}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[33]\tvalid_0's ndcg@10: 0.713206\n",
      "[I 2025-10-01 16:53:19,394] Trial 15 finished with value: -0.0 and parameters: {'learning_rate': 0.004779137818177202, 'num_leaves': 41, 'min_data_in_leaf': 43, 'feature_fraction': 0.8587075777447597}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[13]\tvalid_0's ndcg@10: 0.723853\n",
      "[I 2025-10-01 16:53:19,461] Trial 16 finished with value: -0.0 and parameters: {'learning_rate': 0.024982210806981736, 'num_leaves': 69, 'min_data_in_leaf': 128, 'feature_fraction': 0.7080623444203472}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[2]\tvalid_0's ndcg@10: 0.778807\n",
      "[I 2025-10-01 16:53:19,530] Trial 17 finished with value: -0.0 and parameters: {'learning_rate': 0.08922328296386038, 'num_leaves': 65, 'min_data_in_leaf': 83, 'feature_fraction': 0.6147708448607525}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[4]\tvalid_0's ndcg@10: 0.744687\n",
      "[I 2025-10-01 16:53:19,588] Trial 18 finished with value: -0.0 and parameters: {'learning_rate': 0.01099506182429342, 'num_leaves': 40, 'min_data_in_leaf': 147, 'feature_fraction': 0.8167736784663973}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[4]\tvalid_0's ndcg@10: 0.775507\n",
      "[I 2025-10-01 16:53:19,657] Trial 19 finished with value: -0.0 and parameters: {'learning_rate': 0.004120807678822383, 'num_leaves': 44, 'min_data_in_leaf': 96, 'feature_fraction': 0.5570646000284367}. Best is trial 0 with value: -0.0.\n",
      "Best params: {'learning_rate': 0.0202604814015783, 'num_leaves': 42, 'min_data_in_leaf': 35, 'feature_fraction': 0.7348757495734998}\n",
      "Training until validation scores don't improve for 50 rounds\n",
      "Early stopping, best iteration is:\n",
      "[2]\tvalid_0's ndcg@10: 0.680692\tvalid_0's ndcg@50: 0.680692\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['/kaggle/working/lgbm_reranker_prototype.joblib']"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# LightGBM tuning & training (prototype)\n",
    "import lightgbm as lgb, optuna\n",
    "from sklearn.model_selection import train_test_split\n",
    "from math import log2\n",
    "\n",
    "feat_cols = [c for c in meta_df_small.columns if c not in ('user_idx','item_idx','label')]\n",
    "users = meta_df_small['user_idx'].unique(); train_u, valid_u = train_test_split(list(users), test_size=0.20, random_state=42)\n",
    "tr_mask = meta_df_small['user_idx'].isin(train_u); val_mask = meta_df_small['user_idx'].isin(valid_u)\n",
    "X_tr = meta_df_small[tr_mask][feat_cols].values; y_tr = meta_df_small[tr_mask]['label'].values\n",
    "gr_tr = meta_df_small[tr_mask].groupby('user_idx', sort=False).size().astype(int).values\n",
    "X_val = meta_df_small[val_mask][feat_cols].values; y_val = meta_df_small[val_mask]['label'].values\n",
    "gr_val = meta_df_small[val_mask].groupby('user_idx', sort=False).size().astype(int).values\n",
    "dtrain = lgb.Dataset(X_tr, label=y_tr, group=gr_tr); dval = lgb.Dataset(X_val, label=y_val, group=gr_val, reference=dtrain)\n",
    "\n",
    "def ndcg_per_group(preds, df_masked, K=10):\n",
    "    eval_users = df_masked['user_idx'].unique(); idx = 0; ndcgs = []\n",
    "    for u in eval_users:\n",
    "        sub = df_masked[df_masked['user_idx']==u]; n = len(sub)\n",
    "        if n==0: continue\n",
    "        p = preds[idx: idx + n]; items = sub['item_idx'].values; order = np.argsort(-p); ranked = items[order].tolist()\n",
    "        true_items = sub['item_idx'][sub['label']==1].tolist()\n",
    "        gains = [1.0 if it in true_items else 0.0 for it in ranked[:K]]\n",
    "        dcg = sum(g / log2(i+2) for i,g in enumerate(gains)); idcg = sum(1.0 / log2(i+2) for i in range(min(len(true_items), K))) if len(true_items)>0 else 0.0\n",
    "        ndcgs.append(dcg/idcg if idcg>0 else 0.0); idx += n\n",
    "    return float(np.mean(ndcgs)) if len(ndcgs)>0 else 0.0\n",
    "\n",
    "def objective(trial):\n",
    "    param = {'objective':'lambdarank','metric':'ndcg','ndcg_eval_at':[10],\n",
    "             'learning_rate': trial.suggest_float('learning_rate', 1e-3, 1e-1, log=True),\n",
    "             'num_leaves': trial.suggest_int('num_leaves', 31, 127),\n",
    "             'min_data_in_leaf': trial.suggest_int('min_data_in_leaf', 10, 200),\n",
    "             'feature_fraction': trial.suggest_float('feature_fraction', 0.5, 1.0),\n",
    "             'verbosity': -1, 'seed': 42, 'feature_pre_filter': False}\n",
    "    try:\n",
    "        bst = lgb.train(param, dtrain, num_boost_round=500, valid_sets=[dval], callbacks=[lgb.early_stopping(stopping_rounds=40), lgb.log_evaluation(period=0)])\n",
    "        preds_val = bst.predict(X_val); df_val = meta_df_small[val_mask].copy().reset_index(drop=True)\n",
    "        return -ndcg_per_group(preds_val, df_val, K=10)\n",
    "    except Exception as e:\n",
    "        print('LightGBM failed in objective:', e); return 1.0\n",
    "\n",
    "study = optuna.create_study(direction='minimize'); study.optimize(objective, n_trials=20, show_progress_bar=True)\n",
    "best_params_proto = study.best_params; print('Best params:', best_params_proto)\n",
    "\n",
    "params = {'objective':'lambdarank','metric':'ndcg','ndcg_eval_at':[10,50],\n",
    "          'learning_rate':float(best_params_proto.get('learning_rate',0.05)),\n",
    "          'num_leaves':int(best_params_proto.get('num_leaves',63)),\n",
    "          'min_data_in_leaf':int(best_params_proto.get('min_data_in_leaf',20)),\n",
    "          'feature_fraction':float(best_params_proto.get('feature_fraction',0.8)),'verbosity':-1,'seed':42,'feature_pre_filter':False}\n",
    "bst_proto = lgb.train(params, dtrain, num_boost_round=1000, valid_sets=[dval], callbacks=[lgb.early_stopping(stopping_rounds=50), lgb.log_evaluation(period=100)])\n",
    "joblib.dump(bst_proto, f\"{OUT_DIR}/lgbm_reranker_prototype.joblib\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b114009",
   "metadata": {
    "papermill": {
     "duration": 0.032334,
     "end_time": "2025-10-01T16:53:19.796787",
     "exception": false,
     "start_time": "2025-10-01T16:53:19.764453",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 5 — Scale-up Data Load (100k) & Model Initialization\n",
    "\n",
    "This cell builds a larger sample (100k rows) and computes final embeddings and factors. It prefers SBERT/implicit/FAISS when available but includes CPU-friendly fallbacks (TF-IDF + SVD and TruncatedSVD-based MF) so the notebook runs offline."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76aec644",
   "metadata": {
    "papermill": {
     "duration": 0.03222,
     "end_time": "2025-10-01T16:53:19.861400",
     "exception": false,
     "start_time": "2025-10-01T16:53:19.829180",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 15\n",
    "\n",
    "**Purpose:** Imports libraries used later. Trains a model / fits parameters.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Scale-up data load (100k) with fallbacks` → Comment describing intent.\n",
    "- `SCALE_N = 10000` → Performs a step relevant to data processing or modelling.\n",
    "- `SBERT_MODEL_FINAL = 'all-mpnet-base-v2'` → Performs a step relevant to data processing or modelling.\n",
    "- `from datasets import load_dataset` → Imports module(s).\n",
    "- `ds_iter = load_dataset('McAuley-Lab/Amazon-Reviews-2023', 'raw_review_Electronics', split='full', streaming=True, trust_remote_code=True)` → Performs a step relevant to data processing or modelling.\n",
    "- `rows = []; cnt = 0` → Performs a step relevant to data processing or modelling.\n",
    "- `for rec in ds_iter:` → Performs a step relevant to data processing or modelling.\n",
    "- `try:` → Performs a step relevant to data processing or modelling.\n",
    "- `asin = rec.get('asin') or rec.get('parent_asin'); user = rec.get('user_id') or rec.get('reviewerID'); text = rec.get('text') or rec.get('reviewText') or ''` → Performs a step relevant to data processing or modelling.\n",
    "- `overall = rec.get('rating') or rec.get('overall'); ts = rec.get('timestamp') or rec.get('unixReviewTime') or 0` → Performs a step relevant to data processing or modelling.\n",
    "- `if asin is None or user is None: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `ts_i = int(ts); ts_i = ts_i*1000 if ts_i < 10**10 else ts_i` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "93734662",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T16:53:19.927928Z",
     "iopub.status.busy": "2025-10-01T16:53:19.927199Z",
     "iopub.status.idle": "2025-10-01T17:24:30.619083Z",
     "shell.execute_reply": "2025-10-01T17:24:30.617513Z"
    },
    "papermill": {
     "duration": 1870.728554,
     "end_time": "2025-10-01T17:24:30.622221",
     "exception": false,
     "start_time": "2025-10-01T16:53:19.893667",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-10-01 16:53:33.780635: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1759337613.992620      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1759337614.060876      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1faf8a0eb8ab4616a6b53f2b89b5da8f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "modules.json:   0%|          | 0.00/349 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "09d2d9827aaa4e6c9595e3d05a11a074",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config_sentence_transformers.json:   0%|          | 0.00/116 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3db320249f7147509d47806778b30af6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "README.md: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d8d3acf929b2465b80ea136d1af375c1",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "sentence_bert_config.json:   0%|          | 0.00/53.0 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "858b8cd2d3f5488f90cec5aca741d38e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/571 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d1246f3b478142d08c4dbd2e65bde51f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/438M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c8669952b3544d1092c1bc22570edae3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer_config.json:   0%|          | 0.00/363 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3f0ed3dcf3d24bde8e5cbbe5f375ece0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "vocab.txt: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6b1583f88a714a30a62e0fd5237f2bba",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer.json: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3ac75489e9134d45a05d486abb1a7015",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "special_tokens_map.json:   0%|          | 0.00/239 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6ca12819e72b41e7b7a1ec30855aabfd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/190 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "4019d323932a46139c27c37ef850d53b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "SBERT encode:   0%|          | 0/35 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/implicit/cpu/als.py:95: RuntimeWarning: Intel MKL BLAS is configured to use 2 threads. It is highly recommended to disable its internal threadpool by setting the environment variable 'MKL_NUM_THREADS=1' or by callng 'threadpoolctl.threadpool_limits(1, \"blas\")'. Having MKL use a threadpool can lead to severe performance issues\n",
      "  check_blas_config()\n",
      "/usr/local/lib/python3.11/dist-packages/implicit/cpu/als.py:95: RuntimeWarning: OpenBLAS is configured to use 4 threads. It is highly recommended to disable its internal threadpool by setting the environment variable 'OPENBLAS_NUM_THREADS=1' or by calling 'threadpoolctl.threadpool_limits(1, \"blas\")'. Having OpenBLAS use a threadpool can lead to severe performance issues here.\n",
      "  check_blas_config()\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a67aa9c297034b03af98eca91ce1239d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/20 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final item_emb shape: (8907, 768)\n"
     ]
    }
   ],
   "source": [
    "# Scale-up data load (100k) with fallbacks\n",
    "SCALE_N = 10000\n",
    "SBERT_MODEL_FINAL = 'all-mpnet-base-v2'\n",
    "\n",
    "from datasets import load_dataset\n",
    "ds_iter = load_dataset('McAuley-Lab/Amazon-Reviews-2023', 'raw_review_Electronics', split='full', streaming=True, trust_remote_code=True)\n",
    "rows = []; cnt = 0\n",
    "for rec in ds_iter:\n",
    "    try:\n",
    "        asin = rec.get('asin') or rec.get('parent_asin'); user = rec.get('user_id') or rec.get('reviewerID'); text = rec.get('text') or rec.get('reviewText') or ''\n",
    "        overall = rec.get('rating') or rec.get('overall'); ts = rec.get('timestamp') or rec.get('unixReviewTime') or 0\n",
    "        if asin is None or user is None: continue\n",
    "        ts_i = int(ts); ts_i = ts_i*1000 if ts_i < 10**10 else ts_i\n",
    "        rows.append({'asin':str(asin),'reviewerID':str(user),'reviewText':str(text),'overall':float(overall) if overall is not None else float('nan'),'unixReviewTime':int(ts_i)})\n",
    "        cnt += 1\n",
    "        if cnt >= SCALE_N: break\n",
    "    except Exception:\n",
    "        continue\n",
    "df_scale = pd.DataFrame(rows)\n",
    "unique_asins_scale = sorted(df_scale['asin'].unique().tolist()); unique_users_scale = sorted(df_scale['reviewerID'].unique().tolist())\n",
    "item_map_scale = {a:i for i,a in enumerate(unique_asins_scale)}; inv_item_map_scale = {i:a for a,i in item_map_scale.items()}\n",
    "user_map_scale = {u:i for i,u in enumerate(unique_users_scale)}; inv_user_map_scale = {i:u for u,i in user_map_scale.items()}\n",
    "n_users_scale, n_items_scale = len(user_map_scale), len(item_map_scale)\n",
    "u_idx=[]; i_idx=[]; data=[]\n",
    "for _, r in df_scale.iterrows():\n",
    "    try:\n",
    "        u = user_map_scale[r['reviewerID']]; i = item_map_scale[r['asin']]\n",
    "        w = float(r['overall']) if not pd.isna(r['overall']) else 1.0; u_idx.append(u); i_idx.append(i); data.append(w)\n",
    "    except KeyError: continue\n",
    "interaction_scale = csr_matrix((data,(u_idx,i_idx)), shape=(n_users_scale,n_items_scale)).tocsr()\n",
    "item_user_matrix_scale = interaction_scale.T.tocsr()\n",
    "pop_counts_scale = Counter(df_scale['asin'])\n",
    "test_df_scale = df_scale.groupby('reviewerID').tail(1).reset_index(drop=True)\n",
    "\n",
    "# Build semantic embeddings: SBERT if available else TF-IDF+SVD fallback\n",
    "if HAS_SBERT:\n",
    "    from sentence_transformers import SentenceTransformer\n",
    "    sbert_final = SentenceTransformer(SBERT_MODEL_FINAL, device='cpu')\n",
    "    agg = defaultdict(list)\n",
    "    for _, r in df_scale[['asin','reviewText']].iterrows():\n",
    "        a = r['asin']\n",
    "        if len(agg[a]) < 5: agg[a].append(str(r['reviewText'])[:1200])\n",
    "    texts = [' . '.join(agg.get(a, [''])) for a in sorted(item_map_scale.keys(), key=lambda x: item_map_scale[x])]\n",
    "    emb_batches = []; batch_size = 256\n",
    "    for i in tqdm(range(0, len(texts), batch_size), desc='SBERT encode'):\n",
    "        emb = sbert_final.encode(texts[i:i+batch_size], convert_to_numpy=True, show_progress_bar=False)\n",
    "        emb_batches.append(emb)\n",
    "    item_emb_final = np.vstack(emb_batches).astype('float32')\n",
    "else:\n",
    "    from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "    from sklearn.decomposition import TruncatedSVD as _TSVD\n",
    "    agg = defaultdict(list)\n",
    "    for _, r in df_scale[['asin','reviewText']].iterrows():\n",
    "        a = r['asin']\n",
    "        if len(agg[a]) < 5: agg[a].append(str(r['reviewText'])[:1200])\n",
    "    texts = [' . '.join(agg.get(a, [''])) for a in sorted(item_map_scale.keys(), key=lambda x: item_map_scale[x])]\n",
    "    tf = TfidfVectorizer(max_features=65536, ngram_range=(1,2), min_df=2)\n",
    "    Xtf = tf.fit_transform(texts)\n",
    "    svd_text = _TSVD(n_components=384, random_state=42)\n",
    "    item_emb_final = svd_text.fit_transform(Xtf).astype('float32')\n",
    "\n",
    "# Build MF factors: implicit ALS if available else TruncatedSVD fallback\n",
    "if HAS_IMPLICIT:\n",
    "    try:\n",
    "        from implicit.als import AlternatingLeastSquares\n",
    "        als_model_final = AlternatingLeastSquares(factors=128, regularization=0.1, iterations=20, use_gpu=False)\n",
    "        als_model_final.fit(item_user_matrix_scale.astype('float32'))\n",
    "        als_item_factors_final = als_model_final.item_factors; als_user_factors_final = als_model_final.user_factors\n",
    "    except Exception:\n",
    "        # fallback to SVD factors below\n",
    "        HAS_IMPLICIT = False\n",
    "\n",
    "if not HAS_IMPLICIT:\n",
    "    from sklearn.decomposition import TruncatedSVD as _TSVD2\n",
    "    print('implicit not available or failed; using TruncatedSVD fallback for MF factors')\n",
    "    svd_mf = _TSVD2(n_components=128, random_state=42)\n",
    "    als_item_factors_final = svd_mf.fit_transform(item_user_matrix_scale)\n",
    "    # user factors: approximate by dividing R^T * F by counts\n",
    "    try:\n",
    "        R = item_user_matrix_scale\n",
    "        user_num = (R.T).dot(als_item_factors_final)\n",
    "        user_counts = np.array((R != 0).sum(axis=0)).reshape(-1)\n",
    "        user_counts = np.where(user_counts == 0, 1.0, user_counts)\n",
    "        als_user_factors_final = (user_num / user_counts[:, None]).astype('float32')\n",
    "    except Exception:\n",
    "        als_user_factors_final = np.random.normal(scale=0.01, size=(n_users_scale, als_item_factors_final.shape[1])).astype('float32')\n",
    "\n",
    "svd_item_factors_final = als_item_factors_final  # reuse\n",
    "item_emb_norm_final = item_emb_final / (np.linalg.norm(item_emb_final, axis=1, keepdims=True) + 1e-9)\n",
    "print('Final item_emb shape:', item_emb_final.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96c66d12",
   "metadata": {
    "papermill": {
     "duration": 0.034219,
     "end_time": "2025-10-01T17:24:30.692591",
     "exception": false,
     "start_time": "2025-10-01T17:24:30.658372",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 6 — Scale Hard-negative Mining & Final LTR Training\n",
    "\n",
    "This cell mines hard negatives across many users and trains the final LightGBM reranker on the large meta dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfe83d5b",
   "metadata": {
    "papermill": {
     "duration": 0.034536,
     "end_time": "2025-10-01T17:24:30.761569",
     "exception": false,
     "start_time": "2025-10-01T17:24:30.727033",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 17\n",
    "\n",
    "**Purpose:** Imports libraries used later. Trains a model / fits parameters.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Scale hard-neg mining + LTR training` → Comment describing intent.\n",
    "- `USERS_TO_USE_SCALE = 5000; HARD_NEG_PER_POS = 80; RANDOM_NEG_PER_POS = 5` → Performs a step relevant to data processing or modelling.\n",
    "- `meta_rows_scale = []` → Performs a step relevant to data processing or modelling.\n",
    "- `sample_users_scale = df_scale['reviewerID'].unique()[:min(USERS_TO_USE_SCALE, n_users_scale)]` → Performs a step relevant to data processing or modelling.\n",
    "- `for uid in tqdm(sample_users_scale, desc='Building Meta Scale'):` → Performs a step relevant to data processing or modelling.\n",
    "- `uidx = user_map_scale.get(uid);` → Performs a step relevant to data processing or modelling.\n",
    "- `if uidx is None: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `cands = build_candidates_union(uidx, item_emb_final, (als_model_final if 'als_model_final' in globals() else None), svd_item_factors_final, item_map_scale, pop_counts_scale, user_map_scale, df_scale, interaction_scale, top_sem=1000, top_als=500, top_svd=500, top_pop=500, top_mf=200, max_cands=3000)` → Performs a step relevant to data processing or modelling.\n",
    "- `if not cands: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `mf = build_features_for_candidates(uidx, cands, item_emb_final, (als_item_factors_final if 'als_item_factors_final' in globals() else None), (als_user_factors_final if 'als_user_factors_final' in globals() else None), svd_item_factors_final, df_scale, item_map_scale, user_map_scale, pop_counts_scale, feature_names, now_ts)` → Performs a step relevant to data processing or modelling.\n",
    "- `Xc = mf['X']; cidx = mf['cands']; fns = mf['feature_names']` → Performs a step relevant to data processing or modelling.\n",
    "- `true_asins = test_df_scale[test_df_scale['reviewerID']==uid]['asin'].tolist()` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "28c5da48",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T17:24:30.841214Z",
     "iopub.status.busy": "2025-10-01T17:24:30.833129Z",
     "iopub.status.idle": "2025-10-01T18:22:51.671873Z",
     "shell.execute_reply": "2025-10-01T18:22:51.670849Z"
    },
    "papermill": {
     "duration": 3500.877729,
     "end_time": "2025-10-01T18:22:51.673547",
     "exception": false,
     "start_time": "2025-10-01T17:24:30.795818",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c177cdedc3f1457083985f53c30f36d7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Building Meta Scale:   0%|          | 0/1561 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "meta_df_scale shape: (129516, 16)\n",
      "Training until validation scores don't improve for 50 rounds\n",
      "[100]\tvalid_0's ndcg@10: 0.944972\tvalid_0's ndcg@50: 0.946655\n",
      "Early stopping, best iteration is:\n",
      "[50]\tvalid_0's ndcg@10: 0.952262\tvalid_0's ndcg@50: 0.953979\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['/kaggle/working/lgbm_reranker_final.joblib']"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Scale hard-neg mining + LTR training\n",
    "USERS_TO_USE_SCALE = 5000; HARD_NEG_PER_POS = 80; RANDOM_NEG_PER_POS = 5\n",
    "meta_rows_scale = []\n",
    "sample_users_scale = df_scale['reviewerID'].unique()[:min(USERS_TO_USE_SCALE, n_users_scale)]\n",
    "for uid in tqdm(sample_users_scale, desc='Building Meta Scale'):\n",
    "    uidx = user_map_scale.get(uid); \n",
    "    if uidx is None: continue\n",
    "    cands = build_candidates_union(uidx, item_emb_final, (als_model_final if 'als_model_final' in globals() else None), svd_item_factors_final, item_map_scale, pop_counts_scale, user_map_scale, df_scale, interaction_scale, top_sem=1000, top_als=500, top_svd=500, top_pop=500, top_mf=200, max_cands=3000)\n",
    "    if not cands: continue\n",
    "    mf = build_features_for_candidates(uidx, cands, item_emb_final, (als_item_factors_final if 'als_item_factors_final' in globals() else None), (als_user_factors_final if 'als_user_factors_final' in globals() else None), svd_item_factors_final, df_scale, item_map_scale, user_map_scale, pop_counts_scale, feature_names, now_ts)\n",
    "    Xc = mf['X']; cidx = mf['cands']; fns = mf['feature_names']\n",
    "    true_asins = test_df_scale[test_df_scale['reviewerID']==uid]['asin'].tolist()\n",
    "    true_idxs = [item_map_scale[a] for a in true_asins if a in item_map_scale]\n",
    "    if not true_idxs: continue\n",
    "    als_col = Xc[:, fns.index('als_score')] if 'als_score' in fns else np.zeros(Xc.shape[0])\n",
    "    svd_col = Xc[:, fns.index('svd_score')] if 'svd_score' in fns else np.zeros(Xc.shape[0])\n",
    "    hard_score = 0.5 * als_col + 0.5 * svd_col\n",
    "    cand_arr = np.array(cidx); pos_mask = np.isin(cand_arr, true_idxs); non_pos_idx = np.where(~pos_mask)[0]\n",
    "    if len(non_pos_idx)==0: continue\n",
    "    ordering = non_pos_idx[np.argsort(-hard_score[non_pos_idx])]; hard_negs_idx = ordering[:HARD_NEG_PER_POS].tolist()\n",
    "    remaining = list(set(non_pos_idx.tolist()) - set(hard_negs_idx)); random_negs_idx = random.sample(remaining, min(RANDOM_NEG_PER_POS, len(remaining))) if remaining else []\n",
    "    for t in true_idxs:\n",
    "        pos_loc = np.where(cand_arr==t)[0]; \n",
    "        if len(pos_loc)==0: continue\n",
    "        for p in pos_loc:\n",
    "            row = {'user_idx': uidx, 'item_idx': int(cidx[p]), 'label': 1}\n",
    "            for j,fn in enumerate(fns):\n",
    "                try: row[fn] = float(Xc[p,j])\n",
    "                except: row[fn] = 0.0\n",
    "            meta_rows_scale.append(row)\n",
    "            for idx in hard_negs_idx:\n",
    "                rn = {'user_idx': uidx, 'item_idx': int(cidx[idx]), 'label': 0}\n",
    "                for j,fn in enumerate(fns):\n",
    "                    try: rn[fn] = float(Xc[idx,j])\n",
    "                    except: rn[fn] = 0.0\n",
    "                meta_rows_scale.append(rn)\n",
    "            for idx in random_negs_idx:\n",
    "                rr = {'user_idx': uidx, 'item_idx': int(cidx[idx]), 'label': 0}\n",
    "                for j,fn in enumerate(fns):\n",
    "                    try: rr[fn] = float(Xc[idx,j])\n",
    "                    except: rr[fn] = 0.0\n",
    "                meta_rows_scale.append(rr)\n",
    "meta_df_scale = pd.DataFrame(meta_rows_scale).sample(frac=1.0, random_state=42).reset_index(drop=True)\n",
    "print('meta_df_scale shape:', meta_df_scale.shape)\n",
    "\n",
    "# Train final LTR\n",
    "from sklearn.model_selection import train_test_split\n",
    "feat_cols = [c for c in meta_df_scale.columns if c not in ('user_idx','item_idx','label')]\n",
    "X = meta_df_scale[feat_cols].values; y = meta_df_scale['label'].values\n",
    "users_all = meta_df_scale['user_idx'].unique(); train_u, valid_u = train_test_split(list(users_all), test_size=0.10, random_state=42)\n",
    "tr_mask = meta_df_scale['user_idx'].isin(train_u); val_mask = meta_df_scale['user_idx'].isin(valid_u)\n",
    "X_tr = meta_df_scale[tr_mask][feat_cols].values; y_tr = meta_df_scale[tr_mask]['label'].values; gr_tr = meta_df_scale[tr_mask].groupby('user_idx', sort=False).size().astype(int).values\n",
    "X_val = meta_df_scale[val_mask][feat_cols].values; y_val = meta_df_scale[val_mask]['label'].values; gr_val = meta_df_scale[val_mask].groupby('user_idx', sort=False).size().astype(int).values\n",
    "\n",
    "dtrain = lgb.Dataset(X_tr, label=y_tr, group=gr_tr); dval = lgb.Dataset(X_val, label=y_val, group=gr_val, reference=dtrain)\n",
    "params_scale = {'objective':'lambdarank','metric':'ndcg','ndcg_eval_at':[10,50],'learning_rate':float(best_params_proto.get('learning_rate',0.05)),'num_leaves':int(best_params_proto.get('num_leaves',63)),'min_data_in_leaf':int(best_params_proto.get('min_data_in_leaf',20)),'feature_fraction':float(best_params_proto.get('feature_fraction',0.8)),'verbosity':-1,'seed':42,'feature_pre_filter':False}\n",
    "bst_final_scale = lgb.train(params_scale, dtrain, num_boost_round=1000, valid_sets=[dval], callbacks=[lgb.early_stopping(stopping_rounds=50), lgb.log_evaluation(period=100)])\n",
    "joblib.dump(bst_final_scale, f\"{OUT_DIR}/lgbm_reranker_final.joblib\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfade358",
   "metadata": {
    "papermill": {
     "duration": 0.035553,
     "end_time": "2025-10-01T18:22:51.745868",
     "exception": false,
     "start_time": "2025-10-01T18:22:51.710315",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 7 — Final Evaluation & Metrics\n",
    "\n",
    "Compute P@K, R@K, NDCG@K, MAP, and MPR for the LGBM hybrid reranker and a semantic baseline. Results are saved to `OUT_DIR/final_scale_summary_metrics.csv`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5591b9a",
   "metadata": {
    "papermill": {
     "duration": 0.035498,
     "end_time": "2025-10-01T18:22:51.816612",
     "exception": false,
     "start_time": "2025-10-01T18:22:51.781114",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 19\n",
    "\n",
    "**Purpose:** Imports libraries used later. Defines function(s) used downstream. Produces predictions on data. Saves results or models to disk.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Final evaluation utilities and run` → Comment describing intent.\n",
    "- `from math import log2` → Imports module(s).\n",
    "- `def ndcg_at_k(pred_list, true_list, k=10):` → Performs a step relevant to data processing or modelling.\n",
    "- `if not true_list: return 0.0` → Performs a step relevant to data processing or modelling.\n",
    "- `pred_k = pred_list[:k]; gains = [1.0 if p in true_list else 0.0 for p in pred_k]` → Performs a step relevant to data processing or modelling.\n",
    "- `dcg = sum(g / log2(i+2) for i,g in enumerate(gains)); idcg = sum(1.0 / log2(i+2) for i in range(min(len(true_list), k)))` → Performs a step relevant to data processing or modelling.\n",
    "- `return dcg/idcg if idcg>0 else 0.0` → Performs a step relevant to data processing or modelling.\n",
    "- `def apk(actual, predicted, k=10):` → Performs a step relevant to data processing or modelling.\n",
    "- `if not actual: return 0.0` → Performs a step relevant to data processing or modelling.\n",
    "- `score = 0.0; num_hits = 0.0` → Performs a step relevant to data processing or modelling.\n",
    "- `for i,p in enumerate(predicted[:k]):` → Performs a step relevant to data processing or modelling.\n",
    "- `if p in actual and p not in predicted[:i]:` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "5d67c90b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T18:22:51.889918Z",
     "iopub.status.busy": "2025-10-01T18:22:51.889559Z",
     "iopub.status.idle": "2025-10-01T19:00:29.423385Z",
     "shell.execute_reply": "2025-10-01T19:00:29.422514Z"
    },
    "papermill": {
     "duration": 2257.573383,
     "end_time": "2025-10-01T19:00:29.425041",
     "exception": false,
     "start_time": "2025-10-01T18:22:51.851658",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2c4e4f0a9dc547899ec1c8023a5ba337",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating lgbm_final_topk:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6d4d9690138a4495a9d4e55facffc157",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating semantic_final_topk:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final evaluation complete — metrics saved to /kaggle/working/final_scale_summary_metrics.csv\n"
     ]
    }
   ],
   "source": [
    "# Final evaluation utilities and run\n",
    "from math import log2\n",
    "def ndcg_at_k(pred_list, true_list, k=10):\n",
    "    if not true_list: return 0.0\n",
    "    pred_k = pred_list[:k]; gains = [1.0 if p in true_list else 0.0 for p in pred_k]\n",
    "    dcg = sum(g / log2(i+2) for i,g in enumerate(gains)); idcg = sum(1.0 / log2(i+2) for i in range(min(len(true_list), k)))\n",
    "    return dcg/idcg if idcg>0 else 0.0\n",
    "\n",
    "def apk(actual, predicted, k=10):\n",
    "    if not actual: return 0.0\n",
    "    score = 0.0; num_hits = 0.0\n",
    "    for i,p in enumerate(predicted[:k]):\n",
    "        if p in actual and p not in predicted[:i]:\n",
    "            num_hits += 1.0; score += num_hits/(i+1.0)\n",
    "    return score/min(len(actual), k)\n",
    "\n",
    "def lgbm_final_topk(uidx, k=10):\n",
    "    cands = build_candidates_union(uidx, item_emb_final, (als_model_final if 'als_model_final' in globals() else None), svd_item_factors_final, item_map_scale, pop_counts_scale, user_map_scale, df_scale, interaction_scale, top_sem=1000, top_als=500, top_svd=500, top_pop=500, top_mf=200, max_cands=3000)\n",
    "    if not cands: return []\n",
    "    mf = build_features_for_candidates(uidx, cands, item_emb_final, (als_item_factors_final if 'als_item_factors_final' in globals() else None), (als_user_factors_final if 'als_user_factors_final' in globals() else None), svd_item_factors_final, df_scale, item_map_scale, user_map_scale, pop_counts_scale, feature_names, now_ts)\n",
    "    preds = bst_final_scale.predict(mf['X']); order = np.argsort(-preds)[:k]; return [cands[i] for i in order]\n",
    "\n",
    "def semantic_final_topk(uidx, k=10):\n",
    "    uvec = user_profile_emb(uidx, item_emb_final, df_scale, item_map_scale, user_map_scale); uvec = uvec/(np.linalg.norm(uvec)+1e-9)\n",
    "    scores = item_emb_final.dot(uvec); return list(np.argsort(-scores)[:k])\n",
    "\n",
    "def evaluate_final(scorer_fn, K=10, max_users=1000):\n",
    "    actuals=[]; preds=[]; cnt=0\n",
    "    for uid in tqdm(test_df_scale['reviewerID'].unique()[:max_users], desc=f\"Evaluating {scorer_fn.__name__}\"):\n",
    "        if uid not in user_map_scale: continue\n",
    "        uidx = user_map_scale[uid]\n",
    "        true_asins = test_df_scale[test_df_scale['reviewerID']==uid]['asin'].tolist()\n",
    "        if not true_asins: continue\n",
    "        rec_idxs = scorer_fn(uidx, k=K)\n",
    "        rec_asins = [inv_item_map_scale[i] for i in rec_idxs if i in inv_item_map_scale]\n",
    "        preds.append(rec_asins); actuals.append(true_asins); cnt += 1\n",
    "    if cnt==0: return {'P@10':0.0,'R@10':0.0,'NDCG@10':0.0,'MAP@10':0.0,'MPR@10':0.0,'EvalUsers':0}\n",
    "    P = np.mean([len(set(p[:K]) & set(a))/float(K) for p,a in zip(preds,actuals)])\n",
    "    R = np.mean([len(set(p[:K]) & set(a))/max(1,len(a)) for p,a in zip(preds,actuals)])\n",
    "    N = np.mean([ndcg_at_k(p,a,K) for p,a in zip(preds,actuals)])\n",
    "    MAP = np.mean([apk(a,p,K) for a,p in zip(actuals,preds)])\n",
    "    MPR = np.mean([np.mean([1.0 - (p.index(t)+1)/K if (t in p[:K]) else 0.0 for t in a]) for a,p in zip(actuals,preds)])\n",
    "    return {'P@10':P,'R@10':R,'NDCG@10':N,'MAP@10':MAP,'MPR@10':MPR,'EvalUsers':len(actuals)}\n",
    "\n",
    "final_results = {}\n",
    "final_results['LGBM_Hybrid_Rerank'] = evaluate_final(lgbm_final_topk, K=10)\n",
    "final_results['Semantic_Baseline'] = evaluate_final(semantic_final_topk, K=10)\n",
    "final_df = pd.DataFrame(final_results).T\n",
    "final_df = final_df[['P@10','R@10','NDCG@10','MAP@10','MPR@10','EvalUsers']]\n",
    "final_df.to_csv(f\"{OUT_DIR}/final_scale_summary_metrics.csv\", index=False)\n",
    "print('Final evaluation complete — metrics saved to', f\"{OUT_DIR}/final_scale_summary_metrics.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08882330",
   "metadata": {
    "papermill": {
     "duration": 0.034185,
     "end_time": "2025-10-01T19:00:29.494090",
     "exception": false,
     "start_time": "2025-10-01T19:00:29.459905",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Feature importance\n",
    "\n",
    "Export and inspect feature importances from the final LightGBM model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e88461ae",
   "metadata": {
    "papermill": {
     "duration": 0.034921,
     "end_time": "2025-10-01T19:00:29.566037",
     "exception": false,
     "start_time": "2025-10-01T19:00:29.531116",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 21\n",
    "\n",
    "**Purpose:** Saves results or models to disk.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Feature importances` → Comment describing intent.\n",
    "- `fi_df = pd.DataFrame({'feature': feat_cols, 'importance': bst_final_scale.feature_importance()}).sort_values('importance', ascending=False)` → Performs a step relevant to data processing or modelling.\n",
    "- `fi_df.to_csv(f\"{OUT_DIR}/feature_importances_final.csv\", index=False)` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "b8bf7d22",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T19:00:29.638793Z",
     "iopub.status.busy": "2025-10-01T19:00:29.638411Z",
     "iopub.status.idle": "2025-10-01T19:00:29.648983Z",
     "shell.execute_reply": "2025-10-01T19:00:29.648088Z"
    },
    "papermill": {
     "duration": 0.049003,
     "end_time": "2025-10-01T19:00:29.650691",
     "exception": false,
     "start_time": "2025-10-01T19:00:29.601688",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Feature importances\n",
    "fi_df = pd.DataFrame({'feature': feat_cols, 'importance': bst_final_scale.feature_importance()}).sort_values('importance', ascending=False)\n",
    "fi_df.to_csv(f\"{OUT_DIR}/feature_importances_final.csv\", index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c01a86e",
   "metadata": {
    "papermill": {
     "duration": 0.034809,
     "end_time": "2025-10-01T19:00:29.720615",
     "exception": false,
     "start_time": "2025-10-01T19:00:29.685806",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 22\n",
    "\n",
    "**Purpose:** Performs an operation relevant to the pipeline (see code).\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Fixed sample recommendation printing (maps indices -> ASIN strings, computes true HITs)` → Comment describing intent.\n",
    "- `SAMPLE_USERS_TO_DISPLAY = 5` → Performs a step relevant to data processing or modelling.\n",
    "- `test_users = test_df_scale['reviewerID'].unique()` → Performs a step relevant to data processing or modelling.\n",
    "- `if len(test_users) == 0:` → Performs a step relevant to data processing or modelling.\n",
    "- `print(\"\\nNo unique test users found to display sample recommendations.\")` → Displays a quick diagnostic for the user.\n",
    "- `else:` → Performs a step relevant to data processing or modelling.\n",
    "- `num_samples = min(SAMPLE_USERS_TO_DISPLAY, len(test_users))` → Performs a step relevant to data processing or modelling.\n",
    "- `sample_uids = random.sample(list(test_users), num_samples)` → Samples rows from a DataFrame.\n",
    "- `print(f\"\\n--- Sample User Recommendation Output (LGBM Hybrid) for {num_samples} Users ---\")` → Displays a quick diagnostic for the user.\n",
    "- `for sample_uid in sample_uids:` → Performs a step relevant to data processing or modelling.\n",
    "- `sample_uidx = user_map_scale.get(sample_uid)` → Performs a step relevant to data processing or modelling.\n",
    "- `if sample_uidx is None:` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "347ab30e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T19:00:29.793359Z",
     "iopub.status.busy": "2025-10-01T19:00:29.792948Z",
     "iopub.status.idle": "2025-10-01T19:00:40.884049Z",
     "shell.execute_reply": "2025-10-01T19:00:40.883013Z"
    },
    "papermill": {
     "duration": 11.129116,
     "end_time": "2025-10-01T19:00:40.885583",
     "exception": false,
     "start_time": "2025-10-01T19:00:29.756467",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Sample User Recommendation Output (LGBM Hybrid) for 5 Users ---\n",
      "\n",
      "User ID: AEINWALDRYT4NTF3M5NC2WZ5YQNA\n",
      "True Last Item (to predict): B017IM9K26\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B07L2T2W6L (❌ MISS)\n",
      "  2. B00UVN20YA (❌ MISS)\n",
      "  3. B01018DB2E (❌ MISS)\n",
      "  4. B0055CR9M0 (❌ MISS)\n",
      "  5. B07GFQN1MM (❌ MISS)\n",
      "  6. B098744XH6 (❌ MISS)\n",
      "  7. B000Q8UAWY (❌ MISS)\n",
      "  8. B0014XOS64 (❌ MISS)\n",
      "  9. B01D5H8MKY (❌ MISS)\n",
      "  10. B00JX8Y2HM (❌ MISS)\n",
      "True ASIN in candidate pool? YES\n",
      "\n",
      "User ID: AHW7W34BLHHC4AYM4TPMLA2SWMMA\n",
      "True Last Item (to predict): B00GMFVET8\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B00GMFVET8 (✅ HIT)\n",
      "  2. B007Y2YWDI (❌ MISS)\n",
      "  3. B08RYNJRCY (❌ MISS)\n",
      "  4. B00K0QLI6Y (❌ MISS)\n",
      "  5. B076BL6Z79 (❌ MISS)\n",
      "  6. B0BC3V8F3R (❌ MISS)\n",
      "  7. B093VGKV3B (❌ MISS)\n",
      "  8. B07P6L7BFK (❌ MISS)\n",
      "  9. B083TNW1JM (❌ MISS)\n",
      "  10. B07Q5QXMXV (❌ MISS)\n",
      "True ASIN in candidate pool? YES\n",
      "\n",
      "User ID: AF227ZORVJNXGFF6UFK23IYWE7AA\n",
      "True Last Item (to predict): B00OQVZDJM\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B07DNSZPXG (❌ MISS)\n",
      "  2. B01ABWGHHG (❌ MISS)\n",
      "  3. B001CJOLBW (❌ MISS)\n",
      "  4. B00V49LNCU (❌ MISS)\n",
      "  5. B01E9AHU8Q (❌ MISS)\n",
      "  6. B08164VTWH (❌ MISS)\n",
      "  7. B0187AEJTM (❌ MISS)\n",
      "  8. B017EADYHE (❌ MISS)\n",
      "  9. B0002BESIM (❌ MISS)\n",
      "  10. B08P1TWXC9 (❌ MISS)\n",
      "True ASIN in candidate pool? YES\n",
      "\n",
      "User ID: AFNZHLVWANRWLF3N24KCMPOTYG2A\n",
      "True Last Item (to predict): B00LMRP6UY\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B0144WK5OK (❌ MISS)\n",
      "  2. B0B63LNZBW (❌ MISS)\n",
      "  3. B01N1G3IIZ (❌ MISS)\n",
      "  4. B0036ZZ72W (❌ MISS)\n",
      "  5. B07K4Z83NG (❌ MISS)\n",
      "  6. B008X3JGSI (❌ MISS)\n",
      "  7. B08HJ5Q6ZT (❌ MISS)\n",
      "  8. B07CX38CQ2 (❌ MISS)\n",
      "  9. B08D45WDR7 (❌ MISS)\n",
      "  10. B077ZGRVRX (❌ MISS)\n",
      "True ASIN in candidate pool? YES\n",
      "\n",
      "User ID: AGB2PYUCXQRQ5ZICZRB2VK53IN7Q\n",
      "True Last Item (to predict): B0721MMN1M\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B01DFKC2SO (❌ MISS)\n",
      "  2. B07HZLHPKP (❌ MISS)\n",
      "  3. B01MZEEFNX (❌ MISS)\n",
      "  4. B015TJD0Y4 (❌ MISS)\n",
      "  5. B01J24C0TI (❌ MISS)\n",
      "  6. B078HJMVTK (❌ MISS)\n",
      "  7. B06XCM9LJ4 (❌ MISS)\n",
      "  8. B01N44JBS4 (❌ MISS)\n",
      "  9. B07PDHSLM6 (❌ MISS)\n",
      "  10. B07XJ8C8F5 (❌ MISS)\n",
      "True ASIN in candidate pool? YES\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Fixed sample recommendation printing (maps indices -> ASIN strings, computes true HITs)\n",
    "SAMPLE_USERS_TO_DISPLAY = 5\n",
    "\n",
    "test_users = test_df_scale['reviewerID'].unique()\n",
    "if len(test_users) == 0:\n",
    "    print(\"\\nNo unique test users found to display sample recommendations.\")\n",
    "else:\n",
    "    num_samples = min(SAMPLE_USERS_TO_DISPLAY, len(test_users))\n",
    "    sample_uids = random.sample(list(test_users), num_samples)\n",
    "\n",
    "    print(f\"\\n--- Sample User Recommendation Output (LGBM Hybrid) for {num_samples} Users ---\")\n",
    "\n",
    "    for sample_uid in sample_uids:\n",
    "        sample_uidx = user_map_scale.get(sample_uid)\n",
    "\n",
    "        if sample_uidx is None:\n",
    "            print(f\"\\n[SKIP] User {sample_uid} not in user_map_scale.\")\n",
    "            continue\n",
    "\n",
    "        if 'bst_final_scale' not in globals() or bst_final_scale is None:\n",
    "            print(\"\\n[SKIP] bst_final_scale not available — model wasn't trained or loaded.\")\n",
    "            break\n",
    "\n",
    "        # true ASIN string\n",
    "        actual_asin = test_df_scale[test_df_scale['reviewerID'] == sample_uid]['asin'].iloc[0]\n",
    "\n",
    "        # get recommended item indices (ints)\n",
    "        rec_idxs = lgbm_final_topk(sample_uidx, k=10)\n",
    "\n",
    "        # convert indices -> ASINs (use appropriate inv map)\n",
    "        inv_map = inv_item_map_scale if 'inv_item_map_scale' in globals() else inv_item_map\n",
    "        rec_asins = [inv_map[i] if (i in inv_map) else f\"IDX_{i}\" for i in rec_idxs]\n",
    "\n",
    "        print(f\"\\nUser ID: {sample_uid}\")\n",
    "        print(f\"True Last Item (to predict): {actual_asin}\")\n",
    "        print(\"Top 10 Recommended ASINs:\")\n",
    "        for i, asin in enumerate(rec_asins):\n",
    "            hit_status = \"✅ HIT\" if asin == actual_asin else \"❌ MISS\"\n",
    "            print(f\"  {i+1}. {asin} ({hit_status})\")\n",
    "\n",
    "        # helpful additional info: was the true item present in the candidate set at all?\n",
    "        # Build candidate set with the same function used by the scorer (using larger pool for clarity)\n",
    "        cands = build_candidates_union(sample_uidx,\n",
    "                                       item_emb_final if 'item_emb_final' in globals() else None,\n",
    "                                       als_model_final if 'als_model_final' in globals() else None,\n",
    "                                       svd_item_factors_final if 'svd_item_factors_final' in globals() else None,\n",
    "                                       item_map_scale if 'item_map_scale' in globals() else item_map,\n",
    "                                       pop_counts_scale if 'pop_counts_scale' in globals() else pop_counts,\n",
    "                                       user_map_scale if 'user_map_scale' in globals() else user_map,\n",
    "                                       df_scale if 'df_scale' in globals() else df,\n",
    "                                       interaction_scale if 'interaction_scale' in globals() else interaction,\n",
    "                                       top_sem=1000, top_als=500, top_svd=500, top_pop=500, top_mf=200, max_cands=3000)\n",
    "        cand_asins = {inv_map[i] for i in cands if i in inv_map}\n",
    "        in_candidates = actual_asin in cand_asins\n",
    "        print(f\"True ASIN in candidate pool? {'YES' if in_candidates else 'NO'}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe556bfa",
   "metadata": {
    "papermill": {
     "duration": 0.035998,
     "end_time": "2025-10-01T19:00:40.958042",
     "exception": false,
     "start_time": "2025-10-01T19:00:40.922044",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 8 — Diagnostics, Ablations & Next Steps\n",
    "\n",
    "**Diagnostics included in this notebook:**\n",
    "\n",
    "- Candidate recall checks (small and large pools)\n",
    "- Feature distributions for positives vs negatives\n",
    "- Per-user inspection utilities (`inspect_user_rerank`, `compare_top_bottom`)\n",
    "\n",
    "**Suggested next steps:**\n",
    "\n",
    "1. If reranker underperforms but recall is high: increase meta training size, upsample positives, and tune hard-negative ratios.\n",
    "2. If ALS/SVD features are weak, consider training implicit ALS on denser data or using matrix factorization with alternating optimization.\n",
    "3. Add more content features (title tokens, brand, category) and context signals (time of day, device) if available.\n",
    "4. For production: build offline candidate pipeline (FAISS HNSW) and a lightweight online reranker (optimized model export).\n",
    "\n",
    "---\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4ec7aa88",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T19:00:41.030791Z",
     "iopub.status.busy": "2025-10-01T19:00:41.030361Z",
     "iopub.status.idle": "2025-10-01T19:00:41.218318Z",
     "shell.execute_reply": "2025-10-01T19:00:41.217578Z"
    },
    "papermill": {
     "duration": 0.226173,
     "end_time": "2025-10-01T19:00:41.219640",
     "exception": false,
     "start_time": "2025-10-01T19:00:40.993467",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_13/2234177804.py:59: FutureWarning: errors='ignore' is deprecated and will raise in a future version. Use to_numeric without passing `errors` and catch exceptions explicitly instead\n",
      "  df[c] = pd.to_numeric(df[c], errors='ignore')\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "## 📊 Final evaluation metrics (loaded from `/kaggle/working/final_scale_summary_metrics.csv`)"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "</style>\n",
       "<table id=\"T_5e444\">\n",
       "  <caption>Cleaned final scale summary metrics</caption>\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_5e444_level0_col0\" class=\"col_heading level0 col0\" >P@10</th>\n",
       "      <th id=\"T_5e444_level0_col1\" class=\"col_heading level0 col1\" >R@10</th>\n",
       "      <th id=\"T_5e444_level0_col2\" class=\"col_heading level0 col2\" >NDCG@10</th>\n",
       "      <th id=\"T_5e444_level0_col3\" class=\"col_heading level0 col3\" >MAP@10</th>\n",
       "      <th id=\"T_5e444_level0_col4\" class=\"col_heading level0 col4\" >MPR@10</th>\n",
       "      <th id=\"T_5e444_level0_col5\" class=\"col_heading level0 col5\" >EvalUsers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_5e444_level0_row0\" class=\"row_heading level0 row0\" >Model_1</th>\n",
       "      <td id=\"T_5e444_row0_col0\" class=\"data row0 col0\" >0.045800</td>\n",
       "      <td id=\"T_5e444_row0_col1\" class=\"data row0 col1\" >0.458000</td>\n",
       "      <td id=\"T_5e444_row0_col2\" class=\"data row0 col2\" >0.403928</td>\n",
       "      <td id=\"T_5e444_row0_col3\" class=\"data row0 col3\" >0.387677</td>\n",
       "      <td id=\"T_5e444_row0_col4\" class=\"data row0 col4\" >0.370300</td>\n",
       "      <td id=\"T_5e444_row0_col5\" class=\"data row0 col5\" >1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_5e444_level0_row1\" class=\"row_heading level0 row1\" >Model_2</th>\n",
       "      <td id=\"T_5e444_row1_col0\" class=\"data row1 col0\" >0.073000</td>\n",
       "      <td id=\"T_5e444_row1_col1\" class=\"data row1 col1\" >0.730000</td>\n",
       "      <td id=\"T_5e444_row1_col2\" class=\"data row1 col2\" >0.624721</td>\n",
       "      <td id=\"T_5e444_row1_col3\" class=\"data row1 col3\" >0.589946</td>\n",
       "      <td id=\"T_5e444_row1_col4\" class=\"data row1 col4\" >0.605900</td>\n",
       "      <td id=\"T_5e444_row1_col5\" class=\"data row1 col5\" >1000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x792ab59f8890>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "### 🔍 Qualitative model winners (per metric)"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "- **P@10**: top performer — **Model_2**.\n",
       "- **R@10**: top performer — **Model_2**.\n",
       "- **NDCG@10**: top performer — **Model_2**.\n",
       "- **MAP@10**: top performer — **Model_2**.\n",
       "- **MPR@10**: top performer — **Model_2**."
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "### 📘 Metric meanings (guidance — no numeric thresholds)\n",
       "\n",
       "- **Precision@10 (P@10)** — Of the top-10 items returned, the fraction that are relevant. In very large catalogs, absolute Precision values can be low while still being useful.\n",
       "\n",
       "- **Recall@10 (R@10)** — Fraction of the user's relevant items that appear in the top-10. High Recall means good coverage of what the user is likely to want.\n",
       "\n",
       "- **NDCG@10** — Rewards placing the most relevant items near the top. This is often the primary ranking metric to optimize when user satisfaction depends on top-list order.\n",
       "\n",
       "- **MAP@10** — Mean Average Precision across users; emphasizes consistent early correct placements.\n",
       "\n",
       "- **MPR@10** — A rank-based measure capturing how near the top relevant items are on average; complements NDCG/MAP.\n",
       "\n",
       "- **EvalUsers** — The number of users used for evaluation; larger is more reliable.\n",
       "\n",
       "### 🔎 How to interpret combinations (qualitative)\n",
       "\n",
       "- If **NDCG** and **MAP** improve together, the model provides reliably better top-ranked results across users.\n",
       "- If a model shows higher **Recall** but lower **Precision**, it finds many relevant items but the top list may include more noise — consider stronger reranking or feature signals.\n",
       "- A modest Precision in a huge catalog can still be valuable if **Recall** and **NDCG** are strong — the system surfaces relevant items and ranks them well even if many slots remain non-relevant.\n",
       "\n",
       "### ✅ Practical next steps (if you want to improve results)\n",
       "\n",
       "- Verify candidate recall (if many true items never enter the candidate pool, increase pool size or add ANN).\n",
       "- Improve hard-negative mining diversity to teach the reranker harder distinctions.\n",
       "- Add more features (metadata, temporal signals) to the LTR training data.\n",
       "- Consider using stronger encoders (on GPU) or FAISS for ANN retrieval if compute allows."
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Cleanly load & display the saved final metrics table, then give number-free explanations\n",
    "import os\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from IPython.display import display, Markdown\n",
    "\n",
    "# Candidate CSV paths to try (prefer OUT_DIR if available)\n",
    "csv_candidates = []\n",
    "if 'OUT_DIR' in globals() and OUT_DIR:\n",
    "    csv_candidates.append(os.path.join(OUT_DIR, \"final_scale_summary_metrics.csv\"))\n",
    "csv_candidates.extend([\n",
    "    \"final_scale_summary_metrics.csv\",\n",
    "    os.path.join(os.getcwd(), \"final_scale_summary_metrics.csv\"),\n",
    "])\n",
    "\n",
    "# Find a readable CSV\n",
    "metrics_df = None\n",
    "csv_used = None\n",
    "for p in csv_candidates:\n",
    "    if p and os.path.exists(p):\n",
    "        try:\n",
    "            df_try = pd.read_csv(p)\n",
    "            # Basic heuristics for readability: prefer files with expected metric columns\n",
    "            metrics_df = df_try.copy()\n",
    "            csv_used = p\n",
    "            break\n",
    "        except Exception as e:\n",
    "            display(Markdown(f\"**Found file but failed to read** `{p}` — error: `{e}`\"))\n",
    "\n",
    "# If not found, show friendly error\n",
    "if metrics_df is None:\n",
    "    display(Markdown(\"❌ **Could not find or read** `final_scale_summary_metrics.csv` in OUT_DIR or current directory. \"\n",
    "                     \"Make sure the notebook saved it earlier.\"))\n",
    "else:\n",
    "    # ---- CLEANUP ----\n",
    "    df = metrics_df.copy()\n",
    "\n",
    "    # 1) Drop obvious accidental index column (Unnamed: 0 or first column named '0')\n",
    "    if df.columns[0].startswith(\"Unnamed\") or df.columns[0] == \"0\":\n",
    "        df = df.iloc[:, 1:].copy()\n",
    "\n",
    "    # 2) If columns are metrics but are rows (transposed), try to detect and transpose\n",
    "    expected_metrics = {'P@10','R@10','NDCG@10','MAP@10','MPR@10','EvalUsers'}\n",
    "    cols_set = set(df.columns.astype(str))\n",
    "    # If the expected metrics are not in columns but are in the first column values, transpose.\n",
    "    if not expected_metrics.intersection(cols_set):\n",
    "        # check if first column contains metric names\n",
    "        first_col_vals = set(df.iloc[:,0].astype(str).str.strip().tolist())\n",
    "        if expected_metrics.intersection(first_col_vals):\n",
    "            try:\n",
    "                df = df.set_index(df.columns[0]).T.reset_index(drop=True)\n",
    "            except Exception:\n",
    "                pass\n",
    "\n",
    "    # 3) Ensure numeric columns are numeric\n",
    "    for c in df.columns:\n",
    "        # try to coerce numeric-like columns\n",
    "        try:\n",
    "            df[c] = pd.to_numeric(df[c], errors='ignore')\n",
    "        except Exception:\n",
    "            pass\n",
    "\n",
    "    # 4) If no friendly model names in index, create readable labels\n",
    "    if df.index.dtype != 'object' or all(isinstance(i, (int, np.integer, float)) for i in df.index):\n",
    "        # If a 'Model' column exists, use it; otherwise create Model_1, Model_2...\n",
    "        if 'Model' in df.columns:\n",
    "            df = df.set_index('Model')\n",
    "        else:\n",
    "            df.index = [f\"Model_{i+1}\" for i in range(len(df))]\n",
    "\n",
    "    # 5) Reorder columns to expected order where possible\n",
    "    desired_order = ['P@10','R@10','NDCG@10','MAP@10','MPR@10','EvalUsers']\n",
    "    present = [c for c in desired_order if c in df.columns]\n",
    "    others = [c for c in df.columns if c not in present]\n",
    "    df = df[present + others]\n",
    "\n",
    "    # ---- DISPLAY CLEAN TABLE ----\n",
    "    display(Markdown(f\"## 📊 Final evaluation metrics (loaded from `{csv_used}`)\"))\n",
    "    # Format numeric display: 6 decimals for floats, integer for EvalUsers if present\n",
    "    fmt = {}\n",
    "    for c in df.columns:\n",
    "        if c == 'EvalUsers':\n",
    "            fmt[c] = \"{:.0f}\"\n",
    "        else:\n",
    "            # only apply float format if column is numeric\n",
    "            if pd.api.types.is_numeric_dtype(df[c]):\n",
    "                fmt[c] = \"{:.6f}\"\n",
    "            else:\n",
    "                fmt[c] = \"{}\"\n",
    "    display(df.style.format(fmt).set_caption(\"Cleaned final scale summary metrics\"))\n",
    "\n",
    "    # ---- QUALITATIVE COMPARISONS (NO RAW NUMBERS) ----\n",
    "    present_metric_cols = [c for c in ['P@10','R@10','NDCG@10','MAP@10','MPR@10'] if c in df.columns]\n",
    "    qualitative_notes = []\n",
    "\n",
    "    if len(df) == 1:\n",
    "        qualitative_notes.append(\"Only a single model/row is present — no cross-model comparison available.\")\n",
    "    else:\n",
    "        for col in present_metric_cols:\n",
    "            try:\n",
    "                # Determine best model(s) for this metric (higher is better)\n",
    "                best_val = df[col].max()\n",
    "                best_models = df.index[df[col] == best_val].tolist()\n",
    "                if len(best_models) == 1:\n",
    "                    qualitative_notes.append(f\"- **{col}**: top performer — **{best_models[0]}**.\")\n",
    "                else:\n",
    "                    qualitative_notes.append(f\"- **{col}**: top performers (tie) — **{', '.join(best_models)}**.\")\n",
    "            except Exception:\n",
    "                # skip if comparison fails for a column\n",
    "                pass\n",
    "\n",
    "    # ---- HUMAN-FRIENDLY EXPLANATION (NO HARD THRESHOLDS) ----\n",
    "    explanation_lines = [\n",
    "        \"### 📘 Metric meanings (guidance — no numeric thresholds)\",\n",
    "        \"\",\n",
    "        \"- **Precision@10 (P@10)** — Of the top-10 items returned, the fraction that are relevant. In very large catalogs, absolute Precision values can be low while still being useful.\",\n",
    "        \"\",\n",
    "        \"- **Recall@10 (R@10)** — Fraction of the user's relevant items that appear in the top-10. High Recall means good coverage of what the user is likely to want.\",\n",
    "        \"\",\n",
    "        \"- **NDCG@10** — Rewards placing the most relevant items near the top. This is often the primary ranking metric to optimize when user satisfaction depends on top-list order.\",\n",
    "        \"\",\n",
    "        \"- **MAP@10** — Mean Average Precision across users; emphasizes consistent early correct placements.\",\n",
    "        \"\",\n",
    "        \"- **MPR@10** — A rank-based measure capturing how near the top relevant items are on average; complements NDCG/MAP.\",\n",
    "        \"\",\n",
    "        \"- **EvalUsers** — The number of users used for evaluation; larger is more reliable.\",\n",
    "        \"\",\n",
    "        \"### 🔎 How to interpret combinations (qualitative)\",\n",
    "        \"\",\n",
    "        \"- If **NDCG** and **MAP** improve together, the model provides reliably better top-ranked results across users.\",\n",
    "        \"- If a model shows higher **Recall** but lower **Precision**, it finds many relevant items but the top list may include more noise — consider stronger reranking or feature signals.\",\n",
    "        \"- A modest Precision in a huge catalog can still be valuable if **Recall** and **NDCG** are strong — the system surfaces relevant items and ranks them well even if many slots remain non-relevant.\",\n",
    "        \"\",\n",
    "        \"### ✅ Practical next steps (if you want to improve results)\",\n",
    "        \"\",\n",
    "        \"- Verify candidate recall (if many true items never enter the candidate pool, increase pool size or add ANN).\",\n",
    "        \"- Improve hard-negative mining diversity to teach the reranker harder distinctions.\",\n",
    "        \"- Add more features (metadata, temporal signals) to the LTR training data.\",\n",
    "        \"- Consider using stronger encoders (on GPU) or FAISS for ANN retrieval if compute allows.\"\n",
    "    ]\n",
    "\n",
    "    # ---- OUTPUT ----\n",
    "    if qualitative_notes:\n",
    "        display(Markdown(\"### 🔍 Qualitative model winners (per metric)\"))\n",
    "        display(Markdown(\"\\n\".join(qualitative_notes)))\n",
    "    display(Markdown(\"\\n\".join(explanation_lines)))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f7a0489",
   "metadata": {
    "papermill": {
     "duration": 0.035278,
     "end_time": "2025-10-01T19:00:41.291371",
     "exception": false,
     "start_time": "2025-10-01T19:00:41.256093",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7821.457785,
   "end_time": "2025-10-01T19:00:44.159131",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-10-01T16:50:22.701346",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "013411f0a0614938a670335364ece9a0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_56d041faddb442e8b1c8af2fcb731c3e",
       "placeholder": "​",
       "style": "IPY_MODEL_9bab8e6b0b644f63bde7343e6057a113",
       "tabbable": null,
       "tooltip": null,
       "value": " 300/300 [01:12&lt;00:00,  4.16it/s]"
      }
     },
     "014a18297ae74125b70410979afad6cb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0172a9f6502747118e74e657abc534ea": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_65b5dacdc7be463b8cba5f9d6043d92b",
       "max": 53.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_84882c955b2d47fcab22deeea6294dad",
       "tabbable": null,
       "tooltip": null,
       "value": 53.0
      }
     },
     "020a0ff70c474da7afdd03fc1547498f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "026905a30b08493aa1dbf31be106ae5d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "03e8d7f5d8844e8097b8f69ba771acb8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0455649258c94367985afb5230af7f82": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "054b08f4f90244a1ad97d8f592dae370": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "077ca250b79b44eb97f18805cb7cdbc2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ba42974958a24cc19a0c7bffd3ff5840",
       "placeholder": "​",
       "style": "IPY_MODEL_d7045c2c98f5458393af7a0bc871c475",
       "tabbable": null,
       "tooltip": null,
       "value": "Building Meta Prototype: 100%"
      }
     },
     "09d2d9827aaa4e6c9595e3d05a11a074": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_e1a5dbb700884c26bbf05f96eae97ad4",
        "IPY_MODEL_5c7883a0ea6c40c2837aa091f4bbb540",
        "IPY_MODEL_5fc30b132a7a4896970e23bd7b3ca6d9"
       ],
       "layout": "IPY_MODEL_026905a30b08493aa1dbf31be106ae5d",
       "tabbable": null,
       "tooltip": null
      }
     },
     "0a758eef73bc44b1b7e8b449108eaa62": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0aeeec9b8c074906b45fe7d7b7386df7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0dcfabd8adce4bce8ab7f1570c4a9fb0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "0fbf7aafe8fc41ae8445d7f25df50873": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "12802a33841d470faf4bd3fd42e454a6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "13c6cee363a742578a1a2a3428d90c89": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "15a58616889542eda7e830406573c1d3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "17cfed5ac41e4cb699d9246779f09f86": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "18f8c852ac014cc6b0020e23e9551cf9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "19e0ffe57ce94a9b945a0555d3ec8ac8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1c8f946350a7429b9367d0e43f947bd0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9262ff5661fd4909b05a8579b9f125bf",
       "max": 20.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_725045cf9cc84178920175dc8a390e89",
       "tabbable": null,
       "tooltip": null,
       "value": 20.0
      }
     },
     "1d1292ec202140e7a334d658b765b9eb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "1e350f8138e8443487bc1a10b1cb1a08": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_77b1ea07eb7b4c62861810e72129cdce",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_fea0588d7c7d4c4f89c26dec974cf9d0",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "1f546e92cb6d49c99fd0ddd3aca38550": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1f9711ffecbe4321b7860ae714ac4665": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1faf8a0eb8ab4616a6b53f2b89b5da8f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_cceade25a2ce46c3abe84d5bcaed5af8",
        "IPY_MODEL_2c61972406a64753b1c089c8d93408b9",
        "IPY_MODEL_804493eada46468b8abc7731faf5d63e"
       ],
       "layout": "IPY_MODEL_ad14a9dedac44bfbb028c990946425f5",
       "tabbable": null,
       "tooltip": null
      }
     },
     "21539212503143988c5d6607965c1120": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "24763c5df2404da0a600af63ee9f0eaf": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "25629e8fa017413ea9084b661ca37c7d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "258fc989ff8b4c6bad1cda83514ab8a6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9cb0d4c16e80434b88fe9297964f3539",
       "placeholder": "​",
       "style": "IPY_MODEL_6bb020fa84bb4bfd9d342028bef281de",
       "tabbable": null,
       "tooltip": null,
       "value": " 466k/? [00:00&lt;00:00, 28.1MB/s]"
      }
     },
     "264c727453af4fe88f1de13e958464e9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "26d62fb73536400b8369b6a354a1fd4c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "28821979c8454e30a6ba69e94d7768c6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "29727b4fd3774dfc8ab4da8e7747e3ac": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2b12a16691b54a2fa861a16e403cdfdc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2b19a0d536b04cb28d109ceea656b016": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_19e0ffe57ce94a9b945a0555d3ec8ac8",
       "placeholder": "​",
       "style": "IPY_MODEL_f930edb2b869449bbfb99f4c0d5efd16",
       "tabbable": null,
       "tooltip": null,
       "value": "sentence_bert_config.json: 100%"
      }
     },
     "2b958b0060564ea1b6451c669c35828b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2c4e4f0a9dc547899ec1c8023a5ba337": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_8f09506a487548468219a6aed6efc589",
        "IPY_MODEL_6ad3d8f8a7e44525be83ab2cd2a11eed",
        "IPY_MODEL_bbb08574f32d4af3989ec78e715c6b20"
       ],
       "layout": "IPY_MODEL_df02727d786348c4bb3257e02f27ecc4",
       "tabbable": null,
       "tooltip": null
      }
     },
     "2c61972406a64753b1c089c8d93408b9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_481a38bd123b46fcbcba0b25188faac5",
       "max": 349.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_9270c16b54d54c9a908e9b486bd995bc",
       "tabbable": null,
       "tooltip": null,
       "value": 349.0
      }
     },
     "2cfc84acd8f54e258ad2d4c5c12c6a51": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2edeaf821994430db3a158436ce17592": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2ee31b11d15f4cc2884b468699fc60cc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "2f1211af3ee64d4fb370ced2a9c3d88a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "33163ea7f2994c8b826b076dac156101": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "335e0f62400643b48ed68ba64522e7f5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "358639426c6342618a355b66b5644cc5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3603a63c48134290ba337e5e20f17c8b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a8b940e111ce4a68b49a106d520249dc",
       "placeholder": "​",
       "style": "IPY_MODEL_55b0eff878fb48b58d717ac619db1593",
       "tabbable": null,
       "tooltip": null,
       "value": " 239/239 [00:00&lt;00:00, 29.2kB/s]"
      }
     },
     "378b46ba09294d3bb7bf8ba336f9b200": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "38ed2334af824d6d90abedffd630677e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_33163ea7f2994c8b826b076dac156101",
       "max": 35.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_c9ca6375697345bdbaa0d5d9487937aa",
       "tabbable": null,
       "tooltip": null,
       "value": 35.0
      }
     },
     "3912bf30d28247a09dba8b07faf0eb7e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2ee31b11d15f4cc2884b468699fc60cc",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_3b7e5b6d9567486e918ff1792884ee86",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "3ac75489e9134d45a05d486abb1a7015": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a2bd389953334a4bba8fadfb690f8e3c",
        "IPY_MODEL_6fc7ae3f266e45cb9ff055195fd7b724",
        "IPY_MODEL_3603a63c48134290ba337e5e20f17c8b"
       ],
       "layout": "IPY_MODEL_e21a9acf54184c338d89e76e634cea06",
       "tabbable": null,
       "tooltip": null
      }
     },
     "3b7e5b6d9567486e918ff1792884ee86": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "3db320249f7147509d47806778b30af6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_bddde94c69ca4e43adf038bf831776d2",
        "IPY_MODEL_3912bf30d28247a09dba8b07faf0eb7e",
        "IPY_MODEL_8c9e2c5bc4b0451696dd254d37694b61"
       ],
       "layout": "IPY_MODEL_18f8c852ac014cc6b0020e23e9551cf9",
       "tabbable": null,
       "tooltip": null
      }
     },
     "3ef7f0d58c0f4a6a9515f76c7fa9cc39": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ed1eab93d67448a69ac8cae19d401bb0",
        "IPY_MODEL_1c8f946350a7429b9367d0e43f947bd0",
        "IPY_MODEL_e62cef51742548efbd7c5f7799ea665b"
       ],
       "layout": "IPY_MODEL_58448df32e44450bb71518350753fe4b",
       "tabbable": null,
       "tooltip": null
      }
     },
     "3f0ed3dcf3d24bde8e5cbbe5f375ece0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_59e75bf7305b4e36a13280e81d3936b2",
        "IPY_MODEL_4957b8fb179a4b098380bb9d4add9812",
        "IPY_MODEL_d553c856fbd34edfa490e059be940ab6"
       ],
       "layout": "IPY_MODEL_512c2a4eee5a4079b9e7f770f45c4290",
       "tabbable": null,
       "tooltip": null
      }
     },
     "3f3a7fcad34643078b1c0db0c9902419": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4019d323932a46139c27c37ef850d53b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_d1a8492f07c846e19744321edcffb7fe",
        "IPY_MODEL_38ed2334af824d6d90abedffd630677e",
        "IPY_MODEL_9ef07afdbb7148fbb160d281b2696696"
       ],
       "layout": "IPY_MODEL_f03c1401efee4667bed4c4d9a4a29200",
       "tabbable": null,
       "tooltip": null
      }
     },
     "411d58bb75bd450bb945e9075249fd0a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c5babd754cf14f8db1c35cfb178f7d06",
       "placeholder": "​",
       "style": "IPY_MODEL_0aeeec9b8c074906b45fe7d7b7386df7",
       "tabbable": null,
       "tooltip": null,
       "value": "tokenizer_config.json: 100%"
      }
     },
     "414f1e55c28c4ccfa67cf33f0bddcba5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e2d6c1b900c24ee7ad490d6ee2a35fc8",
       "max": 1561.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_d19908765bee451188a9f3c2994b7ac3",
       "tabbable": null,
       "tooltip": null,
       "value": 1561.0
      }
     },
     "436470c40d3f49df8092c01019677f40": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "453dc5788eaa48a395af641ba5f08f5d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4754f61db27540d4b042a8d588d10f23": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "481a38bd123b46fcbcba0b25188faac5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4957b8fb179a4b098380bb9d4add9812": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_da5f655bf88f4c559015a2b219174eec",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_79618b0d88054af3a76751731e81b80e",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "4983e1d3ecf54a7a8455549da36bcef4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_73fdf41339f74fe19bb9fa9424e3531c",
       "placeholder": "​",
       "style": "IPY_MODEL_1d1292ec202140e7a334d658b765b9eb",
       "tabbable": null,
       "tooltip": null,
       "value": " 30.3k/? [00:00&lt;00:00, 2.40MB/s]"
      }
     },
     "4b8579e38acf4c11a1827bf5097543dc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "4c5a12c48c284281b99aa8dd438f4f6e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4d0790b773be438ba0a4dfff0339bdcf": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4e788390e896400ab134af9b517a3bff": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "5021385d64724584a4fb9ecc47ed818d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "512c2a4eee5a4079b9e7f770f45c4290": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "51909eec79364e4eb76773ef9a181ead": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d47d32201f4444bb8b3eaab6596e49ba",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_8186e0e7d4aa461d97d84d830f5fcb79",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "5504ba9e87ab45948f3a93696d163021": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "55b0eff878fb48b58d717ac619db1593": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "56d041faddb442e8b1c8af2fcb731c3e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "57575cb62e5544e992ea7dea06e172ad": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_63a4bc2cd4b04adda0834656b1a5b7e6",
       "placeholder": "​",
       "style": "IPY_MODEL_b5b76160183a44bc9d384641584be2f7",
       "tabbable": null,
       "tooltip": null,
       "value": "config.json: 100%"
      }
     },
     "58125d2f5db14dd6aa0a98bd30e83568": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "58448df32e44450bb71518350753fe4b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "58bc386ea3314dc5a16613ce6408e2a0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "58e23ced0da34b3db079930c313fda11": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "5979a03518e746b688c5cdc24e9487c6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "59e75bf7305b4e36a13280e81d3936b2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6a1b363da322421f908b6c6d0f8b066b",
       "placeholder": "​",
       "style": "IPY_MODEL_eb03303569e64af8ac9daadaf0c4aa12",
       "tabbable": null,
       "tooltip": null,
       "value": "vocab.txt: "
      }
     },
     "5c7883a0ea6c40c2837aa091f4bbb540": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_eb4531a1e3484639a64a82dbf24c81e6",
       "max": 116.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_6baca3ddc4f44e9e82924e45cd176aa1",
       "tabbable": null,
       "tooltip": null,
       "value": 116.0
      }
     },
     "5cb2276fbf4e408ba313a086630cf6e0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5ea1f0f3dd2546fcaa2282f892b7b1fa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "5ef5651c9d844ea48b7e44c6b19f14f6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_58125d2f5db14dd6aa0a98bd30e83568",
       "placeholder": "​",
       "style": "IPY_MODEL_13c6cee363a742578a1a2a3428d90c89",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating semantic_final_topk: 100%"
      }
     },
     "5fc30b132a7a4896970e23bd7b3ca6d9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2edeaf821994430db3a158436ce17592",
       "placeholder": "​",
       "style": "IPY_MODEL_91585d8e53b448959f30d3b586e178e9",
       "tabbable": null,
       "tooltip": null,
       "value": " 116/116 [00:00&lt;00:00, 12.0kB/s]"
      }
     },
     "60261a61cb3f474e877e88db932c738e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "63a4bc2cd4b04adda0834656b1a5b7e6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "64ebd407630c4045985ffa2438a18e5b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d615eb94dbe44a37bd6eab7103465458",
       "placeholder": "​",
       "style": "IPY_MODEL_93150dd21e48423b888a7dd20b84d706",
       "tabbable": null,
       "tooltip": null,
       "value": "Amazon-Reviews-2023.py: "
      }
     },
     "64ee8548313742419ef400670cc6f85c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4d0790b773be438ba0a4dfff0339bdcf",
       "placeholder": "​",
       "style": "IPY_MODEL_862eedf9daaf498b825aaeddd3b67171",
       "tabbable": null,
       "tooltip": null,
       "value": " 1561/1561 [58:19&lt;00:00,  2.27s/it]"
      }
     },
     "653a07e2c66b48cc81b8e0ffa78063a0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "65b5dacdc7be463b8cba5f9d6043d92b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "65e47cf5e6ce4178a1d774b6e1068921": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "664570293f504940a9cc66992d73cd5e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "68f33b8b385d488bb180a06c43659f75": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "69878c8f8e9549a89d347072230cf676": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5021385d64724584a4fb9ecc47ed818d",
       "max": 571.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_def83b17343a459c9d2e0e4fea74d032",
       "tabbable": null,
       "tooltip": null,
       "value": 571.0
      }
     },
     "6a1b363da322421f908b6c6d0f8b066b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6ad3d8f8a7e44525be83ab2cd2a11eed": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_aec103c90abc4f1893d468db0db3c3ac",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_58bc386ea3314dc5a16613ce6408e2a0",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "6b1583f88a714a30a62e0fd5237f2bba": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_efd9acb800a1492ea81e3d0627f54d52",
        "IPY_MODEL_e42540ae1172475dbeb2a9cccffeea3b",
        "IPY_MODEL_258fc989ff8b4c6bad1cda83514ab8a6"
       ],
       "layout": "IPY_MODEL_1f9711ffecbe4321b7860ae714ac4665",
       "tabbable": null,
       "tooltip": null
      }
     },
     "6baca3ddc4f44e9e82924e45cd176aa1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "6bb020fa84bb4bfd9d342028bef281de": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6c065fa46b51415c951e337f357f005b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_68f33b8b385d488bb180a06c43659f75",
       "placeholder": "​",
       "style": "IPY_MODEL_2b958b0060564ea1b6451c669c35828b",
       "tabbable": null,
       "tooltip": null,
       "value": " 39.6k/? [00:00&lt;00:00, 3.67MB/s]"
      }
     },
     "6ca12819e72b41e7b7a1ec30855aabfd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_57575cb62e5544e992ea7dea06e172ad",
        "IPY_MODEL_fc255ba3d7fb4855bd11fcf1157f5d26",
        "IPY_MODEL_ad2198395e1846659fdd7b98b00a1935"
       ],
       "layout": "IPY_MODEL_453dc5788eaa48a395af641ba5f08f5d",
       "tabbable": null,
       "tooltip": null
      }
     },
     "6d4d9690138a4495a9d4e55facffc157": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_5ef5651c9d844ea48b7e44c6b19f14f6",
        "IPY_MODEL_f8bbac77a608484796c13a2c1406a858",
        "IPY_MODEL_fd104b9af4a748bb87077feed5bddb32"
       ],
       "layout": "IPY_MODEL_65e47cf5e6ce4178a1d774b6e1068921",
       "tabbable": null,
       "tooltip": null
      }
     },
     "6eac3becc96f44c895f433b894f0e1cc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6f352aa28d194b0fa3c176b0e4a4b54b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6fc7ae3f266e45cb9ff055195fd7b724": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_15a58616889542eda7e830406573c1d3",
       "max": 239.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_653a07e2c66b48cc81b8e0ffa78063a0",
       "tabbable": null,
       "tooltip": null,
       "value": 239.0
      }
     },
     "708e206324ac4ee99a0269eb81d3e795": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "725045cf9cc84178920175dc8a390e89": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "73fdf41339f74fe19bb9fa9424e3531c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "76f3bae7ae2c427293597c0771f93a5e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "77b1ea07eb7b4c62861810e72129cdce": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "78d38a0c1cf14592b7b456b533010860": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b153a7c2be3e4d738f64839f9e426c4c",
       "placeholder": "​",
       "style": "IPY_MODEL_5979a03518e746b688c5cdc24e9487c6",
       "tabbable": null,
       "tooltip": null,
       "value": " 363/363 [00:00&lt;00:00, 38.9kB/s]"
      }
     },
     "79618b0d88054af3a76751731e81b80e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "7b0e8334c2da4bcda5fee12bfab80e73": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_436470c40d3f49df8092c01019677f40",
       "placeholder": "​",
       "style": "IPY_MODEL_b4a11341c0f347f0a3c6b2168b659141",
       "tabbable": null,
       "tooltip": null,
       "value": "config.json: 100%"
      }
     },
     "7bf30652b1954f25a7d56a43db791283": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1f546e92cb6d49c99fd0ddd3aca38550",
       "placeholder": "​",
       "style": "IPY_MODEL_eb740f99a3bd43de92e93823d18305b3",
       "tabbable": null,
       "tooltip": null,
       "value": " 571/571 [00:00&lt;00:00, 66.9kB/s]"
      }
     },
     "7d92e3f8cfc44eea80ebe570914295e5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_077ca250b79b44eb97f18805cb7cdbc2",
        "IPY_MODEL_9e9e12a0720b4796a97a49611f2f8d40",
        "IPY_MODEL_013411f0a0614938a670335364ece9a0"
       ],
       "layout": "IPY_MODEL_0fbf7aafe8fc41ae8445d7f25df50873",
       "tabbable": null,
       "tooltip": null
      }
     },
     "7daaa993a87947948ddfb7ca95638b2d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "804493eada46468b8abc7731faf5d63e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4c5a12c48c284281b99aa8dd438f4f6e",
       "placeholder": "​",
       "style": "IPY_MODEL_f9c065fe7ec54b6787c98b85a3788ba9",
       "tabbable": null,
       "tooltip": null,
       "value": " 349/349 [00:00&lt;00:00, 37.3kB/s]"
      }
     },
     "8186e0e7d4aa461d97d84d830f5fcb79": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "84882c955b2d47fcab22deeea6294dad": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "858b8cd2d3f5488f90cec5aca741d38e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_7b0e8334c2da4bcda5fee12bfab80e73",
        "IPY_MODEL_69878c8f8e9549a89d347072230cf676",
        "IPY_MODEL_7bf30652b1954f25a7d56a43db791283"
       ],
       "layout": "IPY_MODEL_0a758eef73bc44b1b7e8b449108eaa62",
       "tabbable": null,
       "tooltip": null
      }
     },
     "862eedf9daaf498b825aaeddd3b67171": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "8780dfe790104a13adcb2cf3a9344e5e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "8c3c265bd9634412823f962b7c3d1c1e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_64ebd407630c4045985ffa2438a18e5b",
        "IPY_MODEL_51909eec79364e4eb76773ef9a181ead",
        "IPY_MODEL_6c065fa46b51415c951e337f357f005b"
       ],
       "layout": "IPY_MODEL_17cfed5ac41e4cb699d9246779f09f86",
       "tabbable": null,
       "tooltip": null
      }
     },
     "8c9e2c5bc4b0451696dd254d37694b61": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f9428c22c8964fceb9dc1ff765330714",
       "placeholder": "​",
       "style": "IPY_MODEL_5504ba9e87ab45948f3a93696d163021",
       "tabbable": null,
       "tooltip": null,
       "value": " 11.6k/? [00:00&lt;00:00, 1.22MB/s]"
      }
     },
     "8f09506a487548468219a6aed6efc589": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e0085db34ffa40a0a9f5771b48616046",
       "placeholder": "​",
       "style": "IPY_MODEL_25629e8fa017413ea9084b661ca37c7d",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating lgbm_final_topk: 100%"
      }
     },
     "91585d8e53b448959f30d3b586e178e9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9262ff5661fd4909b05a8579b9f125bf": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9270c16b54d54c9a908e9b486bd995bc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "93150dd21e48423b888a7dd20b84d706": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9bab8e6b0b644f63bde7343e6057a113": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9cb0d4c16e80434b88fe9297964f3539": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9cf5e6f704dd46b78349f930eb78a439": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9dd4b1ada2004aa0867aa733ef01249f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9e27289441d648c891dec7025e3bb8c8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9e542260ab6e4467a28b7718683ec87d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fe67f4ac7f2449aea0d1acad5d5ec0e1",
       "max": 20.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_8780dfe790104a13adcb2cf3a9344e5e",
       "tabbable": null,
       "tooltip": null,
       "value": 20.0
      }
     },
     "9e9e12a0720b4796a97a49611f2f8d40": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b7c62c2f8d1348f8a4ab2ba67e1e14bc",
       "max": 300.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_58e23ced0da34b3db079930c313fda11",
       "tabbable": null,
       "tooltip": null,
       "value": 300.0
      }
     },
     "9ef07afdbb7148fbb160d281b2696696": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ff267632f9454bdebc43f0a8adb99cd9",
       "placeholder": "​",
       "style": "IPY_MODEL_9dd4b1ada2004aa0867aa733ef01249f",
       "tabbable": null,
       "tooltip": null,
       "value": " 35/35 [30:30&lt;00:00, 50.93s/it]"
      }
     },
     "a2bd389953334a4bba8fadfb690f8e3c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_358639426c6342618a355b66b5644cc5",
       "placeholder": "​",
       "style": "IPY_MODEL_e2a8e857139046e0b8e0ff4ce851f254",
       "tabbable": null,
       "tooltip": null,
       "value": "special_tokens_map.json: 100%"
      }
     },
     "a67aa9c297034b03af98eca91ce1239d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_d3215790592d499da68870dd37de2399",
        "IPY_MODEL_9e542260ab6e4467a28b7718683ec87d",
        "IPY_MODEL_b883c303577a4517b8a77b42b0bc8714"
       ],
       "layout": "IPY_MODEL_9e27289441d648c891dec7025e3bb8c8",
       "tabbable": null,
       "tooltip": null
      }
     },
     "a8b940e111ce4a68b49a106d520249dc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ad14a9dedac44bfbb028c990946425f5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ad2198395e1846659fdd7b98b00a1935": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6f352aa28d194b0fa3c176b0e4a4b54b",
       "placeholder": "​",
       "style": "IPY_MODEL_da624ddec9944d2ca7f447e64c086a48",
       "tabbable": null,
       "tooltip": null,
       "value": " 190/190 [00:00&lt;00:00, 21.8kB/s]"
      }
     },
     "aec103c90abc4f1893d468db0db3c3ac": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "afa22c1c53e8473eb2138e87a3d632c8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b05f49a7431444f98ef935c0b63381df": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_26d62fb73536400b8369b6a354a1fd4c",
       "placeholder": "​",
       "style": "IPY_MODEL_4754f61db27540d4b042a8d588d10f23",
       "tabbable": null,
       "tooltip": null,
       "value": "README.md: "
      }
     },
     "b153a7c2be3e4d738f64839f9e426c4c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b30f0c6b6c684efba22aa046eecf9368": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_020a0ff70c474da7afdd03fc1547498f",
       "placeholder": "​",
       "style": "IPY_MODEL_6eac3becc96f44c895f433b894f0e1cc",
       "tabbable": null,
       "tooltip": null,
       "value": " 53.0/53.0 [00:00&lt;00:00, 5.41kB/s]"
      }
     },
     "b4a11341c0f347f0a3c6b2168b659141": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b5b76160183a44bc9d384641584be2f7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b7c62c2f8d1348f8a4ab2ba67e1e14bc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b883c303577a4517b8a77b42b0bc8714": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_60261a61cb3f474e877e88db932c738e",
       "placeholder": "​",
       "style": "IPY_MODEL_28821979c8454e30a6ba69e94d7768c6",
       "tabbable": null,
       "tooltip": null,
       "value": " 20/20 [00:01&lt;00:00, 19.39it/s]"
      }
     },
     "ba0ccb7ef39b48188aa8af52c27de4c6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ba158b32b5b84a8e9af69a4f03cd5d2a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_054b08f4f90244a1ad97d8f592dae370",
       "placeholder": "​",
       "style": "IPY_MODEL_cfbcf7bc4cdf4abaa90c1ef86ae278e4",
       "tabbable": null,
       "tooltip": null,
       "value": "Building Meta Scale: 100%"
      }
     },
     "ba42974958a24cc19a0c7bffd3ff5840": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bbb08574f32d4af3989ec78e715c6b20": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fe723e3ed5a047118fe14300ee7200ad",
       "placeholder": "​",
       "style": "IPY_MODEL_fdcd517288114c1b8ec7d9e0b1f25606",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [37:28&lt;00:00,  2.18s/it]"
      }
     },
     "bddde94c69ca4e43adf038bf831776d2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5cb2276fbf4e408ba313a086630cf6e0",
       "placeholder": "​",
       "style": "IPY_MODEL_4e788390e896400ab134af9b517a3bff",
       "tabbable": null,
       "tooltip": null,
       "value": "README.md: "
      }
     },
     "bf10c66958b14ae5ba299936f377ca1a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2b12a16691b54a2fa861a16e403cdfdc",
       "placeholder": "​",
       "style": "IPY_MODEL_5ea1f0f3dd2546fcaa2282f892b7b1fa",
       "tabbable": null,
       "tooltip": null,
       "value": " 438M/438M [00:01&lt;00:00, 397MB/s]"
      }
     },
     "c177cdedc3f1457083985f53c30f36d7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ba158b32b5b84a8e9af69a4f03cd5d2a",
        "IPY_MODEL_414f1e55c28c4ccfa67cf33f0bddcba5",
        "IPY_MODEL_64ee8548313742419ef400670cc6f85c"
       ],
       "layout": "IPY_MODEL_76f3bae7ae2c427293597c0771f93a5e",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c4fb095cb2394041a36b72a33029f1ea": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c5babd754cf14f8db1c35cfb178f7d06": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c5d2930a8b9b43e0b7c584f0ebf9867a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c8669952b3544d1092c1bc22570edae3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_411d58bb75bd450bb945e9075249fd0a",
        "IPY_MODEL_daadbd98a05440e1b686de157fb535dc",
        "IPY_MODEL_78d38a0c1cf14592b7b456b533010860"
       ],
       "layout": "IPY_MODEL_3f3a7fcad34643078b1c0db0c9902419",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c9ca6375697345bdbaa0d5d9487937aa": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "cceade25a2ce46c3abe84d5bcaed5af8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_378b46ba09294d3bb7bf8ba336f9b200",
       "placeholder": "​",
       "style": "IPY_MODEL_2f1211af3ee64d4fb370ced2a9c3d88a",
       "tabbable": null,
       "tooltip": null,
       "value": "modules.json: 100%"
      }
     },
     "cfbcf7bc4cdf4abaa90c1ef86ae278e4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d1246f3b478142d08c4dbd2e65bde51f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_f41b9d08f5d445a785161982011e4941",
        "IPY_MODEL_d6090305457b4a308d8b5750493c3b98",
        "IPY_MODEL_bf10c66958b14ae5ba299936f377ca1a"
       ],
       "layout": "IPY_MODEL_ba0ccb7ef39b48188aa8af52c27de4c6",
       "tabbable": null,
       "tooltip": null
      }
     },
     "d19908765bee451188a9f3c2994b7ac3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "d1a8492f07c846e19744321edcffb7fe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fb36fc410b0244dfa7c1cf7e0ca71693",
       "placeholder": "​",
       "style": "IPY_MODEL_f17040c5563348e88c2ba98084f54020",
       "tabbable": null,
       "tooltip": null,
       "value": "SBERT encode: 100%"
      }
     },
     "d3215790592d499da68870dd37de2399": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_014a18297ae74125b70410979afad6cb",
       "placeholder": "​",
       "style": "IPY_MODEL_dd84f15158b74bb2b97b355849fdc114",
       "tabbable": null,
       "tooltip": null,
       "value": "100%"
      }
     },
     "d47d32201f4444bb8b3eaab6596e49ba": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "d553c856fbd34edfa490e059be940ab6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c4fb095cb2394041a36b72a33029f1ea",
       "placeholder": "​",
       "style": "IPY_MODEL_da16602d9d2f472da254d3b940885353",
       "tabbable": null,
       "tooltip": null,
       "value": " 232k/? [00:00&lt;00:00, 17.7MB/s]"
      }
     },
     "d6090305457b4a308d8b5750493c3b98": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c5d2930a8b9b43e0b7c584f0ebf9867a",
       "max": 437971872.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_12802a33841d470faf4bd3fd42e454a6",
       "tabbable": null,
       "tooltip": null,
       "value": 437971872.0
      }
     },
     "d615eb94dbe44a37bd6eab7103465458": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d7045c2c98f5458393af7a0bc871c475": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d8d3acf929b2465b80ea136d1af375c1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_2b19a0d536b04cb28d109ceea656b016",
        "IPY_MODEL_0172a9f6502747118e74e657abc534ea",
        "IPY_MODEL_b30f0c6b6c684efba22aa046eecf9368"
       ],
       "layout": "IPY_MODEL_9cf5e6f704dd46b78349f930eb78a439",
       "tabbable": null,
       "tooltip": null
      }
     },
     "da16602d9d2f472da254d3b940885353": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "da5f655bf88f4c559015a2b219174eec": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "da624ddec9944d2ca7f447e64c086a48": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "daadbd98a05440e1b686de157fb535dc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_afa22c1c53e8473eb2138e87a3d632c8",
       "max": 363.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_f833582593d5474bbc61394d4666122f",
       "tabbable": null,
       "tooltip": null,
       "value": 363.0
      }
     },
     "dd84f15158b74bb2b97b355849fdc114": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "def83b17343a459c9d2e0e4fea74d032": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "df02727d786348c4bb3257e02f27ecc4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e0085db34ffa40a0a9f5771b48616046": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e1a5dbb700884c26bbf05f96eae97ad4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_664570293f504940a9cc66992d73cd5e",
       "placeholder": "​",
       "style": "IPY_MODEL_0455649258c94367985afb5230af7f82",
       "tabbable": null,
       "tooltip": null,
       "value": "config_sentence_transformers.json: 100%"
      }
     },
     "e21a9acf54184c338d89e76e634cea06": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e2a8e857139046e0b8e0ff4ce851f254": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e2d6c1b900c24ee7ad490d6ee2a35fc8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e42540ae1172475dbeb2a9cccffeea3b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0dcfabd8adce4bce8ab7f1570c4a9fb0",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_264c727453af4fe88f1de13e958464e9",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "e62cef51742548efbd7c5f7799ea665b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_335e0f62400643b48ed68ba64522e7f5",
       "placeholder": "​",
       "style": "IPY_MODEL_03e8d7f5d8844e8097b8f69ba771acb8",
       "tabbable": null,
       "tooltip": null,
       "value": " 20/20 [00:01&lt;00:00, 14.39it/s]"
      }
     },
     "eb03303569e64af8ac9daadaf0c4aa12": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "eb4531a1e3484639a64a82dbf24c81e6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "eb740f99a3bd43de92e93823d18305b3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ed1eab93d67448a69ac8cae19d401bb0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7daaa993a87947948ddfb7ca95638b2d",
       "placeholder": "​",
       "style": "IPY_MODEL_f9fdc1c2fe584ea2b7a6a72405c5c72e",
       "tabbable": null,
       "tooltip": null,
       "value": "Best trial: 0. Best value: -0: 100%"
      }
     },
     "efd9acb800a1492ea81e3d0627f54d52": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f96dfbe4d3bd4ec8a84e06ca97c68feb",
       "placeholder": "​",
       "style": "IPY_MODEL_4b8579e38acf4c11a1827bf5097543dc",
       "tabbable": null,
       "tooltip": null,
       "value": "tokenizer.json: "
      }
     },
     "f03c1401efee4667bed4c4d9a4a29200": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f17040c5563348e88c2ba98084f54020": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f41b9d08f5d445a785161982011e4941": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fa1518d26129465cb7ae8add8029ccba",
       "placeholder": "​",
       "style": "IPY_MODEL_f814c12b454c4b7f8473b93244e3e75c",
       "tabbable": null,
       "tooltip": null,
       "value": "model.safetensors: 100%"
      }
     },
     "f46dd85affb1410db537bb5757c6a29d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f814c12b454c4b7f8473b93244e3e75c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f8268315452a4fb4a23fe7cbf9a84827": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_b05f49a7431444f98ef935c0b63381df",
        "IPY_MODEL_1e350f8138e8443487bc1a10b1cb1a08",
        "IPY_MODEL_4983e1d3ecf54a7a8455549da36bcef4"
       ],
       "layout": "IPY_MODEL_24763c5df2404da0a600af63ee9f0eaf",
       "tabbable": null,
       "tooltip": null
      }
     },
     "f833582593d5474bbc61394d4666122f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "f8bbac77a608484796c13a2c1406a858": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2cfc84acd8f54e258ad2d4c5c12c6a51",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_708e206324ac4ee99a0269eb81d3e795",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "f930edb2b869449bbfb99f4c0d5efd16": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f9428c22c8964fceb9dc1ff765330714": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f96dfbe4d3bd4ec8a84e06ca97c68feb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f9c065fe7ec54b6787c98b85a3788ba9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f9fdc1c2fe584ea2b7a6a72405c5c72e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "fa1518d26129465cb7ae8add8029ccba": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fb36fc410b0244dfa7c1cf7e0ca71693": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fc255ba3d7fb4855bd11fcf1157f5d26": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_29727b4fd3774dfc8ab4da8e7747e3ac",
       "max": 190.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_fc8579411bf34ad296c8c4676f9a5c7c",
       "tabbable": null,
       "tooltip": null,
       "value": 190.0
      }
     },
     "fc8579411bf34ad296c8c4676f9a5c7c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "fd104b9af4a748bb87077feed5bddb32": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f46dd85affb1410db537bb5757c6a29d",
       "placeholder": "​",
       "style": "IPY_MODEL_21539212503143988c5d6607965c1120",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [00:09&lt;00:00, 111.82it/s]"
      }
     },
     "fdcd517288114c1b8ec7d9e0b1f25606": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "fe67f4ac7f2449aea0d1acad5d5ec0e1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fe723e3ed5a047118fe14300ee7200ad": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fea0588d7c7d4c4f89c26dec974cf9d0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "ff267632f9454bdebc43f0a8adb99cd9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
