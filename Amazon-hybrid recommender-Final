{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1f1ad15a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T19:38:35.804712Z",
     "iopub.status.busy": "2025-10-01T19:38:35.804374Z",
     "iopub.status.idle": "2025-10-01T19:38:38.223324Z",
     "shell.execute_reply": "2025-10-01T19:38:38.221809Z"
    },
    "papermill": {
     "duration": 2.431943,
     "end_time": "2025-10-01T19:38:38.225544",
     "exception": false,
     "start_time": "2025-10-01T19:38:35.793601",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cee5a360",
   "metadata": {
    "papermill": {
     "duration": 0.007415,
     "end_time": "2025-10-01T19:38:38.242815",
     "exception": false,
     "start_time": "2025-10-01T19:38:38.235400",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Variant: Run with 100,000 sample rows (second phase)\n",
    "\n",
    "This variant includes `SAMPLE_ROWS=100000`. To actually restrict the dataset to 100k rows, add `.sample(SAMPLE_ROWS, random_state=42)` to the cell that loads the CSV (or adapt that read to use SAMPLE_ROWS). The rest of the notebook is unchanged and contains detailed explanations before each original code cell."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "710db231",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T19:38:38.259803Z",
     "iopub.status.busy": "2025-10-01T19:38:38.259363Z",
     "iopub.status.idle": "2025-10-01T19:38:38.265286Z",
     "shell.execute_reply": "2025-10-01T19:38:38.263883Z"
    },
    "papermill": {
     "duration": 0.016541,
     "end_time": "2025-10-01T19:38:38.267150",
     "exception": false,
     "start_time": "2025-10-01T19:38:38.250609",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "SAMPLE_ROWS = 100000  # set to 10000 to use a 100k-sample in the data-loading step\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c5ed25c",
   "metadata": {
    "papermill": {
     "duration": 0.007559,
     "end_time": "2025-10-01T19:38:38.282590",
     "exception": false,
     "start_time": "2025-10-01T19:38:38.275031",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Amazon Hybrid Recommender — Final Notebook\n",
    "\n",
    "Comprehensive, runnable notebook containing prototype and scale stages, candidate generation, feature engineering, hard-negative mining, LightGBM ranking, diagnostics, and recommendations. This version contains full code and explanatory markdowns. Run cells sequentially. Some cells are resource-heavy (SBERT encoding, ALS, FAISS). The notebook includes CPU fallbacks for environments without `implicit` or `faiss`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a927f1ac",
   "metadata": {
    "papermill": {
     "duration": 0.007592,
     "end_time": "2025-10-01T19:38:38.297971",
     "exception": false,
     "start_time": "2025-10-01T19:38:38.290379",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## How to run\n",
    "\n",
    "1. Run top-to-bottom. If your environment is offline or lacks `implicit`/`faiss`, the notebook falls back to CPU-friendly alternatives.\n",
    "2. The notebook writes artifact files to `OUT_DIR` (default `/kaggle/working`).\n",
    "3. If you install new packages mid-run (e.g., `implicit`), you may need to restart the kernel.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64b20245",
   "metadata": {
    "papermill": {
     "duration": 0.007398,
     "end_time": "2025-10-01T19:38:38.314958",
     "exception": false,
     "start_time": "2025-10-01T19:38:38.307560",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 3\n",
    "\n",
    "**Purpose:** Imports libraries used later.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Cell 1: Setup — Install-check and imports (non-blocking installs)` → Comment describing intent.\n",
    "- `# Optional: uncomment pip installs if you have internet and want to ensure all libs are present.` → Comment describing intent.\n",
    "- `!pip install -q datasets sentence-transformers scikit-learn lightgbm optuna joblib tqdm pandas scipy faiss-cpu implicit` → Performs a step relevant to data processing or modelling.\n",
    "- `import os, time, warnings, importlib` → Imports module(s).\n",
    "- `import numpy as np, pandas as pd, random, joblib` → Imports module(s).\n",
    "- `from collections import Counter, defaultdict` → Imports module(s).\n",
    "- `from scipy.sparse import csr_matrix` → Imports module(s).\n",
    "- `from tqdm.auto import tqdm` → Imports module(s).\n",
    "- `from math import log2` → Imports module(s).\n",
    "- `warnings.filterwarnings('ignore', category=UserWarning)` → Performs a step relevant to data processing or modelling.\n",
    "- `# Feature list and output directory (kept consistent with original notebook)` → Comment describing intent.\n",
    "- `OUT_DIR = '/kaggle/working'` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e6b20db2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T19:38:38.332518Z",
     "iopub.status.busy": "2025-10-01T19:38:38.332158Z",
     "iopub.status.idle": "2025-10-01T19:40:32.775740Z",
     "shell.execute_reply": "2025-10-01T19:40:32.774442Z"
    },
    "papermill": {
     "duration": 114.455633,
     "end_time": "2025-10-01T19:40:32.778326",
     "exception": false,
     "start_time": "2025-10-01T19:38:38.322693",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m31.4/31.4 MB\u001b[0m \u001b[31m48.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.9/8.9 MB\u001b[0m \u001b[31m78.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m193.6/193.6 kB\u001b[0m \u001b[31m9.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m69.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m56.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m31.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m6.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m28.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m2.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m3.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m26.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "bigframes 2.8.0 requires google-cloud-bigquery-storage<3.0.0,>=2.30.0, which is not installed.\r\n",
      "cesium 0.12.4 requires numpy<3.0,>=2.0, but you have numpy 1.26.4 which is incompatible.\r\n",
      "gcsfs 2025.3.2 requires fsspec==2025.3.2, but you have fsspec 2025.3.0 which is incompatible.\r\n",
      "bigframes 2.8.0 requires google-cloud-bigquery[bqstorage,pandas]>=3.31.0, but you have google-cloud-bigquery 3.25.0 which is incompatible.\r\n",
      "bigframes 2.8.0 requires rich<14,>=12.4.4, but you have rich 14.0.0 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0mEnvironment flags — HAS_SBERT: True HAS_IMPLICIT: True HAS_FAISS: True\n"
     ]
    }
   ],
   "source": [
    "# Cell 1: Setup — Install-check and imports (non-blocking installs)\n",
    "# Optional: uncomment pip installs if you have internet and want to ensure all libs are present.\n",
    "!pip install -q datasets sentence-transformers scikit-learn lightgbm optuna joblib tqdm pandas scipy faiss-cpu implicit\n",
    "\n",
    "import os, time, warnings, importlib\n",
    "import numpy as np, pandas as pd, random, joblib\n",
    "from collections import Counter, defaultdict\n",
    "from scipy.sparse import csr_matrix\n",
    "from tqdm.auto import tqdm\n",
    "from math import log2\n",
    "\n",
    "warnings.filterwarnings('ignore', category=UserWarning)\n",
    "\n",
    "# Feature list and output directory (kept consistent with original notebook)\n",
    "OUT_DIR = '/kaggle/working'\n",
    "feature_names = ['sem_score','sem_rank','als_score','als_rank','svd_score','svd_rank','pop_log','pop_rank','recency_days','title_len','txt_len','user_mean_rating','user_activity_count']\n",
    "feat_cols = feature_names\n",
    "now_ts = int(time.time() * 1000)\n",
    "\n",
    "# Flags for optional libs — later cells use these flags to decide runtime paths\n",
    "HAS_IMPLICIT = importlib.util.find_spec('implicit') is not None\n",
    "HAS_FAISS = importlib.util.find_spec('faiss') is not None\n",
    "HAS_SBERT = importlib.util.find_spec('sentence_transformers') is not None\n",
    "\n",
    "print('Environment flags — HAS_SBERT:', HAS_SBERT, 'HAS_IMPLICIT:', HAS_IMPLICIT, 'HAS_FAISS:', HAS_FAISS)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2021ed69",
   "metadata": {
    "papermill": {
     "duration": 0.04408,
     "end_time": "2025-10-01T19:40:32.866473",
     "exception": false,
     "start_time": "2025-10-01T19:40:32.822393",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1 — Prototype Data Load (10k)\n",
    "\n",
    "Load a small streaming sample (10k rows) from the Hugging Face Amazon Reviews dataset to iterate quickly and debug logic. This cell normalizes timestamps to milliseconds, drops records missing `asin` or `reviewerID`, and writes `sampled_reviews_10k.parquet` to `OUT_DIR`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56b100de",
   "metadata": {
    "papermill": {
     "duration": 0.044593,
     "end_time": "2025-10-01T19:40:32.955920",
     "exception": false,
     "start_time": "2025-10-01T19:40:32.911327",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 5\n",
    "\n",
    "**Purpose:** Imports libraries used later. Saves results or models to disk.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Prototype Data Load (10k)` → Comment describing intent.\n",
    "- `SAMPLE_N = 10000` → Performs a step relevant to data processing or modelling.\n",
    "- `HF_DATASET = 'McAuley-Lab/Amazon-Reviews-2023'` → Performs a step relevant to data processing or modelling.\n",
    "- `HF_CONFIG = 'raw_review_Electronics'` → Performs a step relevant to data processing or modelling.\n",
    "- `OUT_DIR = OUT_DIR if 'OUT_DIR' in globals() else '/kaggle/working'` → Performs a step relevant to data processing or modelling.\n",
    "- `from datasets import load_dataset` → Imports module(s).\n",
    "- `rows = []` → Performs a step relevant to data processing or modelling.\n",
    "- `cnt = 0` → Performs a step relevant to data processing or modelling.\n",
    "- `t0 = time.time()` → Performs a step relevant to data processing or modelling.\n",
    "- `ds_iter = load_dataset(HF_DATASET, HF_CONFIG, split='full', streaming=True, trust_remote_code=True)` → Performs a step relevant to data processing or modelling.\n",
    "- `for rec in ds_iter:` → Performs a step relevant to data processing or modelling.\n",
    "- `try:` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b5427c39",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T19:40:33.198071Z",
     "iopub.status.busy": "2025-10-01T19:40:33.197526Z",
     "iopub.status.idle": "2025-10-01T19:40:44.612172Z",
     "shell.execute_reply": "2025-10-01T19:40:44.610723Z"
    },
    "papermill": {
     "duration": 11.464066,
     "end_time": "2025-10-01T19:40:44.614204",
     "exception": false,
     "start_time": "2025-10-01T19:40:33.150138",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a2984e16939547588982798b8964d896",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "README.md: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2c7a6be8386d4ce38695372f67ed107a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Amazon-Reviews-2023.py: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded 10000 rows. Saved to /kaggle/working/sampled_reviews_10k.parquet\n"
     ]
    }
   ],
   "source": [
    "# Prototype Data Load (10k)\n",
    "SAMPLE_N = 10000\n",
    "HF_DATASET = 'McAuley-Lab/Amazon-Reviews-2023'\n",
    "HF_CONFIG = 'raw_review_Electronics'\n",
    "OUT_DIR = OUT_DIR if 'OUT_DIR' in globals() else '/kaggle/working'\n",
    "\n",
    "from datasets import load_dataset\n",
    "\n",
    "rows = []\n",
    "cnt = 0\n",
    "t0 = time.time()\n",
    "ds_iter = load_dataset(HF_DATASET, HF_CONFIG, split='full', streaming=True, trust_remote_code=True)\n",
    "for rec in ds_iter:\n",
    "    try:\n",
    "        asin = rec.get('asin') or rec.get('parent_asin')\n",
    "        user = rec.get('user_id') or rec.get('reviewerID')\n",
    "        text = rec.get('text') or rec.get('reviewText') or ''\n",
    "        overall = rec.get('rating') or rec.get('overall')\n",
    "        ts = rec.get('timestamp') or rec.get('unixReviewTime') or 0\n",
    "        helpful = rec.get('helpful_vote') or 0\n",
    "        if asin is None or user is None: \n",
    "            continue\n",
    "        ts_i = int(ts); ts_i = ts_i * 1000 if ts_i < 10**10 else ts_i\n",
    "        rows.append({'asin': str(asin), 'reviewerID': str(user), 'reviewText': str(text), 'overall': float(overall) if overall is not None else float('nan'), 'unixReviewTime': int(ts_i), 'helpful_vote': int(helpful)})\n",
    "        cnt += 1\n",
    "        if cnt >= SAMPLE_N: break\n",
    "    except Exception:\n",
    "        continue\n",
    "df = pd.DataFrame(rows)\n",
    "os.makedirs(OUT_DIR, exist_ok=True)\n",
    "df.to_parquet(f\"{OUT_DIR}/sampled_reviews_10k.parquet\", index=False)\n",
    "print('Loaded', len(df), 'rows. Saved to', f\"{OUT_DIR}/sampled_reviews_10k.parquet\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39c888ab",
   "metadata": {
    "papermill": {
     "duration": 0.044179,
     "end_time": "2025-10-01T19:40:44.702977",
     "exception": false,
     "start_time": "2025-10-01T19:40:44.658798",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Build maps and interaction (prototype)\n",
    "\n",
    "Create `item_map`, `user_map` and the sparse interaction matrix used by ALS and candidate generation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f429b0b",
   "metadata": {
    "papermill": {
     "duration": 0.044281,
     "end_time": "2025-10-01T19:40:44.792961",
     "exception": false,
     "start_time": "2025-10-01T19:40:44.748680",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 7\n",
    "\n",
    "**Purpose:** Performs an operation relevant to the pipeline (see code).\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Build maps and interaction (prototype)` → Comment describing intent.\n",
    "- `unique_asins = sorted(df['asin'].unique().tolist())` → Performs a step relevant to data processing or modelling.\n",
    "- `unique_users = sorted(df['reviewerID'].unique().tolist())` → Performs a step relevant to data processing or modelling.\n",
    "- `item_map = {a:i for i,a in enumerate(unique_asins)}` → Performs a step relevant to data processing or modelling.\n",
    "- `inv_item_map = {i:a for a,i in item_map.items()}` → Performs a step relevant to data processing or modelling.\n",
    "- `user_map = {u:i for i,u in enumerate(unique_users)}` → Performs a step relevant to data processing or modelling.\n",
    "- `inv_user_map = {i:u for u,i in user_map.items()}` → Performs a step relevant to data processing or modelling.\n",
    "- `n_users, n_items = len(user_map), len(item_map)` → Performs a step relevant to data processing or modelling.\n",
    "- `u_idx = []; i_idx = []; data = []` → Performs a step relevant to data processing or modelling.\n",
    "- `for _, r in df.iterrows():` → Performs a step relevant to data processing or modelling.\n",
    "- `try:` → Performs a step relevant to data processing or modelling.\n",
    "- `u = user_map[r['reviewerID']]; i = item_map[r['asin']]` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "44c62eca",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T19:40:44.887869Z",
     "iopub.status.busy": "2025-10-01T19:40:44.887277Z",
     "iopub.status.idle": "2025-10-01T19:40:45.549565Z",
     "shell.execute_reply": "2025-10-01T19:40:45.548153Z"
    },
    "papermill": {
     "duration": 0.71023,
     "end_time": "2025-10-01T19:40:45.551605",
     "exception": false,
     "start_time": "2025-10-01T19:40:44.841375",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Maps built: 1561 users x 8907 items\n"
     ]
    }
   ],
   "source": [
    "# Build maps and interaction (prototype)\n",
    "unique_asins = sorted(df['asin'].unique().tolist())\n",
    "unique_users = sorted(df['reviewerID'].unique().tolist())\n",
    "item_map = {a:i for i,a in enumerate(unique_asins)}\n",
    "inv_item_map = {i:a for a,i in item_map.items()}\n",
    "user_map = {u:i for i,u in enumerate(unique_users)}\n",
    "inv_user_map = {i:u for u,i in user_map.items()}\n",
    "\n",
    "n_users, n_items = len(user_map), len(item_map)\n",
    "u_idx = []; i_idx = []; data = []\n",
    "for _, r in df.iterrows():\n",
    "    try:\n",
    "        u = user_map[r['reviewerID']]; i = item_map[r['asin']]\n",
    "        w = float(r['overall']) if not pd.isna(r['overall']) else 1.0 + int(r.get('helpful_vote',0))\n",
    "        u_idx.append(u); i_idx.append(i); data.append(w)\n",
    "    except KeyError:\n",
    "        continue\n",
    "\n",
    "interaction = csr_matrix((data, (u_idx, i_idx)), shape=(n_users, n_items)).tocsr()\n",
    "item_user_matrix = interaction.T.tocsr()\n",
    "pop_counts = Counter(df['asin'])\n",
    "test_df_proto = df.groupby('reviewerID').tail(1).reset_index(drop=True)\n",
    "print('Maps built:', n_users, 'users x', n_items, 'items')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6437ce14",
   "metadata": {
    "papermill": {
     "duration": 0.043772,
     "end_time": "2025-10-01T19:40:45.640855",
     "exception": false,
     "start_time": "2025-10-01T19:40:45.597083",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 2 — Helper functions & Feature Builder\n",
    "\n",
    "This cell defines helper utilities used throughout the notebook:\n",
    "\n",
    "- `user_profile_emb`: compute a user's profile embedding (mean of item embeddings) with safe fallbacks.\n",
    "- `build_candidates_union`: aggregate candidates from semantic nearest neighbors, ALS, SVD, popularity and MF neighbors.\n",
    "- `build_features_for_candidates`: compute features used by the LightGBM reranker.\n",
    "\n",
    "All functions include robust error handling so the notebook runs even if optional libraries are missing."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5b0ad736",
   "metadata": {
    "papermill": {
     "duration": 0.046286,
     "end_time": "2025-10-01T19:40:45.730917",
     "exception": false,
     "start_time": "2025-10-01T19:40:45.684631",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 9\n",
    "\n",
    "**Purpose:** Imports libraries used later. Defines function(s) used downstream.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Helper functions and feature builder (robust)` → Comment describing intent.\n",
    "- `import numpy as np, pandas as pd, math` → Imports module(s).\n",
    "- `from collections import defaultdict` → Imports module(s).\n",
    "- `# Ensure inv maps exist` → Comment describing intent.\n",
    "- `if 'inv_item_map' not in globals(): inv_item_map = {}` → Performs a step relevant to data processing or modelling.\n",
    "- `if 'inv_user_map' not in globals(): inv_user_map = {}` → Performs a step relevant to data processing or modelling.\n",
    "- `def user_profile_emb(uidx, emb_array, df_data, i_map, u_map):` → Performs a step relevant to data processing or modelling.\n",
    "- `# uid -> user string` → Comment describing intent.\n",
    "- `uid = None` → Performs a step relevant to data processing or modelling.\n",
    "- `if 'inv_user_map' in globals() and uidx in inv_user_map:` → Performs a step relevant to data processing or modelling.\n",
    "- `uid = inv_user_map.get(uidx)` → Performs a step relevant to data processing or modelling.\n",
    "- `if uid is None:` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a0c29a08",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T19:40:45.822431Z",
     "iopub.status.busy": "2025-10-01T19:40:45.821999Z",
     "iopub.status.idle": "2025-10-01T19:40:45.856170Z",
     "shell.execute_reply": "2025-10-01T19:40:45.854885Z"
    },
    "papermill": {
     "duration": 0.082316,
     "end_time": "2025-10-01T19:40:45.858006",
     "exception": false,
     "start_time": "2025-10-01T19:40:45.775690",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Helper functions and feature builder (robust)\n",
    "import numpy as np, pandas as pd, math\n",
    "from collections import defaultdict\n",
    "\n",
    "# Ensure inv maps exist\n",
    "if 'inv_item_map' not in globals(): inv_item_map = {}\n",
    "if 'inv_user_map' not in globals(): inv_user_map = {}\n",
    "\n",
    "def user_profile_emb(uidx, emb_array, df_data, i_map, u_map):\n",
    "    # uid -> user string\n",
    "    uid = None\n",
    "    if 'inv_user_map' in globals() and uidx in inv_user_map:\n",
    "        uid = inv_user_map.get(uidx)\n",
    "    if uid is None:\n",
    "        # fallback: if uidx already a string, try that\n",
    "        uid = uidx if isinstance(uidx, str) else None\n",
    "    if uid is None:\n",
    "        return emb_array.mean(axis=0)\n",
    "    item_list = df_data[df_data['reviewerID']==uid]['asin'].map(i_map).dropna().astype(int).tolist()\n",
    "    if item_list and len(item_list)>0:\n",
    "        return emb_array[item_list].mean(axis=0)\n",
    "    else:\n",
    "        return emb_array.mean(axis=0)\n",
    "\n",
    "def build_candidates_union(uidx, emb_array, als_model, svd_facs, i_map, p_counts, u_map, df_data, inter_mat, top_sem=500, top_als=200, top_svd=200, top_pop=200, top_mf=200, max_cands=2000):\n",
    "    candidates = []; seen = set()\n",
    "    # semantic\n",
    "    if emb_array is not None:\n",
    "        try:\n",
    "            up = user_profile_emb(uidx, emb_array, df_data, i_map, u_map).astype('float32')\n",
    "            un = up / (np.linalg.norm(up) + 1e-9)\n",
    "            scores = emb_array.dot(un)\n",
    "            sem_idxs = np.argsort(-scores)[:top_sem]\n",
    "            for it in map(int, sem_idxs):\n",
    "                if it not in seen: seen.add(it); candidates.append(it)\n",
    "        except Exception:\n",
    "            pass\n",
    "    # ALS recommend\n",
    "    if als_model is not None:\n",
    "        try:\n",
    "            rec = als_model.recommend(uidx, inter_mat[uidx], N=top_als)\n",
    "            als_list = []\n",
    "            if isinstance(rec, list) and len(rec)>0 and isinstance(rec[0], (list,tuple)):\n",
    "                als_list = [int(r[0]) for r in rec]\n",
    "            elif isinstance(rec, tuple) and len(rec)==2:\n",
    "                als_list = [int(x) for x in rec[0]]\n",
    "            else:\n",
    "                try:\n",
    "                    als_list = [int(r[0]) if isinstance(r,(list,tuple)) else int(r) for r in rec]\n",
    "                except Exception:\n",
    "                    als_list = []\n",
    "            for it in als_list:\n",
    "                if it not in seen: seen.add(it); candidates.append(it)\n",
    "        except Exception:\n",
    "            pass\n",
    "    # SVD global similarity\n",
    "    if svd_facs is not None:\n",
    "        try:\n",
    "            user_vec = svd_facs.mean(axis=0)\n",
    "            svd_scores = svd_facs.dot(user_vec)\n",
    "            svd_idx = np.argsort(-svd_scores)[:top_svd]\n",
    "            for it in map(int, svd_idx):\n",
    "                if it not in seen: seen.add(it); candidates.append(it)\n",
    "        except Exception:\n",
    "            pass\n",
    "    # popularity\n",
    "    try:\n",
    "        pop_list = [i_map.get(a) for a,_ in p_counts.most_common(top_pop) if a in i_map]\n",
    "        for it in pop_list:\n",
    "            if it not in seen: seen.add(it); candidates.append(it)\n",
    "    except Exception:\n",
    "        pass\n",
    "    # MF neighbors (approx via item factors if available)\n",
    "    try:\n",
    "        if als_model is not None and hasattr(als_model, 'item_factors'):\n",
    "            item_facs = als_model.item_factors\n",
    "            user_items = inter_mat[uidx].indices.tolist() if hasattr(inter_mat[uidx], 'indices') else []\n",
    "            for it in user_items[:5]:\n",
    "                vec = item_facs[it]\n",
    "                sim = item_facs.dot(vec)\n",
    "                neigh = np.argsort(-sim)[:top_mf]\n",
    "                for ni in map(int, neigh):\n",
    "                    if ni not in seen: seen.add(ni); candidates.append(ni)\n",
    "    except Exception:\n",
    "        pass\n",
    "    return candidates[:max_cands]\n",
    "\n",
    "def build_features_for_candidates(uidx, cands, emb_array, als_facs, als_u_facs, svd_facs, df_data, i_map, u_map, p_counts, feat_names, now_ts):\n",
    "    n = len(cands); X = np.zeros((n, len(feat_names)), dtype=float)\n",
    "    # user emb\n",
    "    try:\n",
    "        uemb = user_profile_emb(uidx, emb_array, df_data, i_map, u_map); uembn = uemb/(np.linalg.norm(uemb)+1e-9)\n",
    "    except Exception:\n",
    "        uembn = emb_array.mean(axis=0); uembn = uembn/(np.linalg.norm(uembn)+1e-9)\n",
    "    # sem\n",
    "    try:\n",
    "        sem_scores = (emb_array[cands] * uembn).sum(axis=1)\n",
    "        X[:, feat_names.index('sem_score')] = sem_scores\n",
    "        ranks = np.empty(n, dtype=int); ranks[np.argsort(-sem_scores)] = np.arange(n); X[:, feat_names.index('sem_rank')] = ranks\n",
    "    except Exception:\n",
    "        pass\n",
    "    # als\n",
    "    try:\n",
    "        if als_facs is not None and als_u_facs is not None:\n",
    "            uf = als_u_facs[uidx] if uidx < als_u_facs.shape[0] else als_facs.mean(axis=0)\n",
    "            als_scores = np.dot(als_facs[cands], uf)\n",
    "            X[:, feat_names.index('als_score')] = als_scores\n",
    "            ranks = np.empty(n, dtype=int); ranks[np.argsort(-als_scores)] = np.arange(n); X[:, feat_names.index('als_rank')] = ranks\n",
    "    except Exception:\n",
    "        pass\n",
    "    # svd\n",
    "    try:\n",
    "        if svd_facs is not None:\n",
    "            user_fact = svd_facs.mean(axis=0); svd_scores = svd_facs[cands].dot(user_fact)\n",
    "            X[:, feat_names.index('svd_score')] = svd_scores; ranks = np.empty(n, dtype=int); ranks[np.argsort(-svd_scores)] = np.arange(n); X[:, feat_names.index('svd_rank')] = ranks\n",
    "    except Exception:\n",
    "        pass\n",
    "    # pop & recency\n",
    "    try:\n",
    "        pop_vals = np.array([p_counts.get(inv_item_map.get(i, ''), 0) for i in cands], dtype=float)\n",
    "        X[:, feat_names.index('pop_log')] = np.log1p(pop_vals); ranks = np.empty(n,dtype=int); ranks[np.argsort(-pop_vals)] = np.arange(n); X[:, feat_names.index('pop_rank')] = ranks\n",
    "        recency_ms = np.array([item_last_ts.get(inv_item_map.get(i, ''), 0) for i in cands], dtype=float); X[:, feat_names.index('recency_days')] = ((now_ts - recency_ms)/(1000*60*60*24)).clip(min=0)\n",
    "    except Exception:\n",
    "        pass\n",
    "    # text & user stats\n",
    "    try:\n",
    "        title_len=[]; txt_len=[]\n",
    "        for idx in cands:\n",
    "            asin = inv_item_map.get(idx, ''); rows_sub = df_data[df_data['asin']==asin]\n",
    "            title = rows_sub['title'].iloc[0] if ('title' in rows_sub.columns and len(rows_sub)>0 and pd.notna(rows_sub['title'].iloc[0])) else ''\n",
    "            text = rows_sub['reviewText'].iloc[0] if ('reviewText' in rows_sub.columns and len(rows_sub)>0 and pd.notna(rows_sub['reviewText'].iloc[0])) else ''\n",
    "            title_len.append(len(str(title))); txt_len.append(len(str(text)))\n",
    "        X[:, feat_names.index('title_len')] = np.array(title_len); X[:, feat_names.index('txt_len')] = np.array(txt_len)\n",
    "        uid = inv_user_map.get(uidx, None); user_rows = df_data[df_data['reviewerID']==uid] if uid else pd.DataFrame()\n",
    "        X[:, feat_names.index('user_mean_rating')] = float(user_rows['overall'].mean() if len(user_rows)>0 else 0.0); X[:, feat_names.index('user_activity_count')] = float(len(user_rows))\n",
    "    except Exception:\n",
    "        pass\n",
    "    return {'X': X, 'cands': cands, 'feature_names': feat_names}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0824e726",
   "metadata": {
    "papermill": {
     "duration": 0.044692,
     "end_time": "2025-10-01T19:40:45.946108",
     "exception": false,
     "start_time": "2025-10-01T19:40:45.901416",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 3 — Hard-negative mining (prototype)\n",
    "\n",
    "Create meta-training pairs (pos/neg) for the LTR model. This prototype uses a combination of hard negatives (top-ranked non-pos by ALS/SVD) and random negatives."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f7dfa48",
   "metadata": {
    "papermill": {
     "duration": 0.04301,
     "end_time": "2025-10-01T19:40:46.033160",
     "exception": false,
     "start_time": "2025-10-01T19:40:45.990150",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 11\n",
    "\n",
    "**Purpose:** Imports libraries used later.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Hard-negative mining (prototype)` → Comment describing intent.\n",
    "- `import random` → Imports module(s).\n",
    "- `USERS_TO_USE = 300; HARD_NEG_PER_POS = 60; RANDOM_NEG_PER_POS = 5` → Performs a step relevant to data processing or modelling.\n",
    "- `meta_rows = []; all_users = list(df['reviewerID'].unique()); sample_users = all_users[:min(USERS_TO_USE, len(all_users))]` → Performs a step relevant to data processing or modelling.\n",
    "- `for uid in tqdm(sample_users, desc='Building Meta Prototype'):` → Performs a step relevant to data processing or modelling.\n",
    "- `uidx = user_map.get(uid);` → Performs a step relevant to data processing or modelling.\n",
    "- `if uidx is None: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `cands = build_candidates_union(uidx, None, None, None, item_map, pop_counts, user_map, df, interaction, top_sem=500, top_als=200, top_svd=200, top_pop=200, max_cands=1000)` → Performs a step relevant to data processing or modelling.\n",
    "- `if not cands: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `mf = build_features_for_candidates(uidx, cands, np.zeros((len(item_map), 768)), None, None, None, df, item_map, user_map, pop_counts, feature_names, now_ts)` → Performs a step relevant to data processing or modelling.\n",
    "- `Xc = mf['X']; cidx = mf['cands']; fns = mf['feature_names']` → Performs a step relevant to data processing or modelling.\n",
    "- `true_asins = test_df_proto[test_df_proto['reviewerID']==uid]['asin'].tolist(); true_idxs = [item_map[a] for a in true_asins if a in item_map]` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2e3f2ce1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T19:40:46.122301Z",
     "iopub.status.busy": "2025-10-01T19:40:46.121591Z",
     "iopub.status.idle": "2025-10-01T19:42:07.251322Z",
     "shell.execute_reply": "2025-10-01T19:42:07.250078Z"
    },
    "papermill": {
     "duration": 81.176948,
     "end_time": "2025-10-01T19:42:07.253359",
     "exception": false,
     "start_time": "2025-10-01T19:40:46.076411",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "bbd987f1f4f548fbbaa84b6993ea491b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Building Meta Prototype:   0%|          | 0/300 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "meta_df_small shape: (2640, 16)\n"
     ]
    }
   ],
   "source": [
    "# Hard-negative mining (prototype)\n",
    "import random\n",
    "USERS_TO_USE = 300; HARD_NEG_PER_POS = 60; RANDOM_NEG_PER_POS = 5\n",
    "meta_rows = []; all_users = list(df['reviewerID'].unique()); sample_users = all_users[:min(USERS_TO_USE, len(all_users))]\n",
    "for uid in tqdm(sample_users, desc='Building Meta Prototype'):\n",
    "    uidx = user_map.get(uid); \n",
    "    if uidx is None: continue\n",
    "    cands = build_candidates_union(uidx, None, None, None, item_map, pop_counts, user_map, df, interaction, top_sem=500, top_als=200, top_svd=200, top_pop=200, max_cands=1000)\n",
    "    if not cands: continue\n",
    "    mf = build_features_for_candidates(uidx, cands, np.zeros((len(item_map), 768)), None, None, None, df, item_map, user_map, pop_counts, feature_names, now_ts)\n",
    "    Xc = mf['X']; cidx = mf['cands']; fns = mf['feature_names']\n",
    "    true_asins = test_df_proto[test_df_proto['reviewerID']==uid]['asin'].tolist(); true_idxs = [item_map[a] for a in true_asins if a in item_map]\n",
    "    if not true_idxs: continue\n",
    "    als_col = Xc[:, fns.index('als_score')] if 'als_score' in fns else np.zeros(Xc.shape[0])\n",
    "    svd_col = Xc[:, fns.index('svd_score')] if 'svd_score' in fns else np.zeros(Xc.shape[0])\n",
    "    hard_score = 0.5 * als_col + 0.5 * svd_col\n",
    "    cand_arr = np.array(cidx); pos_mask = np.isin(cand_arr, true_idxs); non_pos_idx = np.where(~pos_mask)[0]\n",
    "    if len(non_pos_idx)==0: continue\n",
    "    ordering = non_pos_idx[np.argsort(-hard_score[non_pos_idx])]; hard_negs_idx = ordering[:HARD_NEG_PER_POS].tolist()\n",
    "    remaining = list(set(non_pos_idx.tolist()) - set(hard_negs_idx)); random_negs_idx = random.sample(remaining, min(RANDOM_NEG_PER_POS, len(remaining))) if remaining else []\n",
    "    for t in true_idxs:\n",
    "        pos_loc = np.where(cand_arr==t)[0]; \n",
    "        if len(pos_loc)==0: continue\n",
    "        for p in pos_loc:\n",
    "            row = {'user_idx': uidx, 'item_idx': int(cidx[p]), 'label': 1}\n",
    "            for j,fn in enumerate(fns):\n",
    "                try: row[fn] = float(Xc[p,j])\n",
    "                except: row[fn] = 0.0\n",
    "            meta_rows.append(row)\n",
    "            for idx in hard_negs_idx:\n",
    "                rn = {'user_idx': uidx, 'item_idx': int(cidx[idx]), 'label': 0}\n",
    "                for j,fn in enumerate(fns):\n",
    "                    try: rn[fn] = float(Xc[idx,j])\n",
    "                    except: rn[fn] = 0.0\n",
    "                meta_rows.append(rn)\n",
    "            for idx in random_negs_idx:\n",
    "                rr = {'user_idx': uidx, 'item_idx': int(cidx[idx]), 'label': 0}\n",
    "                for j,fn in enumerate(fns):\n",
    "                    try: rr[fn] = float(Xc[idx,j])\n",
    "                    except: rr[fn] = 0.0\n",
    "                meta_rows.append(rr)\n",
    "meta_df_small = pd.DataFrame(meta_rows).sample(frac=1.0, random_state=42).reset_index(drop=True)\n",
    "meta_df_small.to_parquet(f\"{OUT_DIR}/meta_enhanced_small.parquet\", index=False)\n",
    "print('meta_df_small shape:', meta_df_small.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5af1ce26",
   "metadata": {
    "papermill": {
     "duration": 0.044311,
     "end_time": "2025-10-01T19:42:07.342240",
     "exception": false,
     "start_time": "2025-10-01T19:42:07.297929",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 4 — LightGBM Tuning & Prototype Training\n",
    "\n",
    "Use Optuna to tune lambdarank hyperparameters. Important: set `feature_pre_filter=False` so trials changing `min_data_in_leaf` don't error."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20ccdb40",
   "metadata": {
    "papermill": {
     "duration": 0.044673,
     "end_time": "2025-10-01T19:42:07.431103",
     "exception": false,
     "start_time": "2025-10-01T19:42:07.386430",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 13\n",
    "\n",
    "**Purpose:** Imports libraries used later. Defines function(s) used downstream. Trains a model / fits parameters. Produces predictions on data.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# LightGBM tuning & training (prototype)` → Comment describing intent.\n",
    "- `import lightgbm as lgb, optuna` → Imports module(s).\n",
    "- `from sklearn.model_selection import train_test_split` → Imports module(s).\n",
    "- `from math import log2` → Imports module(s).\n",
    "- `feat_cols = [c for c in meta_df_small.columns if c not in ('user_idx','item_idx','label')]` → Performs a step relevant to data processing or modelling.\n",
    "- `users = meta_df_small['user_idx'].unique(); train_u, valid_u = train_test_split(list(users), test_size=0.20, random_state=42)` → Performs a step relevant to data processing or modelling.\n",
    "- `tr_mask = meta_df_small['user_idx'].isin(train_u); val_mask = meta_df_small['user_idx'].isin(valid_u)` → Performs a step relevant to data processing or modelling.\n",
    "- `X_tr = meta_df_small[tr_mask][feat_cols].values; y_tr = meta_df_small[tr_mask]['label'].values` → Performs a step relevant to data processing or modelling.\n",
    "- `gr_tr = meta_df_small[tr_mask].groupby('user_idx', sort=False).size().astype(int).values` → Groups and aggregates data.\n",
    "- `X_val = meta_df_small[val_mask][feat_cols].values; y_val = meta_df_small[val_mask]['label'].values` → Performs a step relevant to data processing or modelling.\n",
    "- `gr_val = meta_df_small[val_mask].groupby('user_idx', sort=False).size().astype(int).values` → Groups and aggregates data.\n",
    "- `dtrain = lgb.Dataset(X_tr, label=y_tr, group=gr_tr); dval = lgb.Dataset(X_val, label=y_val, group=gr_val, reference=dtrain)` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4bef7a04",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T19:42:07.521858Z",
     "iopub.status.busy": "2025-10-01T19:42:07.521469Z",
     "iopub.status.idle": "2025-10-01T19:42:16.344345Z",
     "shell.execute_reply": "2025-10-01T19:42:16.343185Z"
    },
    "papermill": {
     "duration": 8.870549,
     "end_time": "2025-10-01T19:42:16.346330",
     "exception": false,
     "start_time": "2025-10-01T19:42:07.475781",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-10-01 19:42:14,377] A new study created in memory with name: no-name-53568306-3cee-4ac5-b77c-4e0ade6b332f\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6745a32dfc7749d991227417b6df53f5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/20 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[24]\tvalid_0's ndcg@10: 0.53521\n",
      "[I 2025-10-01 19:42:14,604] Trial 0 finished with value: -0.0 and parameters: {'learning_rate': 0.011451372347500747, 'num_leaves': 104, 'min_data_in_leaf': 11, 'feature_fraction': 0.5478388808543505}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[10]\tvalid_0's ndcg@10: 0.708012\n",
      "[I 2025-10-01 19:42:14,659] Trial 1 finished with value: -0.0 and parameters: {'learning_rate': 0.029068155746874904, 'num_leaves': 67, 'min_data_in_leaf': 197, 'feature_fraction': 0.6325680808593541}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[29]\tvalid_0's ndcg@10: 0.67255\n",
      "[I 2025-10-01 19:42:14,738] Trial 2 finished with value: -0.0 and parameters: {'learning_rate': 0.014014694342367764, 'num_leaves': 126, 'min_data_in_leaf': 81, 'feature_fraction': 0.6566477211619928}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[16]\tvalid_0's ndcg@10: 0.695611\n",
      "[I 2025-10-01 19:42:14,794] Trial 3 finished with value: -0.0 and parameters: {'learning_rate': 0.005960875011726952, 'num_leaves': 38, 'min_data_in_leaf': 150, 'feature_fraction': 0.5605440301491365}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[3]\tvalid_0's ndcg@10: 0.718558\n",
      "[I 2025-10-01 19:42:14,870] Trial 4 finished with value: -0.0 and parameters: {'learning_rate': 0.0010600082311739997, 'num_leaves': 39, 'min_data_in_leaf': 24, 'feature_fraction': 0.7720198427367828}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[1]\tvalid_0's ndcg@10: 0.68555\n",
      "[I 2025-10-01 19:42:14,923] Trial 5 finished with value: -0.0 and parameters: {'learning_rate': 0.029261211082895814, 'num_leaves': 35, 'min_data_in_leaf': 128, 'feature_fraction': 0.9642102101812833}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[2]\tvalid_0's ndcg@10: 0.693362\n",
      "[I 2025-10-01 19:42:14,973] Trial 6 finished with value: -0.0 and parameters: {'learning_rate': 0.044394033636155045, 'num_leaves': 80, 'min_data_in_leaf': 135, 'feature_fraction': 0.928550773698416}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[1]\tvalid_0's ndcg@10: 0.722373\n",
      "[I 2025-10-01 19:42:15,030] Trial 7 finished with value: -0.0 and parameters: {'learning_rate': 0.005659952209440167, 'num_leaves': 50, 'min_data_in_leaf': 72, 'feature_fraction': 0.9290586447806611}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[1]\tvalid_0's ndcg@10: 0.637465\n",
      "[I 2025-10-01 19:42:15,110] Trial 8 finished with value: -0.0 and parameters: {'learning_rate': 0.003965069610387988, 'num_leaves': 108, 'min_data_in_leaf': 29, 'feature_fraction': 0.7050837845711249}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[2]\tvalid_0's ndcg@10: 0.699069\n",
      "[I 2025-10-01 19:42:15,156] Trial 9 finished with value: -0.0 and parameters: {'learning_rate': 0.05991792863624105, 'num_leaves': 44, 'min_data_in_leaf': 182, 'feature_fraction': 0.6515424004425983}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[5]\tvalid_0's ndcg@10: 0.593486\n",
      "[I 2025-10-01 19:42:15,303] Trial 10 finished with value: -0.0 and parameters: {'learning_rate': 0.0016245576082603696, 'num_leaves': 99, 'min_data_in_leaf': 10, 'feature_fraction': 0.5008871133677432}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[44]\tvalid_0's ndcg@10: 0.709502\n",
      "[I 2025-10-01 19:42:15,400] Trial 11 finished with value: -0.0 and parameters: {'learning_rate': 0.01622725907749315, 'num_leaves': 67, 'min_data_in_leaf': 200, 'feature_fraction': 0.5806095147424092}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[39]\tvalid_0's ndcg@10: 0.75997\n",
      "[I 2025-10-01 19:42:15,527] Trial 12 finished with value: -0.0 and parameters: {'learning_rate': 0.025898095267174553, 'num_leaves': 82, 'min_data_in_leaf': 57, 'feature_fraction': 0.7784327709413197}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[2]\tvalid_0's ndcg@10: 0.693362\n",
      "[I 2025-10-01 19:42:15,610] Trial 13 finished with value: -0.0 and parameters: {'learning_rate': 0.07973882377178405, 'num_leaves': 65, 'min_data_in_leaf': 107, 'feature_fraction': 0.5879951415604192}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[5]\tvalid_0's ndcg@10: 0.685779\n",
      "[I 2025-10-01 19:42:15,679] Trial 14 finished with value: -0.0 and parameters: {'learning_rate': 0.009810631533677809, 'num_leaves': 100, 'min_data_in_leaf': 177, 'feature_fraction': 0.8526990343930371}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[52]\tvalid_0's ndcg@10: 0.731913\n",
      "[I 2025-10-01 19:42:15,805] Trial 15 finished with value: -0.0 and parameters: {'learning_rate': 0.026655442708192298, 'num_leaves': 120, 'min_data_in_leaf': 100, 'feature_fraction': 0.6448091037313162}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[15]\tvalid_0's ndcg@10: 0.662833\n",
      "[I 2025-10-01 19:42:15,897] Trial 16 finished with value: -0.0 and parameters: {'learning_rate': 0.0031172086814300892, 'num_leaves': 90, 'min_data_in_leaf': 56, 'feature_fraction': 0.5082954599279914}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[1]\tvalid_0's ndcg@10: 0.68555\n",
      "[I 2025-10-01 19:42:15,969] Trial 17 finished with value: -0.0 and parameters: {'learning_rate': 0.010048919186875175, 'num_leaves': 66, 'min_data_in_leaf': 153, 'feature_fraction': 0.7198943102622077}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[2]\tvalid_0's ndcg@10: 0.693362\n",
      "[I 2025-10-01 19:42:16,042] Trial 18 finished with value: -0.0 and parameters: {'learning_rate': 0.0380703301364877, 'num_leaves': 55, 'min_data_in_leaf': 111, 'feature_fraction': 0.6083211328794864}. Best is trial 0 with value: -0.0.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[48]\tvalid_0's ndcg@10: 0.712861\n",
      "[I 2025-10-01 19:42:16,142] Trial 19 finished with value: -0.0 and parameters: {'learning_rate': 0.015362388690127947, 'num_leaves': 112, 'min_data_in_leaf': 166, 'feature_fraction': 0.5458732100580317}. Best is trial 0 with value: -0.0.\n",
      "Best params: {'learning_rate': 0.011451372347500747, 'num_leaves': 104, 'min_data_in_leaf': 11, 'feature_fraction': 0.5478388808543505}\n",
      "Training until validation scores don't improve for 50 rounds\n",
      "Early stopping, best iteration is:\n",
      "[24]\tvalid_0's ndcg@10: 0.53521\tvalid_0's ndcg@50: 0.561499\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['/kaggle/working/lgbm_reranker_prototype.joblib']"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# LightGBM tuning & training (prototype)\n",
    "import lightgbm as lgb, optuna\n",
    "from sklearn.model_selection import train_test_split\n",
    "from math import log2\n",
    "\n",
    "feat_cols = [c for c in meta_df_small.columns if c not in ('user_idx','item_idx','label')]\n",
    "users = meta_df_small['user_idx'].unique(); train_u, valid_u = train_test_split(list(users), test_size=0.20, random_state=42)\n",
    "tr_mask = meta_df_small['user_idx'].isin(train_u); val_mask = meta_df_small['user_idx'].isin(valid_u)\n",
    "X_tr = meta_df_small[tr_mask][feat_cols].values; y_tr = meta_df_small[tr_mask]['label'].values\n",
    "gr_tr = meta_df_small[tr_mask].groupby('user_idx', sort=False).size().astype(int).values\n",
    "X_val = meta_df_small[val_mask][feat_cols].values; y_val = meta_df_small[val_mask]['label'].values\n",
    "gr_val = meta_df_small[val_mask].groupby('user_idx', sort=False).size().astype(int).values\n",
    "dtrain = lgb.Dataset(X_tr, label=y_tr, group=gr_tr); dval = lgb.Dataset(X_val, label=y_val, group=gr_val, reference=dtrain)\n",
    "\n",
    "def ndcg_per_group(preds, df_masked, K=10):\n",
    "    eval_users = df_masked['user_idx'].unique(); idx = 0; ndcgs = []\n",
    "    for u in eval_users:\n",
    "        sub = df_masked[df_masked['user_idx']==u]; n = len(sub)\n",
    "        if n==0: continue\n",
    "        p = preds[idx: idx + n]; items = sub['item_idx'].values; order = np.argsort(-p); ranked = items[order].tolist()\n",
    "        true_items = sub['item_idx'][sub['label']==1].tolist()\n",
    "        gains = [1.0 if it in true_items else 0.0 for it in ranked[:K]]\n",
    "        dcg = sum(g / log2(i+2) for i,g in enumerate(gains)); idcg = sum(1.0 / log2(i+2) for i in range(min(len(true_items), K))) if len(true_items)>0 else 0.0\n",
    "        ndcgs.append(dcg/idcg if idcg>0 else 0.0); idx += n\n",
    "    return float(np.mean(ndcgs)) if len(ndcgs)>0 else 0.0\n",
    "\n",
    "def objective(trial):\n",
    "    param = {'objective':'lambdarank','metric':'ndcg','ndcg_eval_at':[10],\n",
    "             'learning_rate': trial.suggest_float('learning_rate', 1e-3, 1e-1, log=True),\n",
    "             'num_leaves': trial.suggest_int('num_leaves', 31, 127),\n",
    "             'min_data_in_leaf': trial.suggest_int('min_data_in_leaf', 10, 200),\n",
    "             'feature_fraction': trial.suggest_float('feature_fraction', 0.5, 1.0),\n",
    "             'verbosity': -1, 'seed': 42, 'feature_pre_filter': False}\n",
    "    try:\n",
    "        bst = lgb.train(param, dtrain, num_boost_round=500, valid_sets=[dval], callbacks=[lgb.early_stopping(stopping_rounds=40), lgb.log_evaluation(period=0)])\n",
    "        preds_val = bst.predict(X_val); df_val = meta_df_small[val_mask].copy().reset_index(drop=True)\n",
    "        return -ndcg_per_group(preds_val, df_val, K=10)\n",
    "    except Exception as e:\n",
    "        print('LightGBM failed in objective:', e); return 1.0\n",
    "\n",
    "study = optuna.create_study(direction='minimize'); study.optimize(objective, n_trials=20, show_progress_bar=True)\n",
    "best_params_proto = study.best_params; print('Best params:', best_params_proto)\n",
    "\n",
    "params = {'objective':'lambdarank','metric':'ndcg','ndcg_eval_at':[10,50],\n",
    "          'learning_rate':float(best_params_proto.get('learning_rate',0.05)),\n",
    "          'num_leaves':int(best_params_proto.get('num_leaves',63)),\n",
    "          'min_data_in_leaf':int(best_params_proto.get('min_data_in_leaf',20)),\n",
    "          'feature_fraction':float(best_params_proto.get('feature_fraction',0.8)),'verbosity':-1,'seed':42,'feature_pre_filter':False}\n",
    "bst_proto = lgb.train(params, dtrain, num_boost_round=1000, valid_sets=[dval], callbacks=[lgb.early_stopping(stopping_rounds=50), lgb.log_evaluation(period=100)])\n",
    "joblib.dump(bst_proto, f\"{OUT_DIR}/lgbm_reranker_prototype.joblib\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43f30d6e",
   "metadata": {
    "papermill": {
     "duration": 0.048479,
     "end_time": "2025-10-01T19:42:16.441537",
     "exception": false,
     "start_time": "2025-10-01T19:42:16.393058",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 5 — Scale-up Data Load (100k) & Model Initialization\n",
    "\n",
    "This cell builds a larger sample (100k rows) and computes final embeddings and factors. It prefers SBERT/implicit/FAISS when available but includes CPU-friendly fallbacks (TF-IDF + SVD and TruncatedSVD-based MF) so the notebook runs offline."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51f70624",
   "metadata": {
    "papermill": {
     "duration": 0.045972,
     "end_time": "2025-10-01T19:42:16.533174",
     "exception": false,
     "start_time": "2025-10-01T19:42:16.487202",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 15\n",
    "\n",
    "**Purpose:** Imports libraries used later. Trains a model / fits parameters.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Scale-up data load (100k) with fallbacks` → Comment describing intent.\n",
    "- `SCALE_N = 10000` → Performs a step relevant to data processing or modelling.\n",
    "- `SBERT_MODEL_FINAL = 'all-mpnet-base-v2'` → Performs a step relevant to data processing or modelling.\n",
    "- `from datasets import load_dataset` → Imports module(s).\n",
    "- `ds_iter = load_dataset('McAuley-Lab/Amazon-Reviews-2023', 'raw_review_Electronics', split='full', streaming=True, trust_remote_code=True)` → Performs a step relevant to data processing or modelling.\n",
    "- `rows = []; cnt = 0` → Performs a step relevant to data processing or modelling.\n",
    "- `for rec in ds_iter:` → Performs a step relevant to data processing or modelling.\n",
    "- `try:` → Performs a step relevant to data processing or modelling.\n",
    "- `asin = rec.get('asin') or rec.get('parent_asin'); user = rec.get('user_id') or rec.get('reviewerID'); text = rec.get('text') or rec.get('reviewText') or ''` → Performs a step relevant to data processing or modelling.\n",
    "- `overall = rec.get('rating') or rec.get('overall'); ts = rec.get('timestamp') or rec.get('unixReviewTime') or 0` → Performs a step relevant to data processing or modelling.\n",
    "- `if asin is None or user is None: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `ts_i = int(ts); ts_i = ts_i*1000 if ts_i < 10**10 else ts_i` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3aaad93f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T19:42:16.629588Z",
     "iopub.status.busy": "2025-10-01T19:42:16.628645Z",
     "iopub.status.idle": "2025-10-01T20:18:23.481059Z",
     "shell.execute_reply": "2025-10-01T20:18:23.479470Z"
    },
    "papermill": {
     "duration": 2166.904756,
     "end_time": "2025-10-01T20:18:23.483554",
     "exception": false,
     "start_time": "2025-10-01T19:42:16.578798",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-10-01 19:42:34.145483: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1759347754.413207      12 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1759347754.490213      12 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6623a5da93f943488a935e96741b3a35",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "modules.json:   0%|          | 0.00/349 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0cdf9d2d87984f7fbf28546fc432071e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config_sentence_transformers.json:   0%|          | 0.00/116 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f6671b6b6a624b9b8cf59523f0a953e4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "README.md: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "765f60b1dfe5455ea6975570fa3f3553",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "sentence_bert_config.json:   0%|          | 0.00/53.0 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "725d85aeac6e4ae68443d61a46f62f59",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/571 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "bfc1339925514032a3a5cb9d9f7042cd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/438M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "d46acfec34cd48069422f8671b270b74",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer_config.json:   0%|          | 0.00/363 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "6235acc8946349bb840f25d34ee0edd4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "vocab.txt: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "027cb84a7e064e58a20278b4ac1d177b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer.json: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "00837635bf62455abc4cb3f4fb3dcae6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "special_tokens_map.json:   0%|          | 0.00/239 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "7142500c82cc42419531a1b9beb8c515",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/190 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3016d5c0c98b42a7bd44b55215397541",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "SBERT encode:   0%|          | 0/35 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/implicit/cpu/als.py:95: RuntimeWarning: Intel MKL BLAS is configured to use 2 threads. It is highly recommended to disable its internal threadpool by setting the environment variable 'MKL_NUM_THREADS=1' or by callng 'threadpoolctl.threadpool_limits(1, \"blas\")'. Having MKL use a threadpool can lead to severe performance issues\n",
      "  check_blas_config()\n",
      "/usr/local/lib/python3.11/dist-packages/implicit/cpu/als.py:95: RuntimeWarning: OpenBLAS is configured to use 4 threads. It is highly recommended to disable its internal threadpool by setting the environment variable 'OPENBLAS_NUM_THREADS=1' or by calling 'threadpoolctl.threadpool_limits(1, \"blas\")'. Having OpenBLAS use a threadpool can lead to severe performance issues here.\n",
      "  check_blas_config()\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "11c182f2b7484ed98d2e5dfd12045382",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/20 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final item_emb shape: (8907, 768)\n"
     ]
    }
   ],
   "source": [
    "# Scale-up data load (100k) with fallbacks\n",
    "SCALE_N = 10000\n",
    "SBERT_MODEL_FINAL = 'all-mpnet-base-v2'\n",
    "\n",
    "from datasets import load_dataset\n",
    "ds_iter = load_dataset('McAuley-Lab/Amazon-Reviews-2023', 'raw_review_Electronics', split='full', streaming=True, trust_remote_code=True)\n",
    "rows = []; cnt = 0\n",
    "for rec in ds_iter:\n",
    "    try:\n",
    "        asin = rec.get('asin') or rec.get('parent_asin'); user = rec.get('user_id') or rec.get('reviewerID'); text = rec.get('text') or rec.get('reviewText') or ''\n",
    "        overall = rec.get('rating') or rec.get('overall'); ts = rec.get('timestamp') or rec.get('unixReviewTime') or 0\n",
    "        if asin is None or user is None: continue\n",
    "        ts_i = int(ts); ts_i = ts_i*1000 if ts_i < 10**10 else ts_i\n",
    "        rows.append({'asin':str(asin),'reviewerID':str(user),'reviewText':str(text),'overall':float(overall) if overall is not None else float('nan'),'unixReviewTime':int(ts_i)})\n",
    "        cnt += 1\n",
    "        if cnt >= SCALE_N: break\n",
    "    except Exception:\n",
    "        continue\n",
    "df_scale = pd.DataFrame(rows)\n",
    "unique_asins_scale = sorted(df_scale['asin'].unique().tolist()); unique_users_scale = sorted(df_scale['reviewerID'].unique().tolist())\n",
    "item_map_scale = {a:i for i,a in enumerate(unique_asins_scale)}; inv_item_map_scale = {i:a for a,i in item_map_scale.items()}\n",
    "user_map_scale = {u:i for i,u in enumerate(unique_users_scale)}; inv_user_map_scale = {i:u for u,i in user_map_scale.items()}\n",
    "n_users_scale, n_items_scale = len(user_map_scale), len(item_map_scale)\n",
    "u_idx=[]; i_idx=[]; data=[]\n",
    "for _, r in df_scale.iterrows():\n",
    "    try:\n",
    "        u = user_map_scale[r['reviewerID']]; i = item_map_scale[r['asin']]\n",
    "        w = float(r['overall']) if not pd.isna(r['overall']) else 1.0; u_idx.append(u); i_idx.append(i); data.append(w)\n",
    "    except KeyError: continue\n",
    "interaction_scale = csr_matrix((data,(u_idx,i_idx)), shape=(n_users_scale,n_items_scale)).tocsr()\n",
    "item_user_matrix_scale = interaction_scale.T.tocsr()\n",
    "pop_counts_scale = Counter(df_scale['asin'])\n",
    "test_df_scale = df_scale.groupby('reviewerID').tail(1).reset_index(drop=True)\n",
    "\n",
    "# Build semantic embeddings: SBERT if available else TF-IDF+SVD fallback\n",
    "if HAS_SBERT:\n",
    "    from sentence_transformers import SentenceTransformer\n",
    "    sbert_final = SentenceTransformer(SBERT_MODEL_FINAL, device='cpu')\n",
    "    agg = defaultdict(list)\n",
    "    for _, r in df_scale[['asin','reviewText']].iterrows():\n",
    "        a = r['asin']\n",
    "        if len(agg[a]) < 5: agg[a].append(str(r['reviewText'])[:1200])\n",
    "    texts = [' . '.join(agg.get(a, [''])) for a in sorted(item_map_scale.keys(), key=lambda x: item_map_scale[x])]\n",
    "    emb_batches = []; batch_size = 256\n",
    "    for i in tqdm(range(0, len(texts), batch_size), desc='SBERT encode'):\n",
    "        emb = sbert_final.encode(texts[i:i+batch_size], convert_to_numpy=True, show_progress_bar=False)\n",
    "        emb_batches.append(emb)\n",
    "    item_emb_final = np.vstack(emb_batches).astype('float32')\n",
    "else:\n",
    "    from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "    from sklearn.decomposition import TruncatedSVD as _TSVD\n",
    "    agg = defaultdict(list)\n",
    "    for _, r in df_scale[['asin','reviewText']].iterrows():\n",
    "        a = r['asin']\n",
    "        if len(agg[a]) < 5: agg[a].append(str(r['reviewText'])[:1200])\n",
    "    texts = [' . '.join(agg.get(a, [''])) for a in sorted(item_map_scale.keys(), key=lambda x: item_map_scale[x])]\n",
    "    tf = TfidfVectorizer(max_features=65536, ngram_range=(1,2), min_df=2)\n",
    "    Xtf = tf.fit_transform(texts)\n",
    "    svd_text = _TSVD(n_components=384, random_state=42)\n",
    "    item_emb_final = svd_text.fit_transform(Xtf).astype('float32')\n",
    "\n",
    "# Build MF factors: implicit ALS if available else TruncatedSVD fallback\n",
    "if HAS_IMPLICIT:\n",
    "    try:\n",
    "        from implicit.als import AlternatingLeastSquares\n",
    "        als_model_final = AlternatingLeastSquares(factors=128, regularization=0.1, iterations=20, use_gpu=False)\n",
    "        als_model_final.fit(item_user_matrix_scale.astype('float32'))\n",
    "        als_item_factors_final = als_model_final.item_factors; als_user_factors_final = als_model_final.user_factors\n",
    "    except Exception:\n",
    "        # fallback to SVD factors below\n",
    "        HAS_IMPLICIT = False\n",
    "\n",
    "if not HAS_IMPLICIT:\n",
    "    from sklearn.decomposition import TruncatedSVD as _TSVD2\n",
    "    print('implicit not available or failed; using TruncatedSVD fallback for MF factors')\n",
    "    svd_mf = _TSVD2(n_components=128, random_state=42)\n",
    "    als_item_factors_final = svd_mf.fit_transform(item_user_matrix_scale)\n",
    "    # user factors: approximate by dividing R^T * F by counts\n",
    "    try:\n",
    "        R = item_user_matrix_scale\n",
    "        user_num = (R.T).dot(als_item_factors_final)\n",
    "        user_counts = np.array((R != 0).sum(axis=0)).reshape(-1)\n",
    "        user_counts = np.where(user_counts == 0, 1.0, user_counts)\n",
    "        als_user_factors_final = (user_num / user_counts[:, None]).astype('float32')\n",
    "    except Exception:\n",
    "        als_user_factors_final = np.random.normal(scale=0.01, size=(n_users_scale, als_item_factors_final.shape[1])).astype('float32')\n",
    "\n",
    "svd_item_factors_final = als_item_factors_final  # reuse\n",
    "item_emb_norm_final = item_emb_final / (np.linalg.norm(item_emb_final, axis=1, keepdims=True) + 1e-9)\n",
    "print('Final item_emb shape:', item_emb_final.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bb56a69",
   "metadata": {
    "papermill": {
     "duration": 0.037816,
     "end_time": "2025-10-01T20:18:23.561714",
     "exception": false,
     "start_time": "2025-10-01T20:18:23.523898",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 6 — Scale Hard-negative Mining & Final LTR Training\n",
    "\n",
    "This cell mines hard negatives across many users and trains the final LightGBM reranker on the large meta dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6d82066",
   "metadata": {
    "papermill": {
     "duration": 0.038753,
     "end_time": "2025-10-01T20:18:23.637604",
     "exception": false,
     "start_time": "2025-10-01T20:18:23.598851",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 17\n",
    "\n",
    "**Purpose:** Imports libraries used later. Trains a model / fits parameters.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Scale hard-neg mining + LTR training` → Comment describing intent.\n",
    "- `USERS_TO_USE_SCALE = 5000; HARD_NEG_PER_POS = 80; RANDOM_NEG_PER_POS = 5` → Performs a step relevant to data processing or modelling.\n",
    "- `meta_rows_scale = []` → Performs a step relevant to data processing or modelling.\n",
    "- `sample_users_scale = df_scale['reviewerID'].unique()[:min(USERS_TO_USE_SCALE, n_users_scale)]` → Performs a step relevant to data processing or modelling.\n",
    "- `for uid in tqdm(sample_users_scale, desc='Building Meta Scale'):` → Performs a step relevant to data processing or modelling.\n",
    "- `uidx = user_map_scale.get(uid);` → Performs a step relevant to data processing or modelling.\n",
    "- `if uidx is None: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `cands = build_candidates_union(uidx, item_emb_final, (als_model_final if 'als_model_final' in globals() else None), svd_item_factors_final, item_map_scale, pop_counts_scale, user_map_scale, df_scale, interaction_scale, top_sem=1000, top_als=500, top_svd=500, top_pop=500, top_mf=200, max_cands=3000)` → Performs a step relevant to data processing or modelling.\n",
    "- `if not cands: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `mf = build_features_for_candidates(uidx, cands, item_emb_final, (als_item_factors_final if 'als_item_factors_final' in globals() else None), (als_user_factors_final if 'als_user_factors_final' in globals() else None), svd_item_factors_final, df_scale, item_map_scale, user_map_scale, pop_counts_scale, feature_names, now_ts)` → Performs a step relevant to data processing or modelling.\n",
    "- `Xc = mf['X']; cidx = mf['cands']; fns = mf['feature_names']` → Performs a step relevant to data processing or modelling.\n",
    "- `true_asins = test_df_scale[test_df_scale['reviewerID']==uid]['asin'].tolist()` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "946e081a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T20:18:23.721746Z",
     "iopub.status.busy": "2025-10-01T20:18:23.717413Z",
     "iopub.status.idle": "2025-10-01T21:12:27.397297Z",
     "shell.execute_reply": "2025-10-01T21:12:27.394637Z"
    },
    "papermill": {
     "duration": 3243.723622,
     "end_time": "2025-10-01T21:12:27.399505",
     "exception": false,
     "start_time": "2025-10-01T20:18:23.675883",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8c290d74a20e457caabd16a86fd9949a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Building Meta Scale:   0%|          | 0/1561 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "meta_df_scale shape: (129516, 16)\n",
      "Training until validation scores don't improve for 50 rounds\n",
      "[100]\tvalid_0's ndcg@10: 0.937918\tvalid_0's ndcg@50: 0.942092\n",
      "Early stopping, best iteration is:\n",
      "[67]\tvalid_0's ndcg@10: 0.945243\tvalid_0's ndcg@50: 0.947585\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['/kaggle/working/lgbm_reranker_final.joblib']"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Scale hard-neg mining + LTR training\n",
    "USERS_TO_USE_SCALE = 5000; HARD_NEG_PER_POS = 80; RANDOM_NEG_PER_POS = 5\n",
    "meta_rows_scale = []\n",
    "sample_users_scale = df_scale['reviewerID'].unique()[:min(USERS_TO_USE_SCALE, n_users_scale)]\n",
    "for uid in tqdm(sample_users_scale, desc='Building Meta Scale'):\n",
    "    uidx = user_map_scale.get(uid); \n",
    "    if uidx is None: continue\n",
    "    cands = build_candidates_union(uidx, item_emb_final, (als_model_final if 'als_model_final' in globals() else None), svd_item_factors_final, item_map_scale, pop_counts_scale, user_map_scale, df_scale, interaction_scale, top_sem=1000, top_als=500, top_svd=500, top_pop=500, top_mf=200, max_cands=3000)\n",
    "    if not cands: continue\n",
    "    mf = build_features_for_candidates(uidx, cands, item_emb_final, (als_item_factors_final if 'als_item_factors_final' in globals() else None), (als_user_factors_final if 'als_user_factors_final' in globals() else None), svd_item_factors_final, df_scale, item_map_scale, user_map_scale, pop_counts_scale, feature_names, now_ts)\n",
    "    Xc = mf['X']; cidx = mf['cands']; fns = mf['feature_names']\n",
    "    true_asins = test_df_scale[test_df_scale['reviewerID']==uid]['asin'].tolist()\n",
    "    true_idxs = [item_map_scale[a] for a in true_asins if a in item_map_scale]\n",
    "    if not true_idxs: continue\n",
    "    als_col = Xc[:, fns.index('als_score')] if 'als_score' in fns else np.zeros(Xc.shape[0])\n",
    "    svd_col = Xc[:, fns.index('svd_score')] if 'svd_score' in fns else np.zeros(Xc.shape[0])\n",
    "    hard_score = 0.5 * als_col + 0.5 * svd_col\n",
    "    cand_arr = np.array(cidx); pos_mask = np.isin(cand_arr, true_idxs); non_pos_idx = np.where(~pos_mask)[0]\n",
    "    if len(non_pos_idx)==0: continue\n",
    "    ordering = non_pos_idx[np.argsort(-hard_score[non_pos_idx])]; hard_negs_idx = ordering[:HARD_NEG_PER_POS].tolist()\n",
    "    remaining = list(set(non_pos_idx.tolist()) - set(hard_negs_idx)); random_negs_idx = random.sample(remaining, min(RANDOM_NEG_PER_POS, len(remaining))) if remaining else []\n",
    "    for t in true_idxs:\n",
    "        pos_loc = np.where(cand_arr==t)[0]; \n",
    "        if len(pos_loc)==0: continue\n",
    "        for p in pos_loc:\n",
    "            row = {'user_idx': uidx, 'item_idx': int(cidx[p]), 'label': 1}\n",
    "            for j,fn in enumerate(fns):\n",
    "                try: row[fn] = float(Xc[p,j])\n",
    "                except: row[fn] = 0.0\n",
    "            meta_rows_scale.append(row)\n",
    "            for idx in hard_negs_idx:\n",
    "                rn = {'user_idx': uidx, 'item_idx': int(cidx[idx]), 'label': 0}\n",
    "                for j,fn in enumerate(fns):\n",
    "                    try: rn[fn] = float(Xc[idx,j])\n",
    "                    except: rn[fn] = 0.0\n",
    "                meta_rows_scale.append(rn)\n",
    "            for idx in random_negs_idx:\n",
    "                rr = {'user_idx': uidx, 'item_idx': int(cidx[idx]), 'label': 0}\n",
    "                for j,fn in enumerate(fns):\n",
    "                    try: rr[fn] = float(Xc[idx,j])\n",
    "                    except: rr[fn] = 0.0\n",
    "                meta_rows_scale.append(rr)\n",
    "meta_df_scale = pd.DataFrame(meta_rows_scale).sample(frac=1.0, random_state=42).reset_index(drop=True)\n",
    "print('meta_df_scale shape:', meta_df_scale.shape)\n",
    "\n",
    "# Train final LTR\n",
    "from sklearn.model_selection import train_test_split\n",
    "feat_cols = [c for c in meta_df_scale.columns if c not in ('user_idx','item_idx','label')]\n",
    "X = meta_df_scale[feat_cols].values; y = meta_df_scale['label'].values\n",
    "users_all = meta_df_scale['user_idx'].unique(); train_u, valid_u = train_test_split(list(users_all), test_size=0.10, random_state=42)\n",
    "tr_mask = meta_df_scale['user_idx'].isin(train_u); val_mask = meta_df_scale['user_idx'].isin(valid_u)\n",
    "X_tr = meta_df_scale[tr_mask][feat_cols].values; y_tr = meta_df_scale[tr_mask]['label'].values; gr_tr = meta_df_scale[tr_mask].groupby('user_idx', sort=False).size().astype(int).values\n",
    "X_val = meta_df_scale[val_mask][feat_cols].values; y_val = meta_df_scale[val_mask]['label'].values; gr_val = meta_df_scale[val_mask].groupby('user_idx', sort=False).size().astype(int).values\n",
    "\n",
    "dtrain = lgb.Dataset(X_tr, label=y_tr, group=gr_tr); dval = lgb.Dataset(X_val, label=y_val, group=gr_val, reference=dtrain)\n",
    "params_scale = {'objective':'lambdarank','metric':'ndcg','ndcg_eval_at':[10,50],'learning_rate':float(best_params_proto.get('learning_rate',0.05)),'num_leaves':int(best_params_proto.get('num_leaves',63)),'min_data_in_leaf':int(best_params_proto.get('min_data_in_leaf',20)),'feature_fraction':float(best_params_proto.get('feature_fraction',0.8)),'verbosity':-1,'seed':42,'feature_pre_filter':False}\n",
    "bst_final_scale = lgb.train(params_scale, dtrain, num_boost_round=1000, valid_sets=[dval], callbacks=[lgb.early_stopping(stopping_rounds=50), lgb.log_evaluation(period=100)])\n",
    "joblib.dump(bst_final_scale, f\"{OUT_DIR}/lgbm_reranker_final.joblib\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f7a7f7e",
   "metadata": {
    "papermill": {
     "duration": 0.037069,
     "end_time": "2025-10-01T21:12:27.476275",
     "exception": false,
     "start_time": "2025-10-01T21:12:27.439206",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 7 — Final Evaluation & Metrics\n",
    "\n",
    "Compute P@K, R@K, NDCG@K, MAP, and MPR for the LGBM hybrid reranker and a semantic baseline. Results are saved to `OUT_DIR/final_scale_summary_metrics.csv`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "062c316f",
   "metadata": {
    "papermill": {
     "duration": 0.040215,
     "end_time": "2025-10-01T21:12:27.553274",
     "exception": false,
     "start_time": "2025-10-01T21:12:27.513059",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 19\n",
    "\n",
    "**Purpose:** Imports libraries used later. Defines function(s) used downstream. Produces predictions on data. Saves results or models to disk.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Final evaluation utilities and run` → Comment describing intent.\n",
    "- `from math import log2` → Imports module(s).\n",
    "- `def ndcg_at_k(pred_list, true_list, k=10):` → Performs a step relevant to data processing or modelling.\n",
    "- `if not true_list: return 0.0` → Performs a step relevant to data processing or modelling.\n",
    "- `pred_k = pred_list[:k]; gains = [1.0 if p in true_list else 0.0 for p in pred_k]` → Performs a step relevant to data processing or modelling.\n",
    "- `dcg = sum(g / log2(i+2) for i,g in enumerate(gains)); idcg = sum(1.0 / log2(i+2) for i in range(min(len(true_list), k)))` → Performs a step relevant to data processing or modelling.\n",
    "- `return dcg/idcg if idcg>0 else 0.0` → Performs a step relevant to data processing or modelling.\n",
    "- `def apk(actual, predicted, k=10):` → Performs a step relevant to data processing or modelling.\n",
    "- `if not actual: return 0.0` → Performs a step relevant to data processing or modelling.\n",
    "- `score = 0.0; num_hits = 0.0` → Performs a step relevant to data processing or modelling.\n",
    "- `for i,p in enumerate(predicted[:k]):` → Performs a step relevant to data processing or modelling.\n",
    "- `if p in actual and p not in predicted[:i]:` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "d9a300c6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T21:12:27.633023Z",
     "iopub.status.busy": "2025-10-01T21:12:27.632650Z",
     "iopub.status.idle": "2025-10-01T21:46:14.780709Z",
     "shell.execute_reply": "2025-10-01T21:46:14.779330Z"
    },
    "papermill": {
     "duration": 2027.189645,
     "end_time": "2025-10-01T21:46:14.782665",
     "exception": false,
     "start_time": "2025-10-01T21:12:27.593020",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c540cd1024b944cb8e42e4fa32b2e552",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating lgbm_final_topk:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "23385cb3d1a14eedb01c207c009b0d43",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating semantic_final_topk:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final evaluation complete — metrics saved to /kaggle/working/final_scale_summary_metrics.csv\n"
     ]
    }
   ],
   "source": [
    "# Final evaluation utilities and run\n",
    "from math import log2\n",
    "def ndcg_at_k(pred_list, true_list, k=10):\n",
    "    if not true_list: return 0.0\n",
    "    pred_k = pred_list[:k]; gains = [1.0 if p in true_list else 0.0 for p in pred_k]\n",
    "    dcg = sum(g / log2(i+2) for i,g in enumerate(gains)); idcg = sum(1.0 / log2(i+2) for i in range(min(len(true_list), k)))\n",
    "    return dcg/idcg if idcg>0 else 0.0\n",
    "\n",
    "def apk(actual, predicted, k=10):\n",
    "    if not actual: return 0.0\n",
    "    score = 0.0; num_hits = 0.0\n",
    "    for i,p in enumerate(predicted[:k]):\n",
    "        if p in actual and p not in predicted[:i]:\n",
    "            num_hits += 1.0; score += num_hits/(i+1.0)\n",
    "    return score/min(len(actual), k)\n",
    "\n",
    "def lgbm_final_topk(uidx, k=10):\n",
    "    cands = build_candidates_union(uidx, item_emb_final, (als_model_final if 'als_model_final' in globals() else None), svd_item_factors_final, item_map_scale, pop_counts_scale, user_map_scale, df_scale, interaction_scale, top_sem=1000, top_als=500, top_svd=500, top_pop=500, top_mf=200, max_cands=3000)\n",
    "    if not cands: return []\n",
    "    mf = build_features_for_candidates(uidx, cands, item_emb_final, (als_item_factors_final if 'als_item_factors_final' in globals() else None), (als_user_factors_final if 'als_user_factors_final' in globals() else None), svd_item_factors_final, df_scale, item_map_scale, user_map_scale, pop_counts_scale, feature_names, now_ts)\n",
    "    preds = bst_final_scale.predict(mf['X']); order = np.argsort(-preds)[:k]; return [cands[i] for i in order]\n",
    "\n",
    "def semantic_final_topk(uidx, k=10):\n",
    "    uvec = user_profile_emb(uidx, item_emb_final, df_scale, item_map_scale, user_map_scale); uvec = uvec/(np.linalg.norm(uvec)+1e-9)\n",
    "    scores = item_emb_final.dot(uvec); return list(np.argsort(-scores)[:k])\n",
    "\n",
    "def evaluate_final(scorer_fn, K=10, max_users=1000):\n",
    "    actuals=[]; preds=[]; cnt=0\n",
    "    for uid in tqdm(test_df_scale['reviewerID'].unique()[:max_users], desc=f\"Evaluating {scorer_fn.__name__}\"):\n",
    "        if uid not in user_map_scale: continue\n",
    "        uidx = user_map_scale[uid]\n",
    "        true_asins = test_df_scale[test_df_scale['reviewerID']==uid]['asin'].tolist()\n",
    "        if not true_asins: continue\n",
    "        rec_idxs = scorer_fn(uidx, k=K)\n",
    "        rec_asins = [inv_item_map_scale[i] for i in rec_idxs if i in inv_item_map_scale]\n",
    "        preds.append(rec_asins); actuals.append(true_asins); cnt += 1\n",
    "    if cnt==0: return {'P@10':0.0,'R@10':0.0,'NDCG@10':0.0,'MAP@10':0.0,'MPR@10':0.0,'EvalUsers':0}\n",
    "    P = np.mean([len(set(p[:K]) & set(a))/float(K) for p,a in zip(preds,actuals)])\n",
    "    R = np.mean([len(set(p[:K]) & set(a))/max(1,len(a)) for p,a in zip(preds,actuals)])\n",
    "    N = np.mean([ndcg_at_k(p,a,K) for p,a in zip(preds,actuals)])\n",
    "    MAP = np.mean([apk(a,p,K) for a,p in zip(actuals,preds)])\n",
    "    MPR = np.mean([np.mean([1.0 - (p.index(t)+1)/K if (t in p[:K]) else 0.0 for t in a]) for a,p in zip(actuals,preds)])\n",
    "    return {'P@10':P,'R@10':R,'NDCG@10':N,'MAP@10':MAP,'MPR@10':MPR,'EvalUsers':len(actuals)}\n",
    "\n",
    "final_results = {}\n",
    "final_results['LGBM_Hybrid_Rerank'] = evaluate_final(lgbm_final_topk, K=10)\n",
    "final_results['Semantic_Baseline'] = evaluate_final(semantic_final_topk, K=10)\n",
    "final_df = pd.DataFrame(final_results).T\n",
    "final_df = final_df[['P@10','R@10','NDCG@10','MAP@10','MPR@10','EvalUsers']]\n",
    "final_df.to_csv(f\"{OUT_DIR}/final_scale_summary_metrics.csv\", index=False)\n",
    "print('Final evaluation complete — metrics saved to', f\"{OUT_DIR}/final_scale_summary_metrics.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0167622e",
   "metadata": {
    "papermill": {
     "duration": 0.114088,
     "end_time": "2025-10-01T21:46:14.938368",
     "exception": false,
     "start_time": "2025-10-01T21:46:14.824280",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Feature importance\n",
    "\n",
    "Export and inspect feature importances from the final LightGBM model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "970b28b2",
   "metadata": {
    "papermill": {
     "duration": 0.03747,
     "end_time": "2025-10-01T21:46:15.013417",
     "exception": false,
     "start_time": "2025-10-01T21:46:14.975947",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 21\n",
    "\n",
    "**Purpose:** Saves results or models to disk.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Feature importances` → Comment describing intent.\n",
    "- `fi_df = pd.DataFrame({'feature': feat_cols, 'importance': bst_final_scale.feature_importance()}).sort_values('importance', ascending=False)` → Performs a step relevant to data processing or modelling.\n",
    "- `fi_df.to_csv(f\"{OUT_DIR}/feature_importances_final.csv\", index=False)` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "192130b4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T21:46:15.091862Z",
     "iopub.status.busy": "2025-10-01T21:46:15.091542Z",
     "iopub.status.idle": "2025-10-01T21:46:15.155763Z",
     "shell.execute_reply": "2025-10-01T21:46:15.154728Z"
    },
    "papermill": {
     "duration": 0.104953,
     "end_time": "2025-10-01T21:46:15.157403",
     "exception": false,
     "start_time": "2025-10-01T21:46:15.052450",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Feature importances\n",
    "fi_df = pd.DataFrame({'feature': feat_cols, 'importance': bst_final_scale.feature_importance()}).sort_values('importance', ascending=False)\n",
    "fi_df.to_csv(f\"{OUT_DIR}/feature_importances_final.csv\", index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fec5c492",
   "metadata": {
    "papermill": {
     "duration": 0.036846,
     "end_time": "2025-10-01T21:46:15.231499",
     "exception": false,
     "start_time": "2025-10-01T21:46:15.194653",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 22\n",
    "\n",
    "**Purpose:** Performs an operation relevant to the pipeline (see code).\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Fixed sample recommendation printing (maps indices -> ASIN strings, computes true HITs)` → Comment describing intent.\n",
    "- `SAMPLE_USERS_TO_DISPLAY = 5` → Performs a step relevant to data processing or modelling.\n",
    "- `test_users = test_df_scale['reviewerID'].unique()` → Performs a step relevant to data processing or modelling.\n",
    "- `if len(test_users) == 0:` → Performs a step relevant to data processing or modelling.\n",
    "- `print(\"\\nNo unique test users found to display sample recommendations.\")` → Displays a quick diagnostic for the user.\n",
    "- `else:` → Performs a step relevant to data processing or modelling.\n",
    "- `num_samples = min(SAMPLE_USERS_TO_DISPLAY, len(test_users))` → Performs a step relevant to data processing or modelling.\n",
    "- `sample_uids = random.sample(list(test_users), num_samples)` → Samples rows from a DataFrame.\n",
    "- `print(f\"\\n--- Sample User Recommendation Output (LGBM Hybrid) for {num_samples} Users ---\")` → Displays a quick diagnostic for the user.\n",
    "- `for sample_uid in sample_uids:` → Performs a step relevant to data processing or modelling.\n",
    "- `sample_uidx = user_map_scale.get(sample_uid)` → Performs a step relevant to data processing or modelling.\n",
    "- `if sample_uidx is None:` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "e1d11a00",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T21:46:15.312007Z",
     "iopub.status.busy": "2025-10-01T21:46:15.311629Z",
     "iopub.status.idle": "2025-10-01T21:46:25.371980Z",
     "shell.execute_reply": "2025-10-01T21:46:25.370897Z"
    },
    "papermill": {
     "duration": 10.103461,
     "end_time": "2025-10-01T21:46:25.373733",
     "exception": false,
     "start_time": "2025-10-01T21:46:15.270272",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Sample User Recommendation Output (LGBM Hybrid) for 5 Users ---\n",
      "\n",
      "User ID: AH2WTEH276AS6UDBMUB6FLTVOFLQ\n",
      "True Last Item (to predict): B07GTJSHZ3\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B07GTJSHZ3 (✅ HIT)\n",
      "  2. B00N2ZDXW2 (❌ MISS)\n",
      "  3. B003BWAKJA (❌ MISS)\n",
      "  4. B0727XJQLD (❌ MISS)\n",
      "  5. B08F6GPQQ7 (❌ MISS)\n",
      "  6. B07TWNFDS8 (❌ MISS)\n",
      "  7. B07Q769B5X (❌ MISS)\n",
      "  8. B07K1RZWMC (❌ MISS)\n",
      "  9. B01JIBWCX4 (❌ MISS)\n",
      "  10. B08XQCYPJ3 (❌ MISS)\n",
      "True ASIN in candidate pool? YES\n",
      "\n",
      "User ID: AHY3CW4FJCL7UT74ZRAPZH6IA5LA\n",
      "True Last Item (to predict): B004GF1WUC\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B07D7Q6CHB (❌ MISS)\n",
      "  2. B08LGLSZP5 (❌ MISS)\n",
      "  3. B08CHC7TKZ (❌ MISS)\n",
      "  4. B01AHB9CN2 (❌ MISS)\n",
      "  5. B0778MP49B (❌ MISS)\n",
      "  6. B00N99FXIS (❌ MISS)\n",
      "  7. B08SQJ4RZW (❌ MISS)\n",
      "  8. B00WSW1YXA (❌ MISS)\n",
      "  9. B07RN5T3W4 (❌ MISS)\n",
      "  10. B086C51NNG (❌ MISS)\n",
      "True ASIN in candidate pool? YES\n",
      "\n",
      "User ID: AH67BI7JTOFR35HMZYFVOEHM4CPQ\n",
      "True Last Item (to predict): B07G7GY4PZ\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B01ASXFWEC (❌ MISS)\n",
      "  2. B07RXPCC3S (❌ MISS)\n",
      "  3. B0B5TX9LJZ (❌ MISS)\n",
      "  4. B01LKOZEF0 (❌ MISS)\n",
      "  5. B000Q37TBY (❌ MISS)\n",
      "  6. B00DS4BLLW (❌ MISS)\n",
      "  7. B00WSW1YXA (❌ MISS)\n",
      "  8. B01HCUUOPG (❌ MISS)\n",
      "  9. B00DQ4PDA4 (❌ MISS)\n",
      "  10. B07BJX5G4D (❌ MISS)\n",
      "True ASIN in candidate pool? YES\n",
      "\n",
      "User ID: AHITZR3J7RDQZINCF3UFOJNH4CTA\n",
      "True Last Item (to predict): B07G749WLV\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B00HRM5TZA (❌ MISS)\n",
      "  2. B01HCGZ482 (❌ MISS)\n",
      "  3. B009SKNXKC (❌ MISS)\n",
      "  4. B01LY1TAFR (❌ MISS)\n",
      "  5. B09XHNP4KF (❌ MISS)\n",
      "  6. B002VPE1Q6 (❌ MISS)\n",
      "  7. B00CB7S6ME (❌ MISS)\n",
      "  8. B093RLJL6S (❌ MISS)\n",
      "  9. B01D0VM2L0 (❌ MISS)\n",
      "  10. B00N1X2UC4 (❌ MISS)\n",
      "True ASIN in candidate pool? YES\n",
      "\n",
      "User ID: AH45HFUNRO3OVUEXKRYBTWG3Q5CQ\n",
      "True Last Item (to predict): B00BN1Q5JA\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B00BN1Q5JA (✅ HIT)\n",
      "  2. B071W957BF (❌ MISS)\n",
      "  3. B0719QH4JP (❌ MISS)\n",
      "  4. B07K8QZY63 (❌ MISS)\n",
      "  5. B071QWWPJY (❌ MISS)\n",
      "  6. B004GINYGY (❌ MISS)\n",
      "  7. B095WXF84B (❌ MISS)\n",
      "  8. B0079EZRGC (❌ MISS)\n",
      "  9. B07YK3TM8Q (❌ MISS)\n",
      "  10. B0943P4Z1S (❌ MISS)\n",
      "True ASIN in candidate pool? YES\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Fixed sample recommendation printing (maps indices -> ASIN strings, computes true HITs)\n",
    "SAMPLE_USERS_TO_DISPLAY = 5\n",
    "\n",
    "test_users = test_df_scale['reviewerID'].unique()\n",
    "if len(test_users) == 0:\n",
    "    print(\"\\nNo unique test users found to display sample recommendations.\")\n",
    "else:\n",
    "    num_samples = min(SAMPLE_USERS_TO_DISPLAY, len(test_users))\n",
    "    sample_uids = random.sample(list(test_users), num_samples)\n",
    "\n",
    "    print(f\"\\n--- Sample User Recommendation Output (LGBM Hybrid) for {num_samples} Users ---\")\n",
    "\n",
    "    for sample_uid in sample_uids:\n",
    "        sample_uidx = user_map_scale.get(sample_uid)\n",
    "\n",
    "        if sample_uidx is None:\n",
    "            print(f\"\\n[SKIP] User {sample_uid} not in user_map_scale.\")\n",
    "            continue\n",
    "\n",
    "        if 'bst_final_scale' not in globals() or bst_final_scale is None:\n",
    "            print(\"\\n[SKIP] bst_final_scale not available — model wasn't trained or loaded.\")\n",
    "            break\n",
    "\n",
    "        # true ASIN string\n",
    "        actual_asin = test_df_scale[test_df_scale['reviewerID'] == sample_uid]['asin'].iloc[0]\n",
    "\n",
    "        # get recommended item indices (ints)\n",
    "        rec_idxs = lgbm_final_topk(sample_uidx, k=10)\n",
    "\n",
    "        # convert indices -> ASINs (use appropriate inv map)\n",
    "        inv_map = inv_item_map_scale if 'inv_item_map_scale' in globals() else inv_item_map\n",
    "        rec_asins = [inv_map[i] if (i in inv_map) else f\"IDX_{i}\" for i in rec_idxs]\n",
    "\n",
    "        print(f\"\\nUser ID: {sample_uid}\")\n",
    "        print(f\"True Last Item (to predict): {actual_asin}\")\n",
    "        print(\"Top 10 Recommended ASINs:\")\n",
    "        for i, asin in enumerate(rec_asins):\n",
    "            hit_status = \"✅ HIT\" if asin == actual_asin else \"❌ MISS\"\n",
    "            print(f\"  {i+1}. {asin} ({hit_status})\")\n",
    "\n",
    "        # helpful additional info: was the true item present in the candidate set at all?\n",
    "        # Build candidate set with the same function used by the scorer (using larger pool for clarity)\n",
    "        cands = build_candidates_union(sample_uidx,\n",
    "                                       item_emb_final if 'item_emb_final' in globals() else None,\n",
    "                                       als_model_final if 'als_model_final' in globals() else None,\n",
    "                                       svd_item_factors_final if 'svd_item_factors_final' in globals() else None,\n",
    "                                       item_map_scale if 'item_map_scale' in globals() else item_map,\n",
    "                                       pop_counts_scale if 'pop_counts_scale' in globals() else pop_counts,\n",
    "                                       user_map_scale if 'user_map_scale' in globals() else user_map,\n",
    "                                       df_scale if 'df_scale' in globals() else df,\n",
    "                                       interaction_scale if 'interaction_scale' in globals() else interaction,\n",
    "                                       top_sem=1000, top_als=500, top_svd=500, top_pop=500, top_mf=200, max_cands=3000)\n",
    "        cand_asins = {inv_map[i] for i in cands if i in inv_map}\n",
    "        in_candidates = actual_asin in cand_asins\n",
    "        print(f\"True ASIN in candidate pool? {'YES' if in_candidates else 'NO'}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af450f3f",
   "metadata": {
    "papermill": {
     "duration": 0.038445,
     "end_time": "2025-10-01T21:46:25.450256",
     "exception": false,
     "start_time": "2025-10-01T21:46:25.411811",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 8 — Diagnostics, Ablations & Next Steps\n",
    "\n",
    "**Diagnostics included in this notebook:**\n",
    "\n",
    "- Candidate recall checks (small and large pools)\n",
    "- Feature distributions for positives vs negatives\n",
    "- Per-user inspection utilities (`inspect_user_rerank`, `compare_top_bottom`)\n",
    "\n",
    "**Suggested next steps:**\n",
    "\n",
    "1. If reranker underperforms but recall is high: increase meta training size, upsample positives, and tune hard-negative ratios.\n",
    "2. If ALS/SVD features are weak, consider training implicit ALS on denser data or using matrix factorization with alternating optimization.\n",
    "3. Add more content features (title tokens, brand, category) and context signals (time of day, device) if available.\n",
    "4. For production: build offline candidate pipeline (FAISS HNSW) and a lightweight online reranker (optimized model export).\n",
    "\n",
    "---\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "106c6972",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T21:46:25.530620Z",
     "iopub.status.busy": "2025-10-01T21:46:25.529536Z",
     "iopub.status.idle": "2025-10-01T21:46:25.826652Z",
     "shell.execute_reply": "2025-10-01T21:46:25.825371Z"
    },
    "papermill": {
     "duration": 0.339285,
     "end_time": "2025-10-01T21:46:25.828419",
     "exception": false,
     "start_time": "2025-10-01T21:46:25.489134",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_12/2234177804.py:59: FutureWarning: errors='ignore' is deprecated and will raise in a future version. Use to_numeric without passing `errors` and catch exceptions explicitly instead\n",
      "  df[c] = pd.to_numeric(df[c], errors='ignore')\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "## 📊 Final evaluation metrics (loaded from `/kaggle/working/final_scale_summary_metrics.csv`)"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "</style>\n",
       "<table id=\"T_8ec4f\">\n",
       "  <caption>Cleaned final scale summary metrics</caption>\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_8ec4f_level0_col0\" class=\"col_heading level0 col0\" >P@10</th>\n",
       "      <th id=\"T_8ec4f_level0_col1\" class=\"col_heading level0 col1\" >R@10</th>\n",
       "      <th id=\"T_8ec4f_level0_col2\" class=\"col_heading level0 col2\" >NDCG@10</th>\n",
       "      <th id=\"T_8ec4f_level0_col3\" class=\"col_heading level0 col3\" >MAP@10</th>\n",
       "      <th id=\"T_8ec4f_level0_col4\" class=\"col_heading level0 col4\" >MPR@10</th>\n",
       "      <th id=\"T_8ec4f_level0_col5\" class=\"col_heading level0 col5\" >EvalUsers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_8ec4f_level0_row0\" class=\"row_heading level0 row0\" >Model_1</th>\n",
       "      <td id=\"T_8ec4f_row0_col0\" class=\"data row0 col0\" >0.063400</td>\n",
       "      <td id=\"T_8ec4f_row0_col1\" class=\"data row0 col1\" >0.634000</td>\n",
       "      <td id=\"T_8ec4f_row0_col2\" class=\"data row0 col2\" >0.555865</td>\n",
       "      <td id=\"T_8ec4f_row0_col3\" class=\"data row0 col3\" >0.531081</td>\n",
       "      <td id=\"T_8ec4f_row0_col4\" class=\"data row0 col4\" >0.522900</td>\n",
       "      <td id=\"T_8ec4f_row0_col5\" class=\"data row0 col5\" >1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_8ec4f_level0_row1\" class=\"row_heading level0 row1\" >Model_2</th>\n",
       "      <td id=\"T_8ec4f_row1_col0\" class=\"data row1 col0\" >0.073000</td>\n",
       "      <td id=\"T_8ec4f_row1_col1\" class=\"data row1 col1\" >0.730000</td>\n",
       "      <td id=\"T_8ec4f_row1_col2\" class=\"data row1 col2\" >0.624721</td>\n",
       "      <td id=\"T_8ec4f_row1_col3\" class=\"data row1 col3\" >0.589946</td>\n",
       "      <td id=\"T_8ec4f_row1_col4\" class=\"data row1 col4\" >0.605900</td>\n",
       "      <td id=\"T_8ec4f_row1_col5\" class=\"data row1 col5\" >1000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7f67b3bb5090>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "### 🔍 Qualitative model winners (per metric)"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "- **P@10**: top performer — **Model_2**.\n",
       "- **R@10**: top performer — **Model_2**.\n",
       "- **NDCG@10**: top performer — **Model_2**.\n",
       "- **MAP@10**: top performer — **Model_2**.\n",
       "- **MPR@10**: top performer — **Model_2**."
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "### 📘 Metric meanings (guidance — no numeric thresholds)\n",
       "\n",
       "- **Precision@10 (P@10)** — Of the top-10 items returned, the fraction that are relevant. In very large catalogs, absolute Precision values can be low while still being useful.\n",
       "\n",
       "- **Recall@10 (R@10)** — Fraction of the user's relevant items that appear in the top-10. High Recall means good coverage of what the user is likely to want.\n",
       "\n",
       "- **NDCG@10** — Rewards placing the most relevant items near the top. This is often the primary ranking metric to optimize when user satisfaction depends on top-list order.\n",
       "\n",
       "- **MAP@10** — Mean Average Precision across users; emphasizes consistent early correct placements.\n",
       "\n",
       "- **MPR@10** — A rank-based measure capturing how near the top relevant items are on average; complements NDCG/MAP.\n",
       "\n",
       "- **EvalUsers** — The number of users used for evaluation; larger is more reliable.\n",
       "\n",
       "### 🔎 How to interpret combinations (qualitative)\n",
       "\n",
       "- If **NDCG** and **MAP** improve together, the model provides reliably better top-ranked results across users.\n",
       "- If a model shows higher **Recall** but lower **Precision**, it finds many relevant items but the top list may include more noise — consider stronger reranking or feature signals.\n",
       "- A modest Precision in a huge catalog can still be valuable if **Recall** and **NDCG** are strong — the system surfaces relevant items and ranks them well even if many slots remain non-relevant.\n",
       "\n",
       "### ✅ Practical next steps (if you want to improve results)\n",
       "\n",
       "- Verify candidate recall (if many true items never enter the candidate pool, increase pool size or add ANN).\n",
       "- Improve hard-negative mining diversity to teach the reranker harder distinctions.\n",
       "- Add more features (metadata, temporal signals) to the LTR training data.\n",
       "- Consider using stronger encoders (on GPU) or FAISS for ANN retrieval if compute allows."
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Cleanly load & display the saved final metrics table, then give number-free explanations\n",
    "import os\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from IPython.display import display, Markdown\n",
    "\n",
    "# Candidate CSV paths to try (prefer OUT_DIR if available)\n",
    "csv_candidates = []\n",
    "if 'OUT_DIR' in globals() and OUT_DIR:\n",
    "    csv_candidates.append(os.path.join(OUT_DIR, \"final_scale_summary_metrics.csv\"))\n",
    "csv_candidates.extend([\n",
    "    \"final_scale_summary_metrics.csv\",\n",
    "    os.path.join(os.getcwd(), \"final_scale_summary_metrics.csv\"),\n",
    "])\n",
    "\n",
    "# Find a readable CSV\n",
    "metrics_df = None\n",
    "csv_used = None\n",
    "for p in csv_candidates:\n",
    "    if p and os.path.exists(p):\n",
    "        try:\n",
    "            df_try = pd.read_csv(p)\n",
    "            # Basic heuristics for readability: prefer files with expected metric columns\n",
    "            metrics_df = df_try.copy()\n",
    "            csv_used = p\n",
    "            break\n",
    "        except Exception as e:\n",
    "            display(Markdown(f\"**Found file but failed to read** `{p}` — error: `{e}`\"))\n",
    "\n",
    "# If not found, show friendly error\n",
    "if metrics_df is None:\n",
    "    display(Markdown(\"❌ **Could not find or read** `final_scale_summary_metrics.csv` in OUT_DIR or current directory. \"\n",
    "                     \"Make sure the notebook saved it earlier.\"))\n",
    "else:\n",
    "    # ---- CLEANUP ----\n",
    "    df = metrics_df.copy()\n",
    "\n",
    "    # 1) Drop obvious accidental index column (Unnamed: 0 or first column named '0')\n",
    "    if df.columns[0].startswith(\"Unnamed\") or df.columns[0] == \"0\":\n",
    "        df = df.iloc[:, 1:].copy()\n",
    "\n",
    "    # 2) If columns are metrics but are rows (transposed), try to detect and transpose\n",
    "    expected_metrics = {'P@10','R@10','NDCG@10','MAP@10','MPR@10','EvalUsers'}\n",
    "    cols_set = set(df.columns.astype(str))\n",
    "    # If the expected metrics are not in columns but are in the first column values, transpose.\n",
    "    if not expected_metrics.intersection(cols_set):\n",
    "        # check if first column contains metric names\n",
    "        first_col_vals = set(df.iloc[:,0].astype(str).str.strip().tolist())\n",
    "        if expected_metrics.intersection(first_col_vals):\n",
    "            try:\n",
    "                df = df.set_index(df.columns[0]).T.reset_index(drop=True)\n",
    "            except Exception:\n",
    "                pass\n",
    "\n",
    "    # 3) Ensure numeric columns are numeric\n",
    "    for c in df.columns:\n",
    "        # try to coerce numeric-like columns\n",
    "        try:\n",
    "            df[c] = pd.to_numeric(df[c], errors='ignore')\n",
    "        except Exception:\n",
    "            pass\n",
    "\n",
    "    # 4) If no friendly model names in index, create readable labels\n",
    "    if df.index.dtype != 'object' or all(isinstance(i, (int, np.integer, float)) for i in df.index):\n",
    "        # If a 'Model' column exists, use it; otherwise create Model_1, Model_2...\n",
    "        if 'Model' in df.columns:\n",
    "            df = df.set_index('Model')\n",
    "        else:\n",
    "            df.index = [f\"Model_{i+1}\" for i in range(len(df))]\n",
    "\n",
    "    # 5) Reorder columns to expected order where possible\n",
    "    desired_order = ['P@10','R@10','NDCG@10','MAP@10','MPR@10','EvalUsers']\n",
    "    present = [c for c in desired_order if c in df.columns]\n",
    "    others = [c for c in df.columns if c not in present]\n",
    "    df = df[present + others]\n",
    "\n",
    "    # ---- DISPLAY CLEAN TABLE ----\n",
    "    display(Markdown(f\"## 📊 Final evaluation metrics (loaded from `{csv_used}`)\"))\n",
    "    # Format numeric display: 6 decimals for floats, integer for EvalUsers if present\n",
    "    fmt = {}\n",
    "    for c in df.columns:\n",
    "        if c == 'EvalUsers':\n",
    "            fmt[c] = \"{:.0f}\"\n",
    "        else:\n",
    "            # only apply float format if column is numeric\n",
    "            if pd.api.types.is_numeric_dtype(df[c]):\n",
    "                fmt[c] = \"{:.6f}\"\n",
    "            else:\n",
    "                fmt[c] = \"{}\"\n",
    "    display(df.style.format(fmt).set_caption(\"Cleaned final scale summary metrics\"))\n",
    "\n",
    "    # ---- QUALITATIVE COMPARISONS (NO RAW NUMBERS) ----\n",
    "    present_metric_cols = [c for c in ['P@10','R@10','NDCG@10','MAP@10','MPR@10'] if c in df.columns]\n",
    "    qualitative_notes = []\n",
    "\n",
    "    if len(df) == 1:\n",
    "        qualitative_notes.append(\"Only a single model/row is present — no cross-model comparison available.\")\n",
    "    else:\n",
    "        for col in present_metric_cols:\n",
    "            try:\n",
    "                # Determine best model(s) for this metric (higher is better)\n",
    "                best_val = df[col].max()\n",
    "                best_models = df.index[df[col] == best_val].tolist()\n",
    "                if len(best_models) == 1:\n",
    "                    qualitative_notes.append(f\"- **{col}**: top performer — **{best_models[0]}**.\")\n",
    "                else:\n",
    "                    qualitative_notes.append(f\"- **{col}**: top performers (tie) — **{', '.join(best_models)}**.\")\n",
    "            except Exception:\n",
    "                # skip if comparison fails for a column\n",
    "                pass\n",
    "\n",
    "    # ---- HUMAN-FRIENDLY EXPLANATION (NO HARD THRESHOLDS) ----\n",
    "    explanation_lines = [\n",
    "        \"### 📘 Metric meanings (guidance — no numeric thresholds)\",\n",
    "        \"\",\n",
    "        \"- **Precision@10 (P@10)** — Of the top-10 items returned, the fraction that are relevant. In very large catalogs, absolute Precision values can be low while still being useful.\",\n",
    "        \"\",\n",
    "        \"- **Recall@10 (R@10)** — Fraction of the user's relevant items that appear in the top-10. High Recall means good coverage of what the user is likely to want.\",\n",
    "        \"\",\n",
    "        \"- **NDCG@10** — Rewards placing the most relevant items near the top. This is often the primary ranking metric to optimize when user satisfaction depends on top-list order.\",\n",
    "        \"\",\n",
    "        \"- **MAP@10** — Mean Average Precision across users; emphasizes consistent early correct placements.\",\n",
    "        \"\",\n",
    "        \"- **MPR@10** — A rank-based measure capturing how near the top relevant items are on average; complements NDCG/MAP.\",\n",
    "        \"\",\n",
    "        \"- **EvalUsers** — The number of users used for evaluation; larger is more reliable.\",\n",
    "        \"\",\n",
    "        \"### 🔎 How to interpret combinations (qualitative)\",\n",
    "        \"\",\n",
    "        \"- If **NDCG** and **MAP** improve together, the model provides reliably better top-ranked results across users.\",\n",
    "        \"- If a model shows higher **Recall** but lower **Precision**, it finds many relevant items but the top list may include more noise — consider stronger reranking or feature signals.\",\n",
    "        \"- A modest Precision in a huge catalog can still be valuable if **Recall** and **NDCG** are strong — the system surfaces relevant items and ranks them well even if many slots remain non-relevant.\",\n",
    "        \"\",\n",
    "        \"### ✅ Practical next steps (if you want to improve results)\",\n",
    "        \"\",\n",
    "        \"- Verify candidate recall (if many true items never enter the candidate pool, increase pool size or add ANN).\",\n",
    "        \"- Improve hard-negative mining diversity to teach the reranker harder distinctions.\",\n",
    "        \"- Add more features (metadata, temporal signals) to the LTR training data.\",\n",
    "        \"- Consider using stronger encoders (on GPU) or FAISS for ANN retrieval if compute allows.\"\n",
    "    ]\n",
    "\n",
    "    # ---- OUTPUT ----\n",
    "    if qualitative_notes:\n",
    "        display(Markdown(\"### 🔍 Qualitative model winners (per metric)\"))\n",
    "        display(Markdown(\"\\n\".join(qualitative_notes)))\n",
    "    display(Markdown(\"\\n\".join(explanation_lines)))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "75830f29",
   "metadata": {
    "papermill": {
     "duration": 0.040274,
     "end_time": "2025-10-01T21:46:25.907014",
     "exception": false,
     "start_time": "2025-10-01T21:46:25.866740",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 7680.825346,
   "end_time": "2025-10-01T21:46:29.686945",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-10-01T19:38:28.861599",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "002ac5339e48409c8bfb4f5ed1ee9fac": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "00837635bf62455abc4cb3f4fb3dcae6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_8a6e7982a20f454aa16c09d493181944",
        "IPY_MODEL_092807e0c94c4137a41563b0c35f8fca",
        "IPY_MODEL_611fc33bf83e4d1c81549b9eb1eae2a7"
       ],
       "layout": "IPY_MODEL_66db9ef7fb354036887918aa5d043166",
       "tabbable": null,
       "tooltip": null
      }
     },
     "0207354334ae492c95e3a4713e003ff7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "027cb84a7e064e58a20278b4ac1d177b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_bd46d9898722492493f248a486610459",
        "IPY_MODEL_fe1b38b0542d459fa93711d20679daab",
        "IPY_MODEL_b92666e570374bd4ac6a44429ddc2f13"
       ],
       "layout": "IPY_MODEL_da0d355622cd4b3587e6eb064d3c35aa",
       "tabbable": null,
       "tooltip": null
      }
     },
     "027e9014d7b0429cbadae9be59b55fa3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_32fa4cdd0955450fac24ac48ee35590f",
       "max": 300.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_dff04ddedb78469ba26ea1a23999ac9b",
       "tabbable": null,
       "tooltip": null,
       "value": 300.0
      }
     },
     "035b27ef7f30408b92843aa7f36c3cc3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5a8ef14c51a74d058568c069c1322015",
       "max": 571.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_337bf7fcb45c497ebb18dc95955f1ea1",
       "tabbable": null,
       "tooltip": null,
       "value": 571.0
      }
     },
     "035deedc22f5407281095d4c0f98db3e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "046d47c13e0940d5ab6d18a2844761fb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0798e5190bed4e2c8bb64218a4912e97": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0a610f1f885548c9b15c6c4dee9e1838",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b4e99e4aff304163a8370b730755bff0",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "07b4adee799e434f85da6b90d75095e7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_453c3b6975a342cb88f5edb33cdc3aa9",
       "placeholder": "​",
       "style": "IPY_MODEL_046d47c13e0940d5ab6d18a2844761fb",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [33:37&lt;00:00,  2.07s/it]"
      }
     },
     "0874bfb4c8ce438aa44f37157c8a9021": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "092807e0c94c4137a41563b0c35f8fca": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_cf6cbd1ed1e446b8b0e9662fdd5730ed",
       "max": 239.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_78bb589d2af34de38ba571a3f6afe721",
       "tabbable": null,
       "tooltip": null,
       "value": 239.0
      }
     },
     "096142df8cd04d46b1ddf8bf9da1e9e3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0a610f1f885548c9b15c6c4dee9e1838": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "0aac706074fc4fa78e45793330989f63": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0c96305ac58449d3bb844f887a34f3d1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0cdf9d2d87984f7fbf28546fc432071e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_32b1988a246044d08c7f359275bdff45",
        "IPY_MODEL_3d8c34434a9c4cab818fbb0f434c0a35",
        "IPY_MODEL_c0b899b7f29c4fa5becd8586c65dfdcf"
       ],
       "layout": "IPY_MODEL_cb7b0faaafc84bafa7707b1b3f8e719e",
       "tabbable": null,
       "tooltip": null
      }
     },
     "0f00b11ef4a84d0d80b285e087b94fd8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0feb55f8b2ba44dbb8ccba8d1d5d6bc2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_48271cbfda24401eaa97a5cffa646b0c",
       "placeholder": "​",
       "style": "IPY_MODEL_46712b23550b453c9a6eb26573e8cefe",
       "tabbable": null,
       "tooltip": null,
       "value": "Building Meta Scale: 100%"
      }
     },
     "11c182f2b7484ed98d2e5dfd12045382": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_51489d6b82264e1696add921b001cb62",
        "IPY_MODEL_7dfa87df9d00408887d4e1a4ea466bb5",
        "IPY_MODEL_3031ee7d9e984fc6af40214c9dca66f8"
       ],
       "layout": "IPY_MODEL_be0126bda8ad4d66ae57132872f3abd7",
       "tabbable": null,
       "tooltip": null
      }
     },
     "175646a9adb3407489b75767647a0b95": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "176bb4da43b44119b1cb32ab59960482": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ba47eab6fc44477fbe8f9e3aa2f26247",
       "max": 1561.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_2618dc592d71497aaa38d5dece45651f",
       "tabbable": null,
       "tooltip": null,
       "value": 1561.0
      }
     },
     "17d7e138c3e44c1eaa0b19a0500418ae": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "187fd65edb8640baa8796e53faafd1bc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "19136c54e38643bf9b05615bb4b841dc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1926575b1ed7474d8417edda6970da68": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "1a8ee1ae3c674435bb0a69874f0bbd94": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "1bc33cf0728d4db5bcd083f4446576a4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ed0c46c04ebd420397757bc283205c71",
       "max": 20.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_d206c3e5df3e467cab598907811343f0",
       "tabbable": null,
       "tooltip": null,
       "value": 20.0
      }
     },
     "1c5f6ca0d9a542898b284202e3c33fb2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e6e29bc251754f96a486c8f80a7063ce",
       "placeholder": "​",
       "style": "IPY_MODEL_175646a9adb3407489b75767647a0b95",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating lgbm_final_topk: 100%"
      }
     },
     "1dc08fc140f646179648c5cb2b320e86": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_50490be6f1d74536ad2cbeeea0398fcc",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_ce1262cf7fb5478b8f48d8386f95cc77",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "20c0d1da2e4442119e2ebe2dcab8268c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0c96305ac58449d3bb844f887a34f3d1",
       "placeholder": "​",
       "style": "IPY_MODEL_f1f588aa6ba246e7b11a1323029bae35",
       "tabbable": null,
       "tooltip": null,
       "value": "model.safetensors: 100%"
      }
     },
     "20cb7f2a27254b16859643555c9e941d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "23385cb3d1a14eedb01c207c009b0d43": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_6255c49299aa40879489641fc785e43f",
        "IPY_MODEL_4974f782b53f421cbd9106b2a4b8c133",
        "IPY_MODEL_769d2b09be2c40b686a848dea952df08"
       ],
       "layout": "IPY_MODEL_fb7a04e1482947a4909e941116a69c49",
       "tabbable": null,
       "tooltip": null
      }
     },
     "23d8e07fdcb24595a8018821b738a887": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_769d6b6c9cb846e2a7a053a1420fb1a5",
       "placeholder": "​",
       "style": "IPY_MODEL_6ee320ebff49429a9ee026c262bd280c",
       "tabbable": null,
       "tooltip": null,
       "value": "sentence_bert_config.json: 100%"
      }
     },
     "24bc9eceaa0842959f94b5cc1efebd27": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2618dc592d71497aaa38d5dece45651f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "2754020a28c04628a8d93a74b8f180f5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a2ae2d043a364402bf3185dd1b99c8ee",
       "placeholder": "​",
       "style": "IPY_MODEL_035deedc22f5407281095d4c0f98db3e",
       "tabbable": null,
       "tooltip": null,
       "value": " 53.0/53.0 [00:00&lt;00:00, 4.44kB/s]"
      }
     },
     "289ad946cb0b4f7294cc1a410ea5c37d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ecddacbfca7e406cb7465e0e6be8726b",
       "placeholder": "​",
       "style": "IPY_MODEL_305e9039bd51424db6561bd8a094bf17",
       "tabbable": null,
       "tooltip": null,
       "value": " 30.3k/? [00:00&lt;00:00, 2.16MB/s]"
      }
     },
     "2b86dae0056846ac9cfac026534ef234": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "2c7a6be8386d4ce38695372f67ed107a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_f7625db353b744069f68b9d1e1be1384",
        "IPY_MODEL_0798e5190bed4e2c8bb64218a4912e97",
        "IPY_MODEL_ab4f439076d444249ff894ca895acc08"
       ],
       "layout": "IPY_MODEL_8510d439599c48c6b102a0af46630f41",
       "tabbable": null,
       "tooltip": null
      }
     },
     "2d6e87ac630245989cb5b775d78a428d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2e1502f0e6de49b38b5bebd83703c625": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8443a65684044ff889b11a574cd78425",
       "placeholder": "​",
       "style": "IPY_MODEL_b13611c458324545bbbf8b9b63a4cb1b",
       "tabbable": null,
       "tooltip": null,
       "value": "tokenizer_config.json: 100%"
      }
     },
     "2e3fe7c76c0d46a884b3c82e2c7bfa4d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3016d5c0c98b42a7bd44b55215397541": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_9901fecca1ba456d8e1a665f6da0dd49",
        "IPY_MODEL_b31eea52227d4bcd95f6813306fa24eb",
        "IPY_MODEL_460885a00d0a41569e8bda1417ce3b76"
       ],
       "layout": "IPY_MODEL_17d7e138c3e44c1eaa0b19a0500418ae",
       "tabbable": null,
       "tooltip": null
      }
     },
     "3031ee7d9e984fc6af40214c9dca66f8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b1b658a02354409b8cef83d5de10d7fc",
       "placeholder": "​",
       "style": "IPY_MODEL_096142df8cd04d46b1ddf8bf9da1e9e3",
       "tabbable": null,
       "tooltip": null,
       "value": " 20/20 [00:01&lt;00:00, 19.58it/s]"
      }
     },
     "305e9039bd51424db6561bd8a094bf17": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "32b1988a246044d08c7f359275bdff45": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_423f3d7fdaa34cb1941c1c51eea20358",
       "placeholder": "​",
       "style": "IPY_MODEL_9811197770c94ac1b5e4a8c53542a562",
       "tabbable": null,
       "tooltip": null,
       "value": "config_sentence_transformers.json: 100%"
      }
     },
     "32fa4cdd0955450fac24ac48ee35590f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "337810750afb4a2b9bc2aa12e14f00f7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "337bf7fcb45c497ebb18dc95955f1ea1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "3905f8894b684ce3a39f3254fc42d0a4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "391069c5064248cf88b213520ffa04d0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3a12bd0f0dcb4d9ba4f060e23b969259": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_89f573c4ac854a0eb4b1337bd2f47b3d",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_86a5723b009a48349c94623ceab337ab",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "3c311fb1cd9f4d94ac0d827f212faa84": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3d8c34434a9c4cab818fbb0f434c0a35": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_19136c54e38643bf9b05615bb4b841dc",
       "max": 116.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_dff42bd74cd84185bcb2752eee00807c",
       "tabbable": null,
       "tooltip": null,
       "value": 116.0
      }
     },
     "3e12fe54a23144e9bb65af21bd632ffa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "41cb26a5b5d749bdae76abaa429e4633": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "423f3d7fdaa34cb1941c1c51eea20358": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "426a16ad413641c4aac51aae191ce626": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "42a55fd67c2d4a1fb2f69e091303b58c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c4a75e2ad3f94c77afcdcbb39d03d897",
       "placeholder": "​",
       "style": "IPY_MODEL_6ac3e9ef493b42e4874dc8a514cb80a9",
       "tabbable": null,
       "tooltip": null,
       "value": "config.json: 100%"
      }
     },
     "42da84e4aae046ceabcddaa5cd49bb3b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_20cb7f2a27254b16859643555c9e941d",
       "max": 437971872.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_c9780fd3d0814861b81492d7e379aa8f",
       "tabbable": null,
       "tooltip": null,
       "value": 437971872.0
      }
     },
     "453c3b6975a342cb88f5edb33cdc3aa9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "460885a00d0a41569e8bda1417ce3b76": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_533df262a53448f08e967758fae1e967",
       "placeholder": "​",
       "style": "IPY_MODEL_bc38c213cc074019a1939e8932f9e7de",
       "tabbable": null,
       "tooltip": null,
       "value": " 35/35 [35:13&lt;00:00, 56.32s/it]"
      }
     },
     "46712b23550b453c9a6eb26573e8cefe": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "4688654aa1c3454cb87b215d11719b6f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "46b384929ffe4cd38a6283746ea7cdb9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "472da3bb9f234443bc3b8748d97206d9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "47bb56642f22419b9ba4caa4e48c591f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "48271cbfda24401eaa97a5cffa646b0c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4850f1c08a7f490ea9496993c2ac5df2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7220c80d5d1c4367bd688d0f6a56e33d",
       "placeholder": "​",
       "style": "IPY_MODEL_0874bfb4c8ce438aa44f37157c8a9021",
       "tabbable": null,
       "tooltip": null,
       "value": "Building Meta Prototype: 100%"
      }
     },
     "4974f782b53f421cbd9106b2a4b8c133": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e8341854c3ee43309c772b8aefbd949b",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_7eb2ac3b68f04cfd961b600bc211e57f",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "4b5e05cb96af468290d31c979e9e747b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "4b6ea2fbb41c4c70baa46cc48ae7d871": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "4ce0ad11d3cd49c58b2ea1eb26efe20d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2d6e87ac630245989cb5b775d78a428d",
       "max": 349.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_920b5ff91ecb4ea18a25d65f3736d962",
       "tabbable": null,
       "tooltip": null,
       "value": 349.0
      }
     },
     "4f1c8c039c034d6a8e7ea1d86c84e0dc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4f97e2b9df4143a7a5a65380cc5034c9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "50490be6f1d74536ad2cbeeea0398fcc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "51489d6b82264e1696add921b001cb62": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6d78ceab9fa0499a86b22aaefca82da9",
       "placeholder": "​",
       "style": "IPY_MODEL_66d74d7837844a3db215a8843fa21c96",
       "tabbable": null,
       "tooltip": null,
       "value": "100%"
      }
     },
     "533df262a53448f08e967758fae1e967": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "54e3d86fd7ab4c8db195a5050653b67c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5536ff29dcdc4d27bd84dd9b69109097": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "55e9487e5b7048ef873a0ba4d6cc3934": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_41cb26a5b5d749bdae76abaa429e4633",
       "placeholder": "​",
       "style": "IPY_MODEL_857f4312ebd84311ba87fa289225fb44",
       "tabbable": null,
       "tooltip": null,
       "value": "vocab.txt: "
      }
     },
     "55e987b1ceb74590ac98acf033114eee": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "57d3d9189b6b4a4eb75e52545629aa63": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5a3e267d988e4f2dbf17167abf9002e7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5a8ef14c51a74d058568c069c1322015": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5b486ad07a4e44a0ad43848fc317a392": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5d76dcb956444373ac9ce91af68cf86e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5e92853300ae42bbbca7e37ad6533956": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5a3e267d988e4f2dbf17167abf9002e7",
       "placeholder": "​",
       "style": "IPY_MODEL_0207354334ae492c95e3a4713e003ff7",
       "tabbable": null,
       "tooltip": null,
       "value": " 190/190 [00:00&lt;00:00, 18.2kB/s]"
      }
     },
     "5ea7d79bbc36498a9b9360923684f4b0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "611fc33bf83e4d1c81549b9eb1eae2a7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0aac706074fc4fa78e45793330989f63",
       "placeholder": "​",
       "style": "IPY_MODEL_4688654aa1c3454cb87b215d11719b6f",
       "tabbable": null,
       "tooltip": null,
       "value": " 239/239 [00:00&lt;00:00, 22.3kB/s]"
      }
     },
     "6235acc8946349bb840f25d34ee0edd4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_55e9487e5b7048ef873a0ba4d6cc3934",
        "IPY_MODEL_a4bb703f471242dd8c964aa1dbe6dbbc",
        "IPY_MODEL_b193bd64ec784cdab7adc5bee4f973db"
       ],
       "layout": "IPY_MODEL_002ac5339e48409c8bfb4f5ed1ee9fac",
       "tabbable": null,
       "tooltip": null
      }
     },
     "6255c49299aa40879489641fc785e43f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5b486ad07a4e44a0ad43848fc317a392",
       "placeholder": "​",
       "style": "IPY_MODEL_6fc34c5eef764a4f81dbc27f5f26799d",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating semantic_final_topk: 100%"
      }
     },
     "6623a5da93f943488a935e96741b3a35": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_b8bcf2bd905041a981e2ec0b6d62375e",
        "IPY_MODEL_4ce0ad11d3cd49c58b2ea1eb26efe20d",
        "IPY_MODEL_7975e4913d8f459893e2cf189f3315a6"
       ],
       "layout": "IPY_MODEL_c4a54b8c8f584b0fa5941f9dd4a66659",
       "tabbable": null,
       "tooltip": null
      }
     },
     "666e01ecf4124d5fb77baaf39f4eadc0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "66cf00a15af748399e65591ecb60022a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "66d74d7837844a3db215a8843fa21c96": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "66db9ef7fb354036887918aa5d043166": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6745a32dfc7749d991227417b6df53f5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a1e8c921b2654a2fb8187a9061f9c131",
        "IPY_MODEL_1bc33cf0728d4db5bcd083f4446576a4",
        "IPY_MODEL_6f5fef8c68884ccdb79393d85632dd52"
       ],
       "layout": "IPY_MODEL_85a0cbaf163840b79a4625a207430189",
       "tabbable": null,
       "tooltip": null
      }
     },
     "687bbc5f0433430985d0ec03d5ee7434": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "69e6e1e98324479fa8c8622ea77d8f7c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6ac3e9ef493b42e4874dc8a514cb80a9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6d78ceab9fa0499a86b22aaefca82da9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6df24730abef44b8b814ba1105b0d8d9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6e4f40c902f74e5abcd5811f54a8b454": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8c4b5ff3b93a47aabc01644014c4cf4b",
       "placeholder": "​",
       "style": "IPY_MODEL_1a8ee1ae3c674435bb0a69874f0bbd94",
       "tabbable": null,
       "tooltip": null,
       "value": " 300/300 [01:21&lt;00:00,  3.70it/s]"
      }
     },
     "6e72726fd8174134813ff911eba3ca2c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a9a50bfd083949388c675a9a840791d2",
       "max": 190.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b8d4e3ebec6e4831930db0517cf421fb",
       "tabbable": null,
       "tooltip": null,
       "value": 190.0
      }
     },
     "6ec6b51d4cf343ef98dcefc1a1432a57": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "6ee320ebff49429a9ee026c262bd280c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6f5fef8c68884ccdb79393d85632dd52": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_69e6e1e98324479fa8c8622ea77d8f7c",
       "placeholder": "​",
       "style": "IPY_MODEL_66cf00a15af748399e65591ecb60022a",
       "tabbable": null,
       "tooltip": null,
       "value": " 20/20 [00:01&lt;00:00, 11.54it/s]"
      }
     },
     "6fc34c5eef764a4f81dbc27f5f26799d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7142500c82cc42419531a1b9beb8c515": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_77ecb36f5c29406382dc46ee1af7b2bf",
        "IPY_MODEL_6e72726fd8174134813ff911eba3ca2c",
        "IPY_MODEL_5e92853300ae42bbbca7e37ad6533956"
       ],
       "layout": "IPY_MODEL_bd90463835804ed0af82993b35509d55",
       "tabbable": null,
       "tooltip": null
      }
     },
     "7220c80d5d1c4367bd688d0f6a56e33d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "725d85aeac6e4ae68443d61a46f62f59": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_42a55fd67c2d4a1fb2f69e091303b58c",
        "IPY_MODEL_035b27ef7f30408b92843aa7f36c3cc3",
        "IPY_MODEL_e5242bef90464f8ebfe548ae7bf002b5"
       ],
       "layout": "IPY_MODEL_e988a9cc2707467382a9cbb9ab4f332c",
       "tabbable": null,
       "tooltip": null
      }
     },
     "73c49553fe51495ebd0edd753b3956b1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "765f60b1dfe5455ea6975570fa3f3553": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_23d8e07fdcb24595a8018821b738a887",
        "IPY_MODEL_ce1465df4f3445a38653db0a714a597e",
        "IPY_MODEL_2754020a28c04628a8d93a74b8f180f5"
       ],
       "layout": "IPY_MODEL_94b657de292e4e469c7350c14be93463",
       "tabbable": null,
       "tooltip": null
      }
     },
     "769d2b09be2c40b686a848dea952df08": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3e12fe54a23144e9bb65af21bd632ffa",
       "placeholder": "​",
       "style": "IPY_MODEL_a48928f60e8e42ac8ec2c5dd8c48396d",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [00:09&lt;00:00, 107.82it/s]"
      }
     },
     "769d6b6c9cb846e2a7a053a1420fb1a5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "77ecb36f5c29406382dc46ee1af7b2bf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d632f249aea04ee088495b3621e5fe27",
       "placeholder": "​",
       "style": "IPY_MODEL_c424e14c1a8344d095ebbe342a66c29c",
       "tabbable": null,
       "tooltip": null,
       "value": "config.json: 100%"
      }
     },
     "78bb589d2af34de38ba571a3f6afe721": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "7975e4913d8f459893e2cf189f3315a6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9c2d5bdd46bc40e5bd642a31a4a655d4",
       "placeholder": "​",
       "style": "IPY_MODEL_f8f7eeb8a94540559c04160e20f8629c",
       "tabbable": null,
       "tooltip": null,
       "value": " 349/349 [00:00&lt;00:00, 31.5kB/s]"
      }
     },
     "7dfa87df9d00408887d4e1a4ea466bb5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9894f0273a27453688b4cc422da72678",
       "max": 20.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_cbfba24d883f4114af8f71995de9d609",
       "tabbable": null,
       "tooltip": null,
       "value": 20.0
      }
     },
     "7eb2ac3b68f04cfd961b600bc211e57f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "7f22e217ed5b47f48058fad3b5faae35": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7f97cdac43b241e088b825ab5caf42da": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8443a65684044ff889b11a574cd78425": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8510d439599c48c6b102a0af46630f41": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "857f4312ebd84311ba87fa289225fb44": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "85a0cbaf163840b79a4625a207430189": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "86a5723b009a48349c94623ceab337ab": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "89f1cd290ba2478baec3ee99db5fb8f4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "89f573c4ac854a0eb4b1337bd2f47b3d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "8a6e7982a20f454aa16c09d493181944": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_54e3d86fd7ab4c8db195a5050653b67c",
       "placeholder": "​",
       "style": "IPY_MODEL_187fd65edb8640baa8796e53faafd1bc",
       "tabbable": null,
       "tooltip": null,
       "value": "special_tokens_map.json: 100%"
      }
     },
     "8c290d74a20e457caabd16a86fd9949a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_0feb55f8b2ba44dbb8ccba8d1d5d6bc2",
        "IPY_MODEL_176bb4da43b44119b1cb32ab59960482",
        "IPY_MODEL_da78dbff4b354f74941978def32ef0e6"
       ],
       "layout": "IPY_MODEL_426a16ad413641c4aac51aae191ce626",
       "tabbable": null,
       "tooltip": null
      }
     },
     "8c4b5ff3b93a47aabc01644014c4cf4b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8dae44787809464480b39869d27ad32e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "8e0e909d198a41cd91c5d40ba4c6078a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6df24730abef44b8b814ba1105b0d8d9",
       "max": 363.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_8dae44787809464480b39869d27ad32e",
       "tabbable": null,
       "tooltip": null,
       "value": 363.0
      }
     },
     "920b5ff91ecb4ea18a25d65f3736d962": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "941d49b0ddd540bd98e0e31760d2220e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "94b657de292e4e469c7350c14be93463": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9811197770c94ac1b5e4a8c53542a562": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9894f0273a27453688b4cc422da72678": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9901fecca1ba456d8e1a665f6da0dd49": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5d76dcb956444373ac9ce91af68cf86e",
       "placeholder": "​",
       "style": "IPY_MODEL_7f22e217ed5b47f48058fad3b5faae35",
       "tabbable": null,
       "tooltip": null,
       "value": "SBERT encode: 100%"
      }
     },
     "9a54cb5498de45d095826df66a28ad6a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e3b73be7178545c4acf55492dd3d2707",
       "placeholder": "​",
       "style": "IPY_MODEL_4b5e05cb96af468290d31c979e9e747b",
       "tabbable": null,
       "tooltip": null,
       "value": " 11.6k/? [00:00&lt;00:00, 1.00MB/s]"
      }
     },
     "9c2d5bdd46bc40e5bd642a31a4a655d4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9dc25492f7fc47088a09233a956cd870": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9f00ff95aa074f05b9b40880d21b60a9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9f859a9ed24d40c3bdc6eef6f606d233": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a1e8c921b2654a2fb8187a9061f9c131": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2e3fe7c76c0d46a884b3c82e2c7bfa4d",
       "placeholder": "​",
       "style": "IPY_MODEL_f56c43dd762c48139895e87b673cf42d",
       "tabbable": null,
       "tooltip": null,
       "value": "Best trial: 0. Best value: -0: 100%"
      }
     },
     "a2984e16939547588982798b8964d896": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ce3fca97c2c84db19739d5c2ac6526a1",
        "IPY_MODEL_1dc08fc140f646179648c5cb2b320e86",
        "IPY_MODEL_289ad946cb0b4f7294cc1a410ea5c37d"
       ],
       "layout": "IPY_MODEL_391069c5064248cf88b213520ffa04d0",
       "tabbable": null,
       "tooltip": null
      }
     },
     "a2ae2d043a364402bf3185dd1b99c8ee": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a48928f60e8e42ac8ec2c5dd8c48396d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a4bb703f471242dd8c964aa1dbe6dbbc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_bc5905fd8392425496c1a307b9ce5264",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_4b6ea2fbb41c4c70baa46cc48ae7d871",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "a9a50bfd083949388c675a9a840791d2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "aafae24700af422a8760fd2c422cc61d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ab4f439076d444249ff894ca895acc08": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_5536ff29dcdc4d27bd84dd9b69109097",
       "placeholder": "​",
       "style": "IPY_MODEL_fc745a1e96924a34b0b98fc0b05ba573",
       "tabbable": null,
       "tooltip": null,
       "value": " 39.6k/? [00:00&lt;00:00, 2.73MB/s]"
      }
     },
     "af75d2015d4a4fcb868665792fc7dbe8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_47bb56642f22419b9ba4caa4e48c591f",
       "placeholder": "​",
       "style": "IPY_MODEL_bee381dc047946fdabc13d9dcaf498df",
       "tabbable": null,
       "tooltip": null,
       "value": "README.md: "
      }
     },
     "b13611c458324545bbbf8b9b63a4cb1b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b193bd64ec784cdab7adc5bee4f973db": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c659dfe8ff104bfaa3650301b6590bf8",
       "placeholder": "​",
       "style": "IPY_MODEL_cbcd2dddfe9b4dbebcb9dc24a8917a40",
       "tabbable": null,
       "tooltip": null,
       "value": " 232k/? [00:00&lt;00:00, 15.3MB/s]"
      }
     },
     "b1b658a02354409b8cef83d5de10d7fc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b31eea52227d4bcd95f6813306fa24eb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_73c49553fe51495ebd0edd753b3956b1",
       "max": 35.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_2b86dae0056846ac9cfac026534ef234",
       "tabbable": null,
       "tooltip": null,
       "value": 35.0
      }
     },
     "b3a4e56342bf4fe9ac012cb8a9320998": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9f859a9ed24d40c3bdc6eef6f606d233",
       "placeholder": "​",
       "style": "IPY_MODEL_9dc25492f7fc47088a09233a956cd870",
       "tabbable": null,
       "tooltip": null,
       "value": " 363/363 [00:00&lt;00:00, 33.6kB/s]"
      }
     },
     "b4b75a59dafd4d75ad3f7bb26ccc28fc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b4e99e4aff304163a8370b730755bff0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b8bcf2bd905041a981e2ec0b6d62375e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_941d49b0ddd540bd98e0e31760d2220e",
       "placeholder": "​",
       "style": "IPY_MODEL_89f1cd290ba2478baec3ee99db5fb8f4",
       "tabbable": null,
       "tooltip": null,
       "value": "modules.json: 100%"
      }
     },
     "b8d4e3ebec6e4831930db0517cf421fb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "b92666e570374bd4ac6a44429ddc2f13": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e2053bd85ca04a408ace5358e0cabcc0",
       "placeholder": "​",
       "style": "IPY_MODEL_337810750afb4a2b9bc2aa12e14f00f7",
       "tabbable": null,
       "tooltip": null,
       "value": " 466k/? [00:00&lt;00:00, 26.2MB/s]"
      }
     },
     "ba47eab6fc44477fbe8f9e3aa2f26247": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bbd987f1f4f548fbbaa84b6993ea491b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_4850f1c08a7f490ea9496993c2ac5df2",
        "IPY_MODEL_027e9014d7b0429cbadae9be59b55fa3",
        "IPY_MODEL_6e4f40c902f74e5abcd5811f54a8b454"
       ],
       "layout": "IPY_MODEL_d6dd7bd13dc04242b6af4e5b37d177ad",
       "tabbable": null,
       "tooltip": null
      }
     },
     "bc38c213cc074019a1939e8932f9e7de": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "bc5905fd8392425496c1a307b9ce5264": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "bd46d9898722492493f248a486610459": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_666e01ecf4124d5fb77baaf39f4eadc0",
       "placeholder": "​",
       "style": "IPY_MODEL_55e987b1ceb74590ac98acf033114eee",
       "tabbable": null,
       "tooltip": null,
       "value": "tokenizer.json: "
      }
     },
     "bd90463835804ed0af82993b35509d55": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "be0126bda8ad4d66ae57132872f3abd7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "bee381dc047946fdabc13d9dcaf498df": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "bfc1339925514032a3a5cb9d9f7042cd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_20c0d1da2e4442119e2ebe2dcab8268c",
        "IPY_MODEL_42da84e4aae046ceabcddaa5cd49bb3b",
        "IPY_MODEL_c509c895be96417db917e86735998066"
       ],
       "layout": "IPY_MODEL_db6b5a17c4924a91adcc351f4544f3c0",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c0b899b7f29c4fa5becd8586c65dfdcf": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4f1c8c039c034d6a8e7ea1d86c84e0dc",
       "placeholder": "​",
       "style": "IPY_MODEL_f32000fad65f4e3cbb406087f51cd3d0",
       "tabbable": null,
       "tooltip": null,
       "value": " 116/116 [00:00&lt;00:00, 11.2kB/s]"
      }
     },
     "c424e14c1a8344d095ebbe342a66c29c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "c4a54b8c8f584b0fa5941f9dd4a66659": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c4a75e2ad3f94c77afcdcbb39d03d897": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c509c895be96417db917e86735998066": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9f00ff95aa074f05b9b40880d21b60a9",
       "placeholder": "​",
       "style": "IPY_MODEL_687bbc5f0433430985d0ec03d5ee7434",
       "tabbable": null,
       "tooltip": null,
       "value": " 438M/438M [00:02&lt;00:00, 243MB/s]"
      }
     },
     "c540cd1024b944cb8e42e4fa32b2e552": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_1c5f6ca0d9a542898b284202e3c33fb2",
        "IPY_MODEL_f6fdfc1c467c48f2b78b62a9745584e7",
        "IPY_MODEL_07b4adee799e434f85da6b90d75095e7"
       ],
       "layout": "IPY_MODEL_472da3bb9f234443bc3b8748d97206d9",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c659dfe8ff104bfaa3650301b6590bf8": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c8578ada382d4652b5d21aa7d3575fcc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "c9780fd3d0814861b81492d7e379aa8f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "cb7b0faaafc84bafa7707b1b3f8e719e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cbcd2dddfe9b4dbebcb9dc24a8917a40": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "cbfba24d883f4114af8f71995de9d609": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "ce1262cf7fb5478b8f48d8386f95cc77": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "ce1465df4f3445a38653db0a714a597e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7f97cdac43b241e088b825ab5caf42da",
       "max": 53.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_f7d8e245d9664fb3aea005fc71dec328",
       "tabbable": null,
       "tooltip": null,
       "value": 53.0
      }
     },
     "ce3fca97c2c84db19739d5c2ac6526a1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f1c234b4afc3484db9a3b61d6c0272cb",
       "placeholder": "​",
       "style": "IPY_MODEL_5ea7d79bbc36498a9b9360923684f4b0",
       "tabbable": null,
       "tooltip": null,
       "value": "README.md: "
      }
     },
     "cf6cbd1ed1e446b8b0e9662fdd5730ed": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d206c3e5df3e467cab598907811343f0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "d46acfec34cd48069422f8671b270b74": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_2e1502f0e6de49b38b5bebd83703c625",
        "IPY_MODEL_8e0e909d198a41cd91c5d40ba4c6078a",
        "IPY_MODEL_b3a4e56342bf4fe9ac012cb8a9320998"
       ],
       "layout": "IPY_MODEL_24bc9eceaa0842959f94b5cc1efebd27",
       "tabbable": null,
       "tooltip": null
      }
     },
     "d632f249aea04ee088495b3621e5fe27": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d6dd7bd13dc04242b6af4e5b37d177ad": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "da0d355622cd4b3587e6eb064d3c35aa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "da78dbff4b354f74941978def32ef0e6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3c311fb1cd9f4d94ac0d827f212faa84",
       "placeholder": "​",
       "style": "IPY_MODEL_1926575b1ed7474d8417edda6970da68",
       "tabbable": null,
       "tooltip": null,
       "value": " 1561/1561 [54:01&lt;00:00,  1.96s/it]"
      }
     },
     "db6b5a17c4924a91adcc351f4544f3c0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "dff04ddedb78469ba26ea1a23999ac9b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "dff42bd74cd84185bcb2752eee00807c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "e2053bd85ca04a408ace5358e0cabcc0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e3b73be7178545c4acf55492dd3d2707": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e5242bef90464f8ebfe548ae7bf002b5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4f97e2b9df4143a7a5a65380cc5034c9",
       "placeholder": "​",
       "style": "IPY_MODEL_3905f8894b684ce3a39f3254fc42d0a4",
       "tabbable": null,
       "tooltip": null,
       "value": " 571/571 [00:00&lt;00:00, 52.7kB/s]"
      }
     },
     "e6e29bc251754f96a486c8f80a7063ce": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e8341854c3ee43309c772b8aefbd949b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e988a9cc2707467382a9cbb9ab4f332c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ecddacbfca7e406cb7465e0e6be8726b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ed0c46c04ebd420397757bc283205c71": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f1c234b4afc3484db9a3b61d6c0272cb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f1f588aa6ba246e7b11a1323029bae35": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f32000fad65f4e3cbb406087f51cd3d0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f56c43dd762c48139895e87b673cf42d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f6671b6b6a624b9b8cf59523f0a953e4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_af75d2015d4a4fcb868665792fc7dbe8",
        "IPY_MODEL_3a12bd0f0dcb4d9ba4f060e23b969259",
        "IPY_MODEL_9a54cb5498de45d095826df66a28ad6a"
       ],
       "layout": "IPY_MODEL_0f00b11ef4a84d0d80b285e087b94fd8",
       "tabbable": null,
       "tooltip": null
      }
     },
     "f6fdfc1c467c48f2b78b62a9745584e7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_57d3d9189b6b4a4eb75e52545629aa63",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_b4b75a59dafd4d75ad3f7bb26ccc28fc",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "f7625db353b744069f68b9d1e1be1384": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_aafae24700af422a8760fd2c422cc61d",
       "placeholder": "​",
       "style": "IPY_MODEL_c8578ada382d4652b5d21aa7d3575fcc",
       "tabbable": null,
       "tooltip": null,
       "value": "Amazon-Reviews-2023.py: "
      }
     },
     "f7d8e245d9664fb3aea005fc71dec328": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "f8f7eeb8a94540559c04160e20f8629c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "fb7a04e1482947a4909e941116a69c49": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fc745a1e96924a34b0b98fc0b05ba573": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "fe1b38b0542d459fa93711d20679daab": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6ec6b51d4cf343ef98dcefc1a1432a57",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_46b384929ffe4cd38a6283746ea7cdb9",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
