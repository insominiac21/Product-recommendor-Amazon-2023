{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e3b7b860",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T16:49:07.392902Z",
     "iopub.status.busy": "2025-10-01T16:49:07.392681Z",
     "iopub.status.idle": "2025-10-01T16:49:08.844561Z",
     "shell.execute_reply": "2025-10-01T16:49:08.843956Z"
    },
    "papermill": {
     "duration": 1.46085,
     "end_time": "2025-10-01T16:49:08.845987",
     "exception": false,
     "start_time": "2025-10-01T16:49:07.385137",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5446ccd9",
   "metadata": {
    "papermill": {
     "duration": 0.005801,
     "end_time": "2025-10-01T16:49:08.858100",
     "exception": false,
     "start_time": "2025-10-01T16:49:08.852299",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Variant: Run with 30,000 sample rows (second phase)\n",
    "\n",
    "This variant includes `SAMPLE_ROWS=30000`. To actually restrict the dataset to 30k rows, add `.sample(SAMPLE_ROWS, random_state=42)` to the cell that loads the CSV (or adapt that read to use SAMPLE_ROWS). The rest of the notebook is unchanged and contains detailed explanations before each original code cell."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "170d023b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T16:49:08.870179Z",
     "iopub.status.busy": "2025-10-01T16:49:08.869845Z",
     "iopub.status.idle": "2025-10-01T16:49:08.873091Z",
     "shell.execute_reply": "2025-10-01T16:49:08.872564Z"
    },
    "papermill": {
     "duration": 0.010656,
     "end_time": "2025-10-01T16:49:08.874237",
     "exception": false,
     "start_time": "2025-10-01T16:49:08.863581",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "SAMPLE_ROWS = 30000  # set to 30000 to use a 30k-sample in the data-loading step\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0baf7f5",
   "metadata": {
    "papermill": {
     "duration": 0.005095,
     "end_time": "2025-10-01T16:49:08.884731",
     "exception": false,
     "start_time": "2025-10-01T16:49:08.879636",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Amazon Hybrid Recommender — Final Notebook\n",
    "\n",
    "Comprehensive, runnable notebook containing prototype and scale stages, candidate generation, feature engineering, hard-negative mining, LightGBM ranking, diagnostics, and recommendations. This version contains full code and explanatory markdowns. Run cells sequentially. Some cells are resource-heavy (SBERT encoding, ALS, FAISS). The notebook includes CPU fallbacks for environments without `implicit` or `faiss`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "137ffadb",
   "metadata": {
    "papermill": {
     "duration": 0.005213,
     "end_time": "2025-10-01T16:49:08.895201",
     "exception": false,
     "start_time": "2025-10-01T16:49:08.889988",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## How to run\n",
    "\n",
    "1. Run top-to-bottom. If your environment is offline or lacks `implicit`/`faiss`, the notebook falls back to CPU-friendly alternatives.\n",
    "2. The notebook writes artifact files to `OUT_DIR` (default `/kaggle/working`).\n",
    "3. If you install new packages mid-run (e.g., `implicit`), you may need to restart the kernel.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "896a45ff",
   "metadata": {
    "papermill": {
     "duration": 0.008028,
     "end_time": "2025-10-01T16:49:08.910034",
     "exception": false,
     "start_time": "2025-10-01T16:49:08.902006",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 3\n",
    "\n",
    "**Purpose:** Imports libraries used later.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Cell 1: Setup — Install-check and imports (non-blocking installs)` → Comment describing intent.\n",
    "- `# Optional: uncomment pip installs if you have internet and want to ensure all libs are present.` → Comment describing intent.\n",
    "- `!pip install -q datasets sentence-transformers scikit-learn lightgbm optuna joblib tqdm pandas scipy faiss-cpu implicit` → Performs a step relevant to data processing or modelling.\n",
    "- `import os, time, warnings, importlib` → Imports module(s).\n",
    "- `import numpy as np, pandas as pd, random, joblib` → Imports module(s).\n",
    "- `from collections import Counter, defaultdict` → Imports module(s).\n",
    "- `from scipy.sparse import csr_matrix` → Imports module(s).\n",
    "- `from tqdm.auto import tqdm` → Imports module(s).\n",
    "- `from math import log2` → Imports module(s).\n",
    "- `warnings.filterwarnings('ignore', category=UserWarning)` → Performs a step relevant to data processing or modelling.\n",
    "- `# Feature list and output directory (kept consistent with original notebook)` → Comment describing intent.\n",
    "- `OUT_DIR = '/kaggle/working'` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0d8d290c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T16:49:08.924426Z",
     "iopub.status.busy": "2025-10-01T16:49:08.924178Z",
     "iopub.status.idle": "2025-10-01T16:50:25.813480Z",
     "shell.execute_reply": "2025-10-01T16:50:25.812476Z"
    },
    "papermill": {
     "duration": 76.898074,
     "end_time": "2025-10-01T16:50:25.814700",
     "exception": false,
     "start_time": "2025-10-01T16:49:08.916626",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m31.4/31.4 MB\u001b[0m \u001b[31m60.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m8.9/8.9 MB\u001b[0m \u001b[31m82.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m193.6/193.6 kB\u001b[0m \u001b[31m12.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m88.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m71.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m46.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m7.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m9.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m13.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m7.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m5.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\r\n",
      "bigframes 2.8.0 requires google-cloud-bigquery-storage<3.0.0,>=2.30.0, which is not installed.\r\n",
      "cesium 0.12.4 requires numpy<3.0,>=2.0, but you have numpy 1.26.4 which is incompatible.\r\n",
      "gcsfs 2025.3.2 requires fsspec==2025.3.2, but you have fsspec 2025.3.0 which is incompatible.\r\n",
      "bigframes 2.8.0 requires google-cloud-bigquery[bqstorage,pandas]>=3.31.0, but you have google-cloud-bigquery 3.25.0 which is incompatible.\r\n",
      "bigframes 2.8.0 requires rich<14,>=12.4.4, but you have rich 14.0.0 which is incompatible.\u001b[0m\u001b[31m\r\n",
      "\u001b[0mEnvironment flags — HAS_SBERT: True HAS_IMPLICIT: True HAS_FAISS: True\n"
     ]
    }
   ],
   "source": [
    "# Cell 1: Setup — Install-check and imports (non-blocking installs)\n",
    "# Optional: uncomment pip installs if you have internet and want to ensure all libs are present.\n",
    "!pip install -q datasets sentence-transformers scikit-learn lightgbm optuna joblib tqdm pandas scipy faiss-cpu implicit\n",
    "\n",
    "import os, time, warnings, importlib\n",
    "import numpy as np, pandas as pd, random, joblib\n",
    "from collections import Counter, defaultdict\n",
    "from scipy.sparse import csr_matrix\n",
    "from tqdm.auto import tqdm\n",
    "from math import log2\n",
    "\n",
    "warnings.filterwarnings('ignore', category=UserWarning)\n",
    "\n",
    "# Feature list and output directory (kept consistent with original notebook)\n",
    "OUT_DIR = '/kaggle/working'\n",
    "feature_names = ['sem_score','sem_rank','als_score','als_rank','svd_score','svd_rank','pop_log','pop_rank','recency_days','title_len','txt_len','user_mean_rating','user_activity_count']\n",
    "feat_cols = feature_names\n",
    "now_ts = int(time.time() * 1000)\n",
    "\n",
    "# Flags for optional libs — later cells use these flags to decide runtime paths\n",
    "HAS_IMPLICIT = importlib.util.find_spec('implicit') is not None\n",
    "HAS_FAISS = importlib.util.find_spec('faiss') is not None\n",
    "HAS_SBERT = importlib.util.find_spec('sentence_transformers') is not None\n",
    "\n",
    "print('Environment flags — HAS_SBERT:', HAS_SBERT, 'HAS_IMPLICIT:', HAS_IMPLICIT, 'HAS_FAISS:', HAS_FAISS)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "220e97d1",
   "metadata": {
    "papermill": {
     "duration": 0.025337,
     "end_time": "2025-10-01T16:50:25.866460",
     "exception": false,
     "start_time": "2025-10-01T16:50:25.841123",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1 — Prototype Data Load (10k)\n",
    "\n",
    "Load a small streaming sample (10k rows) from the Hugging Face Amazon Reviews dataset to iterate quickly and debug logic. This cell normalizes timestamps to milliseconds, drops records missing `asin` or `reviewerID`, and writes `sampled_reviews_10k.parquet` to `OUT_DIR`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4e7a1b1",
   "metadata": {
    "papermill": {
     "duration": 0.024944,
     "end_time": "2025-10-01T16:50:25.916946",
     "exception": false,
     "start_time": "2025-10-01T16:50:25.892002",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 5\n",
    "\n",
    "**Purpose:** Imports libraries used later. Saves results or models to disk.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Prototype Data Load (10k)` → Comment describing intent.\n",
    "- `SAMPLE_N = 10000` → Performs a step relevant to data processing or modelling.\n",
    "- `HF_DATASET = 'McAuley-Lab/Amazon-Reviews-2023'` → Performs a step relevant to data processing or modelling.\n",
    "- `HF_CONFIG = 'raw_review_Electronics'` → Performs a step relevant to data processing or modelling.\n",
    "- `OUT_DIR = OUT_DIR if 'OUT_DIR' in globals() else '/kaggle/working'` → Performs a step relevant to data processing or modelling.\n",
    "- `from datasets import load_dataset` → Imports module(s).\n",
    "- `rows = []` → Performs a step relevant to data processing or modelling.\n",
    "- `cnt = 0` → Performs a step relevant to data processing or modelling.\n",
    "- `t0 = time.time()` → Performs a step relevant to data processing or modelling.\n",
    "- `ds_iter = load_dataset(HF_DATASET, HF_CONFIG, split='full', streaming=True, trust_remote_code=True)` → Performs a step relevant to data processing or modelling.\n",
    "- `for rec in ds_iter:` → Performs a step relevant to data processing or modelling.\n",
    "- `try:` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f3b6e46c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T16:50:25.968930Z",
     "iopub.status.busy": "2025-10-01T16:50:25.968578Z",
     "iopub.status.idle": "2025-10-01T16:50:32.531050Z",
     "shell.execute_reply": "2025-10-01T16:50:32.530124Z"
    },
    "papermill": {
     "duration": 6.590017,
     "end_time": "2025-10-01T16:50:32.532405",
     "exception": false,
     "start_time": "2025-10-01T16:50:25.942388",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1974d18ef412401a923e8e5c11762136",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "README.md: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0f74e414be3e4c86979a363f9762fc16",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Amazon-Reviews-2023.py: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded 10000 rows. Saved to /kaggle/working/sampled_reviews_10k.parquet\n"
     ]
    }
   ],
   "source": [
    "# Prototype Data Load (10k)\n",
    "SAMPLE_N = 10000\n",
    "HF_DATASET = 'McAuley-Lab/Amazon-Reviews-2023'\n",
    "HF_CONFIG = 'raw_review_Electronics'\n",
    "OUT_DIR = OUT_DIR if 'OUT_DIR' in globals() else '/kaggle/working'\n",
    "\n",
    "from datasets import load_dataset\n",
    "\n",
    "rows = []\n",
    "cnt = 0\n",
    "t0 = time.time()\n",
    "ds_iter = load_dataset(HF_DATASET, HF_CONFIG, split='full', streaming=True, trust_remote_code=True)\n",
    "for rec in ds_iter:\n",
    "    try:\n",
    "        asin = rec.get('asin') or rec.get('parent_asin')\n",
    "        user = rec.get('user_id') or rec.get('reviewerID')\n",
    "        text = rec.get('text') or rec.get('reviewText') or ''\n",
    "        overall = rec.get('rating') or rec.get('overall')\n",
    "        ts = rec.get('timestamp') or rec.get('unixReviewTime') or 0\n",
    "        helpful = rec.get('helpful_vote') or 0\n",
    "        if asin is None or user is None: \n",
    "            continue\n",
    "        ts_i = int(ts); ts_i = ts_i * 1000 if ts_i < 10**10 else ts_i\n",
    "        rows.append({'asin': str(asin), 'reviewerID': str(user), 'reviewText': str(text), 'overall': float(overall) if overall is not None else float('nan'), 'unixReviewTime': int(ts_i), 'helpful_vote': int(helpful)})\n",
    "        cnt += 1\n",
    "        if cnt >= SAMPLE_N: break\n",
    "    except Exception:\n",
    "        continue\n",
    "df = pd.DataFrame(rows)\n",
    "os.makedirs(OUT_DIR, exist_ok=True)\n",
    "df.to_parquet(f\"{OUT_DIR}/sampled_reviews_10k.parquet\", index=False)\n",
    "print('Loaded', len(df), 'rows. Saved to', f\"{OUT_DIR}/sampled_reviews_10k.parquet\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73c9141e",
   "metadata": {
    "papermill": {
     "duration": 0.026896,
     "end_time": "2025-10-01T16:50:32.588028",
     "exception": false,
     "start_time": "2025-10-01T16:50:32.561132",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Build maps and interaction (prototype)\n",
    "\n",
    "Create `item_map`, `user_map` and the sparse interaction matrix used by ALS and candidate generation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6dd4b79f",
   "metadata": {
    "papermill": {
     "duration": 0.028823,
     "end_time": "2025-10-01T16:50:32.693577",
     "exception": false,
     "start_time": "2025-10-01T16:50:32.664754",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 7\n",
    "\n",
    "**Purpose:** Performs an operation relevant to the pipeline (see code).\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Build maps and interaction (prototype)` → Comment describing intent.\n",
    "- `unique_asins = sorted(df['asin'].unique().tolist())` → Performs a step relevant to data processing or modelling.\n",
    "- `unique_users = sorted(df['reviewerID'].unique().tolist())` → Performs a step relevant to data processing or modelling.\n",
    "- `item_map = {a:i for i,a in enumerate(unique_asins)}` → Performs a step relevant to data processing or modelling.\n",
    "- `inv_item_map = {i:a for a,i in item_map.items()}` → Performs a step relevant to data processing or modelling.\n",
    "- `user_map = {u:i for i,u in enumerate(unique_users)}` → Performs a step relevant to data processing or modelling.\n",
    "- `inv_user_map = {i:u for u,i in user_map.items()}` → Performs a step relevant to data processing or modelling.\n",
    "- `n_users, n_items = len(user_map), len(item_map)` → Performs a step relevant to data processing or modelling.\n",
    "- `u_idx = []; i_idx = []; data = []` → Performs a step relevant to data processing or modelling.\n",
    "- `for _, r in df.iterrows():` → Performs a step relevant to data processing or modelling.\n",
    "- `try:` → Performs a step relevant to data processing or modelling.\n",
    "- `u = user_map[r['reviewerID']]; i = item_map[r['asin']]` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9fe23fc7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T16:50:32.748998Z",
     "iopub.status.busy": "2025-10-01T16:50:32.748544Z",
     "iopub.status.idle": "2025-10-01T16:50:33.200217Z",
     "shell.execute_reply": "2025-10-01T16:50:33.199257Z"
    },
    "papermill": {
     "duration": 0.481005,
     "end_time": "2025-10-01T16:50:33.201671",
     "exception": false,
     "start_time": "2025-10-01T16:50:32.720666",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Maps built: 1561 users x 8907 items\n"
     ]
    }
   ],
   "source": [
    "# Build maps and interaction (prototype)\n",
    "unique_asins = sorted(df['asin'].unique().tolist())\n",
    "unique_users = sorted(df['reviewerID'].unique().tolist())\n",
    "item_map = {a:i for i,a in enumerate(unique_asins)}\n",
    "inv_item_map = {i:a for a,i in item_map.items()}\n",
    "user_map = {u:i for i,u in enumerate(unique_users)}\n",
    "inv_user_map = {i:u for u,i in user_map.items()}\n",
    "\n",
    "n_users, n_items = len(user_map), len(item_map)\n",
    "u_idx = []; i_idx = []; data = []\n",
    "for _, r in df.iterrows():\n",
    "    try:\n",
    "        u = user_map[r['reviewerID']]; i = item_map[r['asin']]\n",
    "        w = float(r['overall']) if not pd.isna(r['overall']) else 1.0 + int(r.get('helpful_vote',0))\n",
    "        u_idx.append(u); i_idx.append(i); data.append(w)\n",
    "    except KeyError:\n",
    "        continue\n",
    "\n",
    "interaction = csr_matrix((data, (u_idx, i_idx)), shape=(n_users, n_items)).tocsr()\n",
    "item_user_matrix = interaction.T.tocsr()\n",
    "pop_counts = Counter(df['asin'])\n",
    "test_df_proto = df.groupby('reviewerID').tail(1).reset_index(drop=True)\n",
    "print('Maps built:', n_users, 'users x', n_items, 'items')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dd6fecb5",
   "metadata": {
    "papermill": {
     "duration": 0.02802,
     "end_time": "2025-10-01T16:50:33.258586",
     "exception": false,
     "start_time": "2025-10-01T16:50:33.230566",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 2 — Helper functions & Feature Builder\n",
    "\n",
    "This cell defines helper utilities used throughout the notebook:\n",
    "\n",
    "- `user_profile_emb`: compute a user's profile embedding (mean of item embeddings) with safe fallbacks.\n",
    "- `build_candidates_union`: aggregate candidates from semantic nearest neighbors, ALS, SVD, popularity and MF neighbors.\n",
    "- `build_features_for_candidates`: compute features used by the LightGBM reranker.\n",
    "\n",
    "All functions include robust error handling so the notebook runs even if optional libraries are missing."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe171a23",
   "metadata": {
    "papermill": {
     "duration": 0.026836,
     "end_time": "2025-10-01T16:50:33.312520",
     "exception": false,
     "start_time": "2025-10-01T16:50:33.285684",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 9\n",
    "\n",
    "**Purpose:** Imports libraries used later. Defines function(s) used downstream.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Helper functions and feature builder (robust)` → Comment describing intent.\n",
    "- `import numpy as np, pandas as pd, math` → Imports module(s).\n",
    "- `from collections import defaultdict` → Imports module(s).\n",
    "- `# Ensure inv maps exist` → Comment describing intent.\n",
    "- `if 'inv_item_map' not in globals(): inv_item_map = {}` → Performs a step relevant to data processing or modelling.\n",
    "- `if 'inv_user_map' not in globals(): inv_user_map = {}` → Performs a step relevant to data processing or modelling.\n",
    "- `def user_profile_emb(uidx, emb_array, df_data, i_map, u_map):` → Performs a step relevant to data processing or modelling.\n",
    "- `# uid -> user string` → Comment describing intent.\n",
    "- `uid = None` → Performs a step relevant to data processing or modelling.\n",
    "- `if 'inv_user_map' in globals() and uidx in inv_user_map:` → Performs a step relevant to data processing or modelling.\n",
    "- `uid = inv_user_map.get(uidx)` → Performs a step relevant to data processing or modelling.\n",
    "- `if uid is None:` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2683a79c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T16:50:33.367298Z",
     "iopub.status.busy": "2025-10-01T16:50:33.367042Z",
     "iopub.status.idle": "2025-10-01T16:50:33.391145Z",
     "shell.execute_reply": "2025-10-01T16:50:33.390121Z"
    },
    "papermill": {
     "duration": 0.052877,
     "end_time": "2025-10-01T16:50:33.392290",
     "exception": false,
     "start_time": "2025-10-01T16:50:33.339413",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Helper functions and feature builder (robust)\n",
    "import numpy as np, pandas as pd, math\n",
    "from collections import defaultdict\n",
    "\n",
    "# Ensure inv maps exist\n",
    "if 'inv_item_map' not in globals(): inv_item_map = {}\n",
    "if 'inv_user_map' not in globals(): inv_user_map = {}\n",
    "\n",
    "def user_profile_emb(uidx, emb_array, df_data, i_map, u_map):\n",
    "    # uid -> user string\n",
    "    uid = None\n",
    "    if 'inv_user_map' in globals() and uidx in inv_user_map:\n",
    "        uid = inv_user_map.get(uidx)\n",
    "    if uid is None:\n",
    "        # fallback: if uidx already a string, try that\n",
    "        uid = uidx if isinstance(uidx, str) else None\n",
    "    if uid is None:\n",
    "        return emb_array.mean(axis=0)\n",
    "    item_list = df_data[df_data['reviewerID']==uid]['asin'].map(i_map).dropna().astype(int).tolist()\n",
    "    if item_list and len(item_list)>0:\n",
    "        return emb_array[item_list].mean(axis=0)\n",
    "    else:\n",
    "        return emb_array.mean(axis=0)\n",
    "\n",
    "def build_candidates_union(uidx, emb_array, als_model, svd_facs, i_map, p_counts, u_map, df_data, inter_mat, top_sem=500, top_als=200, top_svd=200, top_pop=200, top_mf=200, max_cands=2000):\n",
    "    candidates = []; seen = set()\n",
    "    # semantic\n",
    "    if emb_array is not None:\n",
    "        try:\n",
    "            up = user_profile_emb(uidx, emb_array, df_data, i_map, u_map).astype('float32')\n",
    "            un = up / (np.linalg.norm(up) + 1e-9)\n",
    "            scores = emb_array.dot(un)\n",
    "            sem_idxs = np.argsort(-scores)[:top_sem]\n",
    "            for it in map(int, sem_idxs):\n",
    "                if it not in seen: seen.add(it); candidates.append(it)\n",
    "        except Exception:\n",
    "            pass\n",
    "    # ALS recommend\n",
    "    if als_model is not None:\n",
    "        try:\n",
    "            rec = als_model.recommend(uidx, inter_mat[uidx], N=top_als)\n",
    "            als_list = []\n",
    "            if isinstance(rec, list) and len(rec)>0 and isinstance(rec[0], (list,tuple)):\n",
    "                als_list = [int(r[0]) for r in rec]\n",
    "            elif isinstance(rec, tuple) and len(rec)==2:\n",
    "                als_list = [int(x) for x in rec[0]]\n",
    "            else:\n",
    "                try:\n",
    "                    als_list = [int(r[0]) if isinstance(r,(list,tuple)) else int(r) for r in rec]\n",
    "                except Exception:\n",
    "                    als_list = []\n",
    "            for it in als_list:\n",
    "                if it not in seen: seen.add(it); candidates.append(it)\n",
    "        except Exception:\n",
    "            pass\n",
    "    # SVD global similarity\n",
    "    if svd_facs is not None:\n",
    "        try:\n",
    "            user_vec = svd_facs.mean(axis=0)\n",
    "            svd_scores = svd_facs.dot(user_vec)\n",
    "            svd_idx = np.argsort(-svd_scores)[:top_svd]\n",
    "            for it in map(int, svd_idx):\n",
    "                if it not in seen: seen.add(it); candidates.append(it)\n",
    "        except Exception:\n",
    "            pass\n",
    "    # popularity\n",
    "    try:\n",
    "        pop_list = [i_map.get(a) for a,_ in p_counts.most_common(top_pop) if a in i_map]\n",
    "        for it in pop_list:\n",
    "            if it not in seen: seen.add(it); candidates.append(it)\n",
    "    except Exception:\n",
    "        pass\n",
    "    # MF neighbors (approx via item factors if available)\n",
    "    try:\n",
    "        if als_model is not None and hasattr(als_model, 'item_factors'):\n",
    "            item_facs = als_model.item_factors\n",
    "            user_items = inter_mat[uidx].indices.tolist() if hasattr(inter_mat[uidx], 'indices') else []\n",
    "            for it in user_items[:5]:\n",
    "                vec = item_facs[it]\n",
    "                sim = item_facs.dot(vec)\n",
    "                neigh = np.argsort(-sim)[:top_mf]\n",
    "                for ni in map(int, neigh):\n",
    "                    if ni not in seen: seen.add(ni); candidates.append(ni)\n",
    "    except Exception:\n",
    "        pass\n",
    "    return candidates[:max_cands]\n",
    "\n",
    "def build_features_for_candidates(uidx, cands, emb_array, als_facs, als_u_facs, svd_facs, df_data, i_map, u_map, p_counts, feat_names, now_ts):\n",
    "    n = len(cands); X = np.zeros((n, len(feat_names)), dtype=float)\n",
    "    # user emb\n",
    "    try:\n",
    "        uemb = user_profile_emb(uidx, emb_array, df_data, i_map, u_map); uembn = uemb/(np.linalg.norm(uemb)+1e-9)\n",
    "    except Exception:\n",
    "        uembn = emb_array.mean(axis=0); uembn = uembn/(np.linalg.norm(uembn)+1e-9)\n",
    "    # sem\n",
    "    try:\n",
    "        sem_scores = (emb_array[cands] * uembn).sum(axis=1)\n",
    "        X[:, feat_names.index('sem_score')] = sem_scores\n",
    "        ranks = np.empty(n, dtype=int); ranks[np.argsort(-sem_scores)] = np.arange(n); X[:, feat_names.index('sem_rank')] = ranks\n",
    "    except Exception:\n",
    "        pass\n",
    "    # als\n",
    "    try:\n",
    "        if als_facs is not None and als_u_facs is not None:\n",
    "            uf = als_u_facs[uidx] if uidx < als_u_facs.shape[0] else als_facs.mean(axis=0)\n",
    "            als_scores = np.dot(als_facs[cands], uf)\n",
    "            X[:, feat_names.index('als_score')] = als_scores\n",
    "            ranks = np.empty(n, dtype=int); ranks[np.argsort(-als_scores)] = np.arange(n); X[:, feat_names.index('als_rank')] = ranks\n",
    "    except Exception:\n",
    "        pass\n",
    "    # svd\n",
    "    try:\n",
    "        if svd_facs is not None:\n",
    "            user_fact = svd_facs.mean(axis=0); svd_scores = svd_facs[cands].dot(user_fact)\n",
    "            X[:, feat_names.index('svd_score')] = svd_scores; ranks = np.empty(n, dtype=int); ranks[np.argsort(-svd_scores)] = np.arange(n); X[:, feat_names.index('svd_rank')] = ranks\n",
    "    except Exception:\n",
    "        pass\n",
    "    # pop & recency\n",
    "    try:\n",
    "        pop_vals = np.array([p_counts.get(inv_item_map.get(i, ''), 0) for i in cands], dtype=float)\n",
    "        X[:, feat_names.index('pop_log')] = np.log1p(pop_vals); ranks = np.empty(n,dtype=int); ranks[np.argsort(-pop_vals)] = np.arange(n); X[:, feat_names.index('pop_rank')] = ranks\n",
    "        recency_ms = np.array([item_last_ts.get(inv_item_map.get(i, ''), 0) for i in cands], dtype=float); X[:, feat_names.index('recency_days')] = ((now_ts - recency_ms)/(1000*60*60*24)).clip(min=0)\n",
    "    except Exception:\n",
    "        pass\n",
    "    # text & user stats\n",
    "    try:\n",
    "        title_len=[]; txt_len=[]\n",
    "        for idx in cands:\n",
    "            asin = inv_item_map.get(idx, ''); rows_sub = df_data[df_data['asin']==asin]\n",
    "            title = rows_sub['title'].iloc[0] if ('title' in rows_sub.columns and len(rows_sub)>0 and pd.notna(rows_sub['title'].iloc[0])) else ''\n",
    "            text = rows_sub['reviewText'].iloc[0] if ('reviewText' in rows_sub.columns and len(rows_sub)>0 and pd.notna(rows_sub['reviewText'].iloc[0])) else ''\n",
    "            title_len.append(len(str(title))); txt_len.append(len(str(text)))\n",
    "        X[:, feat_names.index('title_len')] = np.array(title_len); X[:, feat_names.index('txt_len')] = np.array(txt_len)\n",
    "        uid = inv_user_map.get(uidx, None); user_rows = df_data[df_data['reviewerID']==uid] if uid else pd.DataFrame()\n",
    "        X[:, feat_names.index('user_mean_rating')] = float(user_rows['overall'].mean() if len(user_rows)>0 else 0.0); X[:, feat_names.index('user_activity_count')] = float(len(user_rows))\n",
    "    except Exception:\n",
    "        pass\n",
    "    return {'X': X, 'cands': cands, 'feature_names': feat_names}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6257842",
   "metadata": {
    "papermill": {
     "duration": 0.025919,
     "end_time": "2025-10-01T16:50:33.444933",
     "exception": false,
     "start_time": "2025-10-01T16:50:33.419014",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 3 — Hard-negative mining (prototype)\n",
    "\n",
    "Create meta-training pairs (pos/neg) for the LTR model. This prototype uses a combination of hard negatives (top-ranked non-pos by ALS/SVD) and random negatives."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f637946b",
   "metadata": {
    "papermill": {
     "duration": 0.02601,
     "end_time": "2025-10-01T16:50:33.497208",
     "exception": false,
     "start_time": "2025-10-01T16:50:33.471198",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 11\n",
    "\n",
    "**Purpose:** Imports libraries used later.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Hard-negative mining (prototype)` → Comment describing intent.\n",
    "- `import random` → Imports module(s).\n",
    "- `USERS_TO_USE = 300; HARD_NEG_PER_POS = 60; RANDOM_NEG_PER_POS = 5` → Performs a step relevant to data processing or modelling.\n",
    "- `meta_rows = []; all_users = list(df['reviewerID'].unique()); sample_users = all_users[:min(USERS_TO_USE, len(all_users))]` → Performs a step relevant to data processing or modelling.\n",
    "- `for uid in tqdm(sample_users, desc='Building Meta Prototype'):` → Performs a step relevant to data processing or modelling.\n",
    "- `uidx = user_map.get(uid);` → Performs a step relevant to data processing or modelling.\n",
    "- `if uidx is None: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `cands = build_candidates_union(uidx, None, None, None, item_map, pop_counts, user_map, df, interaction, top_sem=500, top_als=200, top_svd=200, top_pop=200, max_cands=1000)` → Performs a step relevant to data processing or modelling.\n",
    "- `if not cands: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `mf = build_features_for_candidates(uidx, cands, np.zeros((len(item_map), 768)), None, None, None, df, item_map, user_map, pop_counts, feature_names, now_ts)` → Performs a step relevant to data processing or modelling.\n",
    "- `Xc = mf['X']; cidx = mf['cands']; fns = mf['feature_names']` → Performs a step relevant to data processing or modelling.\n",
    "- `true_asins = test_df_proto[test_df_proto['reviewerID']==uid]['asin'].tolist(); true_idxs = [item_map[a] for a in true_asins if a in item_map]` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "31f92538",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T16:50:33.550322Z",
     "iopub.status.busy": "2025-10-01T16:50:33.550052Z",
     "iopub.status.idle": "2025-10-01T16:51:41.911222Z",
     "shell.execute_reply": "2025-10-01T16:51:41.910361Z"
    },
    "papermill": {
     "duration": 68.389154,
     "end_time": "2025-10-01T16:51:41.912384",
     "exception": false,
     "start_time": "2025-10-01T16:50:33.523230",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "2424927f4ff743debb41064bde9319b7",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Building Meta Prototype:   0%|          | 0/300 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "meta_df_small shape: (2640, 16)\n"
     ]
    }
   ],
   "source": [
    "# Hard-negative mining (prototype)\n",
    "import random\n",
    "USERS_TO_USE = 300; HARD_NEG_PER_POS = 60; RANDOM_NEG_PER_POS = 5\n",
    "meta_rows = []; all_users = list(df['reviewerID'].unique()); sample_users = all_users[:min(USERS_TO_USE, len(all_users))]\n",
    "for uid in tqdm(sample_users, desc='Building Meta Prototype'):\n",
    "    uidx = user_map.get(uid); \n",
    "    if uidx is None: continue\n",
    "    cands = build_candidates_union(uidx, None, None, None, item_map, pop_counts, user_map, df, interaction, top_sem=500, top_als=200, top_svd=200, top_pop=200, max_cands=1000)\n",
    "    if not cands: continue\n",
    "    mf = build_features_for_candidates(uidx, cands, np.zeros((len(item_map), 768)), None, None, None, df, item_map, user_map, pop_counts, feature_names, now_ts)\n",
    "    Xc = mf['X']; cidx = mf['cands']; fns = mf['feature_names']\n",
    "    true_asins = test_df_proto[test_df_proto['reviewerID']==uid]['asin'].tolist(); true_idxs = [item_map[a] for a in true_asins if a in item_map]\n",
    "    if not true_idxs: continue\n",
    "    als_col = Xc[:, fns.index('als_score')] if 'als_score' in fns else np.zeros(Xc.shape[0])\n",
    "    svd_col = Xc[:, fns.index('svd_score')] if 'svd_score' in fns else np.zeros(Xc.shape[0])\n",
    "    hard_score = 0.5 * als_col + 0.5 * svd_col\n",
    "    cand_arr = np.array(cidx); pos_mask = np.isin(cand_arr, true_idxs); non_pos_idx = np.where(~pos_mask)[0]\n",
    "    if len(non_pos_idx)==0: continue\n",
    "    ordering = non_pos_idx[np.argsort(-hard_score[non_pos_idx])]; hard_negs_idx = ordering[:HARD_NEG_PER_POS].tolist()\n",
    "    remaining = list(set(non_pos_idx.tolist()) - set(hard_negs_idx)); random_negs_idx = random.sample(remaining, min(RANDOM_NEG_PER_POS, len(remaining))) if remaining else []\n",
    "    for t in true_idxs:\n",
    "        pos_loc = np.where(cand_arr==t)[0]; \n",
    "        if len(pos_loc)==0: continue\n",
    "        for p in pos_loc:\n",
    "            row = {'user_idx': uidx, 'item_idx': int(cidx[p]), 'label': 1}\n",
    "            for j,fn in enumerate(fns):\n",
    "                try: row[fn] = float(Xc[p,j])\n",
    "                except: row[fn] = 0.0\n",
    "            meta_rows.append(row)\n",
    "            for idx in hard_negs_idx:\n",
    "                rn = {'user_idx': uidx, 'item_idx': int(cidx[idx]), 'label': 0}\n",
    "                for j,fn in enumerate(fns):\n",
    "                    try: rn[fn] = float(Xc[idx,j])\n",
    "                    except: rn[fn] = 0.0\n",
    "                meta_rows.append(rn)\n",
    "            for idx in random_negs_idx:\n",
    "                rr = {'user_idx': uidx, 'item_idx': int(cidx[idx]), 'label': 0}\n",
    "                for j,fn in enumerate(fns):\n",
    "                    try: rr[fn] = float(Xc[idx,j])\n",
    "                    except: rr[fn] = 0.0\n",
    "                meta_rows.append(rr)\n",
    "meta_df_small = pd.DataFrame(meta_rows).sample(frac=1.0, random_state=42).reset_index(drop=True)\n",
    "meta_df_small.to_parquet(f\"{OUT_DIR}/meta_enhanced_small.parquet\", index=False)\n",
    "print('meta_df_small shape:', meta_df_small.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e431f946",
   "metadata": {
    "papermill": {
     "duration": 0.025877,
     "end_time": "2025-10-01T16:51:41.965450",
     "exception": false,
     "start_time": "2025-10-01T16:51:41.939573",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 4 — LightGBM Tuning & Prototype Training\n",
    "\n",
    "Use Optuna to tune lambdarank hyperparameters. Important: set `feature_pre_filter=False` so trials changing `min_data_in_leaf` don't error."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08359663",
   "metadata": {
    "papermill": {
     "duration": 0.026134,
     "end_time": "2025-10-01T16:51:42.017544",
     "exception": false,
     "start_time": "2025-10-01T16:51:41.991410",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 13\n",
    "\n",
    "**Purpose:** Imports libraries used later. Defines function(s) used downstream. Trains a model / fits parameters. Produces predictions on data.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# LightGBM tuning & training (prototype)` → Comment describing intent.\n",
    "- `import lightgbm as lgb, optuna` → Imports module(s).\n",
    "- `from sklearn.model_selection import train_test_split` → Imports module(s).\n",
    "- `from math import log2` → Imports module(s).\n",
    "- `feat_cols = [c for c in meta_df_small.columns if c not in ('user_idx','item_idx','label')]` → Performs a step relevant to data processing or modelling.\n",
    "- `users = meta_df_small['user_idx'].unique(); train_u, valid_u = train_test_split(list(users), test_size=0.20, random_state=42)` → Performs a step relevant to data processing or modelling.\n",
    "- `tr_mask = meta_df_small['user_idx'].isin(train_u); val_mask = meta_df_small['user_idx'].isin(valid_u)` → Performs a step relevant to data processing or modelling.\n",
    "- `X_tr = meta_df_small[tr_mask][feat_cols].values; y_tr = meta_df_small[tr_mask]['label'].values` → Performs a step relevant to data processing or modelling.\n",
    "- `gr_tr = meta_df_small[tr_mask].groupby('user_idx', sort=False).size().astype(int).values` → Groups and aggregates data.\n",
    "- `X_val = meta_df_small[val_mask][feat_cols].values; y_val = meta_df_small[val_mask]['label'].values` → Performs a step relevant to data processing or modelling.\n",
    "- `gr_val = meta_df_small[val_mask].groupby('user_idx', sort=False).size().astype(int).values` → Groups and aggregates data.\n",
    "- `dtrain = lgb.Dataset(X_tr, label=y_tr, group=gr_tr); dval = lgb.Dataset(X_val, label=y_val, group=gr_val, reference=dtrain)` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "c9a6722a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T16:51:42.070335Z",
     "iopub.status.busy": "2025-10-01T16:51:42.070087Z",
     "iopub.status.idle": "2025-10-01T16:51:47.509241Z",
     "shell.execute_reply": "2025-10-01T16:51:47.508603Z"
    },
    "papermill": {
     "duration": 5.466989,
     "end_time": "2025-10-01T16:51:47.510490",
     "exception": false,
     "start_time": "2025-10-01T16:51:42.043501",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[I 2025-10-01 16:51:46,261] A new study created in memory with name: no-name-5eeac2e4-c9e9-4d81-b5d4-959dcc2c3fa9\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "fd21b54857514776b485184b8e8a910f",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/20 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[52]\tvalid_0's ndcg@10: 0.325989\n",
      "[I 2025-10-01 16:51:46,359] Trial 0 finished with value: -0.039433109598216096 and parameters: {'learning_rate': 0.0011330708905407537, 'num_leaves': 120, 'min_data_in_leaf': 184, 'feature_fraction': 0.9082948573612217}. Best is trial 0 with value: -0.039433109598216096.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[3]\tvalid_0's ndcg@10: 0.471713\n",
      "[I 2025-10-01 16:51:46,436] Trial 1 finished with value: -0.0 and parameters: {'learning_rate': 0.0032133640858065422, 'num_leaves': 127, 'min_data_in_leaf': 20, 'feature_fraction': 0.9288982010426504}. Best is trial 0 with value: -0.039433109598216096.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[1]\tvalid_0's ndcg@10: 0.471713\n",
      "[I 2025-10-01 16:51:46,488] Trial 2 finished with value: -0.0 and parameters: {'learning_rate': 0.0013651817031684313, 'num_leaves': 67, 'min_data_in_leaf': 45, 'feature_fraction': 0.7761852211203417}. Best is trial 0 with value: -0.039433109598216096.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[53]\tvalid_0's ndcg@10: 0.465023\n",
      "[I 2025-10-01 16:51:46,565] Trial 3 finished with value: -0.0 and parameters: {'learning_rate': 0.03246740280688021, 'num_leaves': 41, 'min_data_in_leaf': 73, 'feature_fraction': 0.9071524559387276}. Best is trial 0 with value: -0.039433109598216096.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[2]\tvalid_0's ndcg@10: 0.400548\n",
      "[I 2025-10-01 16:51:46,606] Trial 4 finished with value: -0.0 and parameters: {'learning_rate': 0.002315797646754535, 'num_leaves': 70, 'min_data_in_leaf': 92, 'feature_fraction': 0.9080845988659468}. Best is trial 0 with value: -0.039433109598216096.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[16]\tvalid_0's ndcg@10: 0.436807\n",
      "[I 2025-10-01 16:51:46,647] Trial 5 finished with value: -0.0 and parameters: {'learning_rate': 0.0026389237055467764, 'num_leaves': 89, 'min_data_in_leaf': 143, 'feature_fraction': 0.5165738088735277}. Best is trial 0 with value: -0.039433109598216096.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[1]\tvalid_0's ndcg@10: 0.467882\n",
      "[I 2025-10-01 16:51:46,706] Trial 6 finished with value: -0.0 and parameters: {'learning_rate': 0.010614924600301766, 'num_leaves': 61, 'min_data_in_leaf': 32, 'feature_fraction': 0.778780623186992}. Best is trial 0 with value: -0.039433109598216096.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[41]\tvalid_0's ndcg@10: 0.479172\n",
      "[I 2025-10-01 16:51:46,759] Trial 7 finished with value: -0.0 and parameters: {'learning_rate': 0.04428426077134264, 'num_leaves': 87, 'min_data_in_leaf': 137, 'feature_fraction': 0.5833203445633752}. Best is trial 0 with value: -0.039433109598216096.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[6]\tvalid_0's ndcg@10: 0.496169\n",
      "[I 2025-10-01 16:51:46,813] Trial 8 finished with value: -0.0 and parameters: {'learning_rate': 0.006053446051091517, 'num_leaves': 46, 'min_data_in_leaf': 39, 'feature_fraction': 0.727097864292797}. Best is trial 0 with value: -0.039433109598216096.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[1]\tvalid_0's ndcg@10: 0.477191\n",
      "[I 2025-10-01 16:51:46,862] Trial 9 finished with value: -0.0 and parameters: {'learning_rate': 0.005414388159211342, 'num_leaves': 31, 'min_data_in_leaf': 29, 'feature_fraction': 0.9462385820462046}. Best is trial 0 with value: -0.039433109598216096.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[16]\tvalid_0's ndcg@10: 0.399178\n",
      "[I 2025-10-01 16:51:46,917] Trial 10 finished with value: -0.041666666666666664 and parameters: {'learning_rate': 0.001026555689616909, 'num_leaves': 119, 'min_data_in_leaf': 196, 'feature_fraction': 0.8309882865418315}. Best is trial 10 with value: -0.041666666666666664.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[14]\tvalid_0's ndcg@10: 0.399178\n",
      "[I 2025-10-01 16:51:46,981] Trial 11 finished with value: -0.04452589838850277 and parameters: {'learning_rate': 0.0010848424994716137, 'num_leaves': 126, 'min_data_in_leaf': 199, 'feature_fraction': 0.824568078358426}. Best is trial 11 with value: -0.04452589838850277.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[2]\tvalid_0's ndcg@10: 0.411133\n",
      "[I 2025-10-01 16:51:47,030] Trial 12 finished with value: -0.0 and parameters: {'learning_rate': 0.0171797418373487, 'num_leaves': 109, 'min_data_in_leaf': 200, 'feature_fraction': 0.8193615116654812}. Best is trial 11 with value: -0.04452589838850277.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[53]\tvalid_0's ndcg@10: 0.458484\n",
      "[I 2025-10-01 16:51:47,104] Trial 13 finished with value: -0.0 and parameters: {'learning_rate': 0.08850377704264599, 'num_leaves': 105, 'min_data_in_leaf': 169, 'feature_fraction': 0.6826171659814372}. Best is trial 11 with value: -0.04452589838850277.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[4]\tvalid_0's ndcg@10: 0.423357\n",
      "[I 2025-10-01 16:51:47,155] Trial 14 finished with value: -0.0 and parameters: {'learning_rate': 0.001128837160140914, 'num_leaves': 106, 'min_data_in_leaf': 160, 'feature_fraction': 0.8354081424803349}. Best is trial 11 with value: -0.04452589838850277.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[1]\tvalid_0's ndcg@10: 0.413872\n",
      "[I 2025-10-01 16:51:47,213] Trial 15 finished with value: -0.0 and parameters: {'learning_rate': 0.002048167065945339, 'num_leaves': 117, 'min_data_in_leaf': 136, 'feature_fraction': 0.6640886192964387}. Best is trial 11 with value: -0.04452589838850277.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[10]\tvalid_0's ndcg@10: 0.399178\n",
      "[I 2025-10-01 16:51:47,264] Trial 16 finished with value: -0.0 and parameters: {'learning_rate': 0.004787881798854473, 'num_leaves': 94, 'min_data_in_leaf': 193, 'feature_fraction': 0.9949351473516539}. Best is trial 11 with value: -0.04452589838850277.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[2]\tvalid_0's ndcg@10: 0.405001\n",
      "[I 2025-10-01 16:51:47,323] Trial 17 finished with value: -0.0 and parameters: {'learning_rate': 0.0015710503290519255, 'num_leaves': 123, 'min_data_in_leaf': 113, 'feature_fraction': 0.835716316266544}. Best is trial 11 with value: -0.04452589838850277.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[26]\tvalid_0's ndcg@10: 0.397155\n",
      "[I 2025-10-01 16:51:47,399] Trial 18 finished with value: -0.0 and parameters: {'learning_rate': 0.013928573186687707, 'num_leaves': 97, 'min_data_in_leaf': 171, 'feature_fraction': 0.715110906252274}. Best is trial 11 with value: -0.04452589838850277.\n",
      "Training until validation scores don't improve for 40 rounds\n",
      "Early stopping, best iteration is:\n",
      "[1]\tvalid_0's ndcg@10: 0.518324\n",
      "[I 2025-10-01 16:51:47,462] Trial 19 finished with value: -0.09326767935739022 and parameters: {'learning_rate': 0.0034588779244201337, 'num_leaves': 115, 'min_data_in_leaf': 107, 'feature_fraction': 0.6287370335815841}. Best is trial 19 with value: -0.09326767935739022.\n",
      "Best params: {'learning_rate': 0.0034588779244201337, 'num_leaves': 115, 'min_data_in_leaf': 107, 'feature_fraction': 0.6287370335815841}\n",
      "Training until validation scores don't improve for 50 rounds\n",
      "Early stopping, best iteration is:\n",
      "[1]\tvalid_0's ndcg@10: 0.518324\tvalid_0's ndcg@50: 0.562802\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['/kaggle/working/lgbm_reranker_prototype.joblib']"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# LightGBM tuning & training (prototype)\n",
    "import lightgbm as lgb, optuna\n",
    "from sklearn.model_selection import train_test_split\n",
    "from math import log2\n",
    "\n",
    "feat_cols = [c for c in meta_df_small.columns if c not in ('user_idx','item_idx','label')]\n",
    "users = meta_df_small['user_idx'].unique(); train_u, valid_u = train_test_split(list(users), test_size=0.20, random_state=42)\n",
    "tr_mask = meta_df_small['user_idx'].isin(train_u); val_mask = meta_df_small['user_idx'].isin(valid_u)\n",
    "X_tr = meta_df_small[tr_mask][feat_cols].values; y_tr = meta_df_small[tr_mask]['label'].values\n",
    "gr_tr = meta_df_small[tr_mask].groupby('user_idx', sort=False).size().astype(int).values\n",
    "X_val = meta_df_small[val_mask][feat_cols].values; y_val = meta_df_small[val_mask]['label'].values\n",
    "gr_val = meta_df_small[val_mask].groupby('user_idx', sort=False).size().astype(int).values\n",
    "dtrain = lgb.Dataset(X_tr, label=y_tr, group=gr_tr); dval = lgb.Dataset(X_val, label=y_val, group=gr_val, reference=dtrain)\n",
    "\n",
    "def ndcg_per_group(preds, df_masked, K=10):\n",
    "    eval_users = df_masked['user_idx'].unique(); idx = 0; ndcgs = []\n",
    "    for u in eval_users:\n",
    "        sub = df_masked[df_masked['user_idx']==u]; n = len(sub)\n",
    "        if n==0: continue\n",
    "        p = preds[idx: idx + n]; items = sub['item_idx'].values; order = np.argsort(-p); ranked = items[order].tolist()\n",
    "        true_items = sub['item_idx'][sub['label']==1].tolist()\n",
    "        gains = [1.0 if it in true_items else 0.0 for it in ranked[:K]]\n",
    "        dcg = sum(g / log2(i+2) for i,g in enumerate(gains)); idcg = sum(1.0 / log2(i+2) for i in range(min(len(true_items), K))) if len(true_items)>0 else 0.0\n",
    "        ndcgs.append(dcg/idcg if idcg>0 else 0.0); idx += n\n",
    "    return float(np.mean(ndcgs)) if len(ndcgs)>0 else 0.0\n",
    "\n",
    "def objective(trial):\n",
    "    param = {'objective':'lambdarank','metric':'ndcg','ndcg_eval_at':[10],\n",
    "             'learning_rate': trial.suggest_float('learning_rate', 1e-3, 1e-1, log=True),\n",
    "             'num_leaves': trial.suggest_int('num_leaves', 31, 127),\n",
    "             'min_data_in_leaf': trial.suggest_int('min_data_in_leaf', 10, 200),\n",
    "             'feature_fraction': trial.suggest_float('feature_fraction', 0.5, 1.0),\n",
    "             'verbosity': -1, 'seed': 42, 'feature_pre_filter': False}\n",
    "    try:\n",
    "        bst = lgb.train(param, dtrain, num_boost_round=500, valid_sets=[dval], callbacks=[lgb.early_stopping(stopping_rounds=40), lgb.log_evaluation(period=0)])\n",
    "        preds_val = bst.predict(X_val); df_val = meta_df_small[val_mask].copy().reset_index(drop=True)\n",
    "        return -ndcg_per_group(preds_val, df_val, K=10)\n",
    "    except Exception as e:\n",
    "        print('LightGBM failed in objective:', e); return 1.0\n",
    "\n",
    "study = optuna.create_study(direction='minimize'); study.optimize(objective, n_trials=20, show_progress_bar=True)\n",
    "best_params_proto = study.best_params; print('Best params:', best_params_proto)\n",
    "\n",
    "params = {'objective':'lambdarank','metric':'ndcg','ndcg_eval_at':[10,50],\n",
    "          'learning_rate':float(best_params_proto.get('learning_rate',0.05)),\n",
    "          'num_leaves':int(best_params_proto.get('num_leaves',63)),\n",
    "          'min_data_in_leaf':int(best_params_proto.get('min_data_in_leaf',20)),\n",
    "          'feature_fraction':float(best_params_proto.get('feature_fraction',0.8)),'verbosity':-1,'seed':42,'feature_pre_filter':False}\n",
    "bst_proto = lgb.train(params, dtrain, num_boost_round=1000, valid_sets=[dval], callbacks=[lgb.early_stopping(stopping_rounds=50), lgb.log_evaluation(period=100)])\n",
    "joblib.dump(bst_proto, f\"{OUT_DIR}/lgbm_reranker_prototype.joblib\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46883ef5",
   "metadata": {
    "papermill": {
     "duration": 0.028202,
     "end_time": "2025-10-01T16:51:47.568772",
     "exception": false,
     "start_time": "2025-10-01T16:51:47.540570",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 5 — Scale-up Data Load (100k) & Model Initialization\n",
    "\n",
    "This cell builds a larger sample (100k rows) and computes final embeddings and factors. It prefers SBERT/implicit/FAISS when available but includes CPU-friendly fallbacks (TF-IDF + SVD and TruncatedSVD-based MF) so the notebook runs offline."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec333c6d",
   "metadata": {
    "papermill": {
     "duration": 0.027818,
     "end_time": "2025-10-01T16:51:47.624758",
     "exception": false,
     "start_time": "2025-10-01T16:51:47.596940",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 15\n",
    "\n",
    "**Purpose:** Imports libraries used later. Trains a model / fits parameters.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Scale-up data load (100k) with fallbacks` → Comment describing intent.\n",
    "- `SCALE_N = 10000` → Performs a step relevant to data processing or modelling.\n",
    "- `SBERT_MODEL_FINAL = 'all-mpnet-base-v2'` → Performs a step relevant to data processing or modelling.\n",
    "- `from datasets import load_dataset` → Imports module(s).\n",
    "- `ds_iter = load_dataset('McAuley-Lab/Amazon-Reviews-2023', 'raw_review_Electronics', split='full', streaming=True, trust_remote_code=True)` → Performs a step relevant to data processing or modelling.\n",
    "- `rows = []; cnt = 0` → Performs a step relevant to data processing or modelling.\n",
    "- `for rec in ds_iter:` → Performs a step relevant to data processing or modelling.\n",
    "- `try:` → Performs a step relevant to data processing or modelling.\n",
    "- `asin = rec.get('asin') or rec.get('parent_asin'); user = rec.get('user_id') or rec.get('reviewerID'); text = rec.get('text') or rec.get('reviewText') or ''` → Performs a step relevant to data processing or modelling.\n",
    "- `overall = rec.get('rating') or rec.get('overall'); ts = rec.get('timestamp') or rec.get('unixReviewTime') or 0` → Performs a step relevant to data processing or modelling.\n",
    "- `if asin is None or user is None: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `ts_i = int(ts); ts_i = ts_i*1000 if ts_i < 10**10 else ts_i` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3cdc9c97",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T16:51:47.682293Z",
     "iopub.status.busy": "2025-10-01T16:51:47.681760Z",
     "iopub.status.idle": "2025-10-01T17:14:21.762747Z",
     "shell.execute_reply": "2025-10-01T17:14:21.761982Z"
    },
    "papermill": {
     "duration": 1354.111156,
     "end_time": "2025-10-01T17:14:21.763967",
     "exception": false,
     "start_time": "2025-10-01T16:51:47.652811",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-10-01 16:51:58.805611: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1759337518.968685      20 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1759337519.018142      20 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1571438c57db4e599011225e021d97d5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "modules.json:   0%|          | 0.00/349 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "816ad26a67e44142a83a868e465c005c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config_sentence_transformers.json:   0%|          | 0.00/116 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "36821ce7b8d247e08ec9f7d16b275076",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "README.md: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1afff60725d8419f96dc683e4e07fdd2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "sentence_bert_config.json:   0%|          | 0.00/53.0 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "40a6f42891214f10b59258d94cc97fb0",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/571 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "dda7e0f688874c9db41f30e30cf141a5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/438M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9fe9dcb09d26485ab30977d8b8690534",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer_config.json:   0%|          | 0.00/363 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "beedeb0f4a4744829f0e6e04bdcad42a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "vocab.txt: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e07ecae9e81647ccbc2d4352765123e2",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer.json: 0.00B [00:00, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8e0479afffa84dba9791a8c1e806206c",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "special_tokens_map.json:   0%|          | 0.00/239 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "aa34e6328e4a4beb9ca77f4934f367af",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/190 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "333169ea93af4ad681779591212517f5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "SBERT encode:   0%|          | 0/35 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/implicit/cpu/als.py:95: RuntimeWarning: Intel MKL BLAS is configured to use 2 threads. It is highly recommended to disable its internal threadpool by setting the environment variable 'MKL_NUM_THREADS=1' or by callng 'threadpoolctl.threadpool_limits(1, \"blas\")'. Having MKL use a threadpool can lead to severe performance issues\n",
      "  check_blas_config()\n",
      "/usr/local/lib/python3.11/dist-packages/implicit/cpu/als.py:95: RuntimeWarning: OpenBLAS is configured to use 4 threads. It is highly recommended to disable its internal threadpool by setting the environment variable 'OPENBLAS_NUM_THREADS=1' or by calling 'threadpoolctl.threadpool_limits(1, \"blas\")'. Having OpenBLAS use a threadpool can lead to severe performance issues here.\n",
      "  check_blas_config()\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "196dce22d29d426a830680f39cc200f5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "  0%|          | 0/20 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final item_emb shape: (8907, 768)\n"
     ]
    }
   ],
   "source": [
    "# Scale-up data load (100k) with fallbacks\n",
    "SCALE_N = 10000\n",
    "SBERT_MODEL_FINAL = 'all-mpnet-base-v2'\n",
    "\n",
    "from datasets import load_dataset\n",
    "ds_iter = load_dataset('McAuley-Lab/Amazon-Reviews-2023', 'raw_review_Electronics', split='full', streaming=True, trust_remote_code=True)\n",
    "rows = []; cnt = 0\n",
    "for rec in ds_iter:\n",
    "    try:\n",
    "        asin = rec.get('asin') or rec.get('parent_asin'); user = rec.get('user_id') or rec.get('reviewerID'); text = rec.get('text') or rec.get('reviewText') or ''\n",
    "        overall = rec.get('rating') or rec.get('overall'); ts = rec.get('timestamp') or rec.get('unixReviewTime') or 0\n",
    "        if asin is None or user is None: continue\n",
    "        ts_i = int(ts); ts_i = ts_i*1000 if ts_i < 10**10 else ts_i\n",
    "        rows.append({'asin':str(asin),'reviewerID':str(user),'reviewText':str(text),'overall':float(overall) if overall is not None else float('nan'),'unixReviewTime':int(ts_i)})\n",
    "        cnt += 1\n",
    "        if cnt >= SCALE_N: break\n",
    "    except Exception:\n",
    "        continue\n",
    "df_scale = pd.DataFrame(rows)\n",
    "unique_asins_scale = sorted(df_scale['asin'].unique().tolist()); unique_users_scale = sorted(df_scale['reviewerID'].unique().tolist())\n",
    "item_map_scale = {a:i for i,a in enumerate(unique_asins_scale)}; inv_item_map_scale = {i:a for a,i in item_map_scale.items()}\n",
    "user_map_scale = {u:i for i,u in enumerate(unique_users_scale)}; inv_user_map_scale = {i:u for u,i in user_map_scale.items()}\n",
    "n_users_scale, n_items_scale = len(user_map_scale), len(item_map_scale)\n",
    "u_idx=[]; i_idx=[]; data=[]\n",
    "for _, r in df_scale.iterrows():\n",
    "    try:\n",
    "        u = user_map_scale[r['reviewerID']]; i = item_map_scale[r['asin']]\n",
    "        w = float(r['overall']) if not pd.isna(r['overall']) else 1.0; u_idx.append(u); i_idx.append(i); data.append(w)\n",
    "    except KeyError: continue\n",
    "interaction_scale = csr_matrix((data,(u_idx,i_idx)), shape=(n_users_scale,n_items_scale)).tocsr()\n",
    "item_user_matrix_scale = interaction_scale.T.tocsr()\n",
    "pop_counts_scale = Counter(df_scale['asin'])\n",
    "test_df_scale = df_scale.groupby('reviewerID').tail(1).reset_index(drop=True)\n",
    "\n",
    "# Build semantic embeddings: SBERT if available else TF-IDF+SVD fallback\n",
    "if HAS_SBERT:\n",
    "    from sentence_transformers import SentenceTransformer\n",
    "    sbert_final = SentenceTransformer(SBERT_MODEL_FINAL, device='cpu')\n",
    "    agg = defaultdict(list)\n",
    "    for _, r in df_scale[['asin','reviewText']].iterrows():\n",
    "        a = r['asin']\n",
    "        if len(agg[a]) < 5: agg[a].append(str(r['reviewText'])[:1200])\n",
    "    texts = [' . '.join(agg.get(a, [''])) for a in sorted(item_map_scale.keys(), key=lambda x: item_map_scale[x])]\n",
    "    emb_batches = []; batch_size = 256\n",
    "    for i in tqdm(range(0, len(texts), batch_size), desc='SBERT encode'):\n",
    "        emb = sbert_final.encode(texts[i:i+batch_size], convert_to_numpy=True, show_progress_bar=False)\n",
    "        emb_batches.append(emb)\n",
    "    item_emb_final = np.vstack(emb_batches).astype('float32')\n",
    "else:\n",
    "    from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "    from sklearn.decomposition import TruncatedSVD as _TSVD\n",
    "    agg = defaultdict(list)\n",
    "    for _, r in df_scale[['asin','reviewText']].iterrows():\n",
    "        a = r['asin']\n",
    "        if len(agg[a]) < 5: agg[a].append(str(r['reviewText'])[:1200])\n",
    "    texts = [' . '.join(agg.get(a, [''])) for a in sorted(item_map_scale.keys(), key=lambda x: item_map_scale[x])]\n",
    "    tf = TfidfVectorizer(max_features=65536, ngram_range=(1,2), min_df=2)\n",
    "    Xtf = tf.fit_transform(texts)\n",
    "    svd_text = _TSVD(n_components=384, random_state=42)\n",
    "    item_emb_final = svd_text.fit_transform(Xtf).astype('float32')\n",
    "\n",
    "# Build MF factors: implicit ALS if available else TruncatedSVD fallback\n",
    "if HAS_IMPLICIT:\n",
    "    try:\n",
    "        from implicit.als import AlternatingLeastSquares\n",
    "        als_model_final = AlternatingLeastSquares(factors=128, regularization=0.1, iterations=20, use_gpu=False)\n",
    "        als_model_final.fit(item_user_matrix_scale.astype('float32'))\n",
    "        als_item_factors_final = als_model_final.item_factors; als_user_factors_final = als_model_final.user_factors\n",
    "    except Exception:\n",
    "        # fallback to SVD factors below\n",
    "        HAS_IMPLICIT = False\n",
    "\n",
    "if not HAS_IMPLICIT:\n",
    "    from sklearn.decomposition import TruncatedSVD as _TSVD2\n",
    "    print('implicit not available or failed; using TruncatedSVD fallback for MF factors')\n",
    "    svd_mf = _TSVD2(n_components=128, random_state=42)\n",
    "    als_item_factors_final = svd_mf.fit_transform(item_user_matrix_scale)\n",
    "    # user factors: approximate by dividing R^T * F by counts\n",
    "    try:\n",
    "        R = item_user_matrix_scale\n",
    "        user_num = (R.T).dot(als_item_factors_final)\n",
    "        user_counts = np.array((R != 0).sum(axis=0)).reshape(-1)\n",
    "        user_counts = np.where(user_counts == 0, 1.0, user_counts)\n",
    "        als_user_factors_final = (user_num / user_counts[:, None]).astype('float32')\n",
    "    except Exception:\n",
    "        als_user_factors_final = np.random.normal(scale=0.01, size=(n_users_scale, als_item_factors_final.shape[1])).astype('float32')\n",
    "\n",
    "svd_item_factors_final = als_item_factors_final  # reuse\n",
    "item_emb_norm_final = item_emb_final / (np.linalg.norm(item_emb_final, axis=1, keepdims=True) + 1e-9)\n",
    "print('Final item_emb shape:', item_emb_final.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75595da8",
   "metadata": {
    "papermill": {
     "duration": 0.027709,
     "end_time": "2025-10-01T17:14:21.820812",
     "exception": false,
     "start_time": "2025-10-01T17:14:21.793103",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 6 — Scale Hard-negative Mining & Final LTR Training\n",
    "\n",
    "This cell mines hard negatives across many users and trains the final LightGBM reranker on the large meta dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "453ad888",
   "metadata": {
    "papermill": {
     "duration": 0.027417,
     "end_time": "2025-10-01T17:14:21.876285",
     "exception": false,
     "start_time": "2025-10-01T17:14:21.848868",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 17\n",
    "\n",
    "**Purpose:** Imports libraries used later. Trains a model / fits parameters.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Scale hard-neg mining + LTR training` → Comment describing intent.\n",
    "- `USERS_TO_USE_SCALE = 5000; HARD_NEG_PER_POS = 80; RANDOM_NEG_PER_POS = 5` → Performs a step relevant to data processing or modelling.\n",
    "- `meta_rows_scale = []` → Performs a step relevant to data processing or modelling.\n",
    "- `sample_users_scale = df_scale['reviewerID'].unique()[:min(USERS_TO_USE_SCALE, n_users_scale)]` → Performs a step relevant to data processing or modelling.\n",
    "- `for uid in tqdm(sample_users_scale, desc='Building Meta Scale'):` → Performs a step relevant to data processing or modelling.\n",
    "- `uidx = user_map_scale.get(uid);` → Performs a step relevant to data processing or modelling.\n",
    "- `if uidx is None: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `cands = build_candidates_union(uidx, item_emb_final, (als_model_final if 'als_model_final' in globals() else None), svd_item_factors_final, item_map_scale, pop_counts_scale, user_map_scale, df_scale, interaction_scale, top_sem=1000, top_als=500, top_svd=500, top_pop=500, top_mf=200, max_cands=3000)` → Performs a step relevant to data processing or modelling.\n",
    "- `if not cands: continue` → Performs a step relevant to data processing or modelling.\n",
    "- `mf = build_features_for_candidates(uidx, cands, item_emb_final, (als_item_factors_final if 'als_item_factors_final' in globals() else None), (als_user_factors_final if 'als_user_factors_final' in globals() else None), svd_item_factors_final, df_scale, item_map_scale, user_map_scale, pop_counts_scale, feature_names, now_ts)` → Performs a step relevant to data processing or modelling.\n",
    "- `Xc = mf['X']; cidx = mf['cands']; fns = mf['feature_names']` → Performs a step relevant to data processing or modelling.\n",
    "- `true_asins = test_df_scale[test_df_scale['reviewerID']==uid]['asin'].tolist()` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1e2e5542",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T17:14:21.934353Z",
     "iopub.status.busy": "2025-10-01T17:14:21.933074Z",
     "iopub.status.idle": "2025-10-01T18:08:43.479265Z",
     "shell.execute_reply": "2025-10-01T18:08:43.478593Z"
    },
    "papermill": {
     "duration": 3261.576139,
     "end_time": "2025-10-01T18:08:43.480552",
     "exception": false,
     "start_time": "2025-10-01T17:14:21.904413",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "76b5b99363c74e588471fd7cb199a653",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Building Meta Scale:   0%|          | 0/1561 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "meta_df_scale shape: (129516, 16)\n",
      "Training until validation scores don't improve for 50 rounds\n",
      "[100]\tvalid_0's ndcg@10: 0.901465\tvalid_0's ndcg@50: 0.909855\n",
      "Early stopping, best iteration is:\n",
      "[66]\tvalid_0's ndcg@10: 0.905284\tvalid_0's ndcg@50: 0.913835\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['/kaggle/working/lgbm_reranker_final.joblib']"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Scale hard-neg mining + LTR training\n",
    "USERS_TO_USE_SCALE = 5000; HARD_NEG_PER_POS = 80; RANDOM_NEG_PER_POS = 5\n",
    "meta_rows_scale = []\n",
    "sample_users_scale = df_scale['reviewerID'].unique()[:min(USERS_TO_USE_SCALE, n_users_scale)]\n",
    "for uid in tqdm(sample_users_scale, desc='Building Meta Scale'):\n",
    "    uidx = user_map_scale.get(uid); \n",
    "    if uidx is None: continue\n",
    "    cands = build_candidates_union(uidx, item_emb_final, (als_model_final if 'als_model_final' in globals() else None), svd_item_factors_final, item_map_scale, pop_counts_scale, user_map_scale, df_scale, interaction_scale, top_sem=1000, top_als=500, top_svd=500, top_pop=500, top_mf=200, max_cands=3000)\n",
    "    if not cands: continue\n",
    "    mf = build_features_for_candidates(uidx, cands, item_emb_final, (als_item_factors_final if 'als_item_factors_final' in globals() else None), (als_user_factors_final if 'als_user_factors_final' in globals() else None), svd_item_factors_final, df_scale, item_map_scale, user_map_scale, pop_counts_scale, feature_names, now_ts)\n",
    "    Xc = mf['X']; cidx = mf['cands']; fns = mf['feature_names']\n",
    "    true_asins = test_df_scale[test_df_scale['reviewerID']==uid]['asin'].tolist()\n",
    "    true_idxs = [item_map_scale[a] for a in true_asins if a in item_map_scale]\n",
    "    if not true_idxs: continue\n",
    "    als_col = Xc[:, fns.index('als_score')] if 'als_score' in fns else np.zeros(Xc.shape[0])\n",
    "    svd_col = Xc[:, fns.index('svd_score')] if 'svd_score' in fns else np.zeros(Xc.shape[0])\n",
    "    hard_score = 0.5 * als_col + 0.5 * svd_col\n",
    "    cand_arr = np.array(cidx); pos_mask = np.isin(cand_arr, true_idxs); non_pos_idx = np.where(~pos_mask)[0]\n",
    "    if len(non_pos_idx)==0: continue\n",
    "    ordering = non_pos_idx[np.argsort(-hard_score[non_pos_idx])]; hard_negs_idx = ordering[:HARD_NEG_PER_POS].tolist()\n",
    "    remaining = list(set(non_pos_idx.tolist()) - set(hard_negs_idx)); random_negs_idx = random.sample(remaining, min(RANDOM_NEG_PER_POS, len(remaining))) if remaining else []\n",
    "    for t in true_idxs:\n",
    "        pos_loc = np.where(cand_arr==t)[0]; \n",
    "        if len(pos_loc)==0: continue\n",
    "        for p in pos_loc:\n",
    "            row = {'user_idx': uidx, 'item_idx': int(cidx[p]), 'label': 1}\n",
    "            for j,fn in enumerate(fns):\n",
    "                try: row[fn] = float(Xc[p,j])\n",
    "                except: row[fn] = 0.0\n",
    "            meta_rows_scale.append(row)\n",
    "            for idx in hard_negs_idx:\n",
    "                rn = {'user_idx': uidx, 'item_idx': int(cidx[idx]), 'label': 0}\n",
    "                for j,fn in enumerate(fns):\n",
    "                    try: rn[fn] = float(Xc[idx,j])\n",
    "                    except: rn[fn] = 0.0\n",
    "                meta_rows_scale.append(rn)\n",
    "            for idx in random_negs_idx:\n",
    "                rr = {'user_idx': uidx, 'item_idx': int(cidx[idx]), 'label': 0}\n",
    "                for j,fn in enumerate(fns):\n",
    "                    try: rr[fn] = float(Xc[idx,j])\n",
    "                    except: rr[fn] = 0.0\n",
    "                meta_rows_scale.append(rr)\n",
    "meta_df_scale = pd.DataFrame(meta_rows_scale).sample(frac=1.0, random_state=42).reset_index(drop=True)\n",
    "print('meta_df_scale shape:', meta_df_scale.shape)\n",
    "\n",
    "# Train final LTR\n",
    "from sklearn.model_selection import train_test_split\n",
    "feat_cols = [c for c in meta_df_scale.columns if c not in ('user_idx','item_idx','label')]\n",
    "X = meta_df_scale[feat_cols].values; y = meta_df_scale['label'].values\n",
    "users_all = meta_df_scale['user_idx'].unique(); train_u, valid_u = train_test_split(list(users_all), test_size=0.10, random_state=42)\n",
    "tr_mask = meta_df_scale['user_idx'].isin(train_u); val_mask = meta_df_scale['user_idx'].isin(valid_u)\n",
    "X_tr = meta_df_scale[tr_mask][feat_cols].values; y_tr = meta_df_scale[tr_mask]['label'].values; gr_tr = meta_df_scale[tr_mask].groupby('user_idx', sort=False).size().astype(int).values\n",
    "X_val = meta_df_scale[val_mask][feat_cols].values; y_val = meta_df_scale[val_mask]['label'].values; gr_val = meta_df_scale[val_mask].groupby('user_idx', sort=False).size().astype(int).values\n",
    "\n",
    "dtrain = lgb.Dataset(X_tr, label=y_tr, group=gr_tr); dval = lgb.Dataset(X_val, label=y_val, group=gr_val, reference=dtrain)\n",
    "params_scale = {'objective':'lambdarank','metric':'ndcg','ndcg_eval_at':[10,50],'learning_rate':float(best_params_proto.get('learning_rate',0.05)),'num_leaves':int(best_params_proto.get('num_leaves',63)),'min_data_in_leaf':int(best_params_proto.get('min_data_in_leaf',20)),'feature_fraction':float(best_params_proto.get('feature_fraction',0.8)),'verbosity':-1,'seed':42,'feature_pre_filter':False}\n",
    "bst_final_scale = lgb.train(params_scale, dtrain, num_boost_round=1000, valid_sets=[dval], callbacks=[lgb.early_stopping(stopping_rounds=50), lgb.log_evaluation(period=100)])\n",
    "joblib.dump(bst_final_scale, f\"{OUT_DIR}/lgbm_reranker_final.joblib\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e8f4c85",
   "metadata": {
    "papermill": {
     "duration": 0.028688,
     "end_time": "2025-10-01T18:08:43.539179",
     "exception": false,
     "start_time": "2025-10-01T18:08:43.510491",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 7 — Final Evaluation & Metrics\n",
    "\n",
    "Compute P@K, R@K, NDCG@K, MAP, and MPR for the LGBM hybrid reranker and a semantic baseline. Results are saved to `OUT_DIR/final_scale_summary_metrics.csv`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9beb0d6",
   "metadata": {
    "papermill": {
     "duration": 0.027949,
     "end_time": "2025-10-01T18:08:43.595925",
     "exception": false,
     "start_time": "2025-10-01T18:08:43.567976",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 19\n",
    "\n",
    "**Purpose:** Imports libraries used later. Defines function(s) used downstream. Produces predictions on data. Saves results or models to disk.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Final evaluation utilities and run` → Comment describing intent.\n",
    "- `from math import log2` → Imports module(s).\n",
    "- `def ndcg_at_k(pred_list, true_list, k=10):` → Performs a step relevant to data processing or modelling.\n",
    "- `if not true_list: return 0.0` → Performs a step relevant to data processing or modelling.\n",
    "- `pred_k = pred_list[:k]; gains = [1.0 if p in true_list else 0.0 for p in pred_k]` → Performs a step relevant to data processing or modelling.\n",
    "- `dcg = sum(g / log2(i+2) for i,g in enumerate(gains)); idcg = sum(1.0 / log2(i+2) for i in range(min(len(true_list), k)))` → Performs a step relevant to data processing or modelling.\n",
    "- `return dcg/idcg if idcg>0 else 0.0` → Performs a step relevant to data processing or modelling.\n",
    "- `def apk(actual, predicted, k=10):` → Performs a step relevant to data processing or modelling.\n",
    "- `if not actual: return 0.0` → Performs a step relevant to data processing or modelling.\n",
    "- `score = 0.0; num_hits = 0.0` → Performs a step relevant to data processing or modelling.\n",
    "- `for i,p in enumerate(predicted[:k]):` → Performs a step relevant to data processing or modelling.\n",
    "- `if p in actual and p not in predicted[:i]:` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "51457ce3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T18:08:43.654526Z",
     "iopub.status.busy": "2025-10-01T18:08:43.654223Z",
     "iopub.status.idle": "2025-10-01T18:41:14.789163Z",
     "shell.execute_reply": "2025-10-01T18:41:14.788276Z"
    },
    "papermill": {
     "duration": 1951.165491,
     "end_time": "2025-10-01T18:41:14.790304",
     "exception": false,
     "start_time": "2025-10-01T18:08:43.624813",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1204941b2fea482c9f101a0691686590",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating lgbm_final_topk:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "fc2f87ac80bd438bab25f864273144c4",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Evaluating semantic_final_topk:   0%|          | 0/1000 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final evaluation complete — metrics saved to /kaggle/working/final_scale_summary_metrics.csv\n"
     ]
    }
   ],
   "source": [
    "# Final evaluation utilities and run\n",
    "from math import log2\n",
    "def ndcg_at_k(pred_list, true_list, k=10):\n",
    "    if not true_list: return 0.0\n",
    "    pred_k = pred_list[:k]; gains = [1.0 if p in true_list else 0.0 for p in pred_k]\n",
    "    dcg = sum(g / log2(i+2) for i,g in enumerate(gains)); idcg = sum(1.0 / log2(i+2) for i in range(min(len(true_list), k)))\n",
    "    return dcg/idcg if idcg>0 else 0.0\n",
    "\n",
    "def apk(actual, predicted, k=10):\n",
    "    if not actual: return 0.0\n",
    "    score = 0.0; num_hits = 0.0\n",
    "    for i,p in enumerate(predicted[:k]):\n",
    "        if p in actual and p not in predicted[:i]:\n",
    "            num_hits += 1.0; score += num_hits/(i+1.0)\n",
    "    return score/min(len(actual), k)\n",
    "\n",
    "def lgbm_final_topk(uidx, k=10):\n",
    "    cands = build_candidates_union(uidx, item_emb_final, (als_model_final if 'als_model_final' in globals() else None), svd_item_factors_final, item_map_scale, pop_counts_scale, user_map_scale, df_scale, interaction_scale, top_sem=1000, top_als=500, top_svd=500, top_pop=500, top_mf=200, max_cands=3000)\n",
    "    if not cands: return []\n",
    "    mf = build_features_for_candidates(uidx, cands, item_emb_final, (als_item_factors_final if 'als_item_factors_final' in globals() else None), (als_user_factors_final if 'als_user_factors_final' in globals() else None), svd_item_factors_final, df_scale, item_map_scale, user_map_scale, pop_counts_scale, feature_names, now_ts)\n",
    "    preds = bst_final_scale.predict(mf['X']); order = np.argsort(-preds)[:k]; return [cands[i] for i in order]\n",
    "\n",
    "def semantic_final_topk(uidx, k=10):\n",
    "    uvec = user_profile_emb(uidx, item_emb_final, df_scale, item_map_scale, user_map_scale); uvec = uvec/(np.linalg.norm(uvec)+1e-9)\n",
    "    scores = item_emb_final.dot(uvec); return list(np.argsort(-scores)[:k])\n",
    "\n",
    "def evaluate_final(scorer_fn, K=10, max_users=1000):\n",
    "    actuals=[]; preds=[]; cnt=0\n",
    "    for uid in tqdm(test_df_scale['reviewerID'].unique()[:max_users], desc=f\"Evaluating {scorer_fn.__name__}\"):\n",
    "        if uid not in user_map_scale: continue\n",
    "        uidx = user_map_scale[uid]\n",
    "        true_asins = test_df_scale[test_df_scale['reviewerID']==uid]['asin'].tolist()\n",
    "        if not true_asins: continue\n",
    "        rec_idxs = scorer_fn(uidx, k=K)\n",
    "        rec_asins = [inv_item_map_scale[i] for i in rec_idxs if i in inv_item_map_scale]\n",
    "        preds.append(rec_asins); actuals.append(true_asins); cnt += 1\n",
    "    if cnt==0: return {'P@10':0.0,'R@10':0.0,'NDCG@10':0.0,'MAP@10':0.0,'MPR@10':0.0,'EvalUsers':0}\n",
    "    P = np.mean([len(set(p[:K]) & set(a))/float(K) for p,a in zip(preds,actuals)])\n",
    "    R = np.mean([len(set(p[:K]) & set(a))/max(1,len(a)) for p,a in zip(preds,actuals)])\n",
    "    N = np.mean([ndcg_at_k(p,a,K) for p,a in zip(preds,actuals)])\n",
    "    MAP = np.mean([apk(a,p,K) for a,p in zip(actuals,preds)])\n",
    "    MPR = np.mean([np.mean([1.0 - (p.index(t)+1)/K if (t in p[:K]) else 0.0 for t in a]) for a,p in zip(actuals,preds)])\n",
    "    return {'P@10':P,'R@10':R,'NDCG@10':N,'MAP@10':MAP,'MPR@10':MPR,'EvalUsers':len(actuals)}\n",
    "\n",
    "final_results = {}\n",
    "final_results['LGBM_Hybrid_Rerank'] = evaluate_final(lgbm_final_topk, K=10)\n",
    "final_results['Semantic_Baseline'] = evaluate_final(semantic_final_topk, K=10)\n",
    "final_df = pd.DataFrame(final_results).T\n",
    "final_df = final_df[['P@10','R@10','NDCG@10','MAP@10','MPR@10','EvalUsers']]\n",
    "final_df.to_csv(f\"{OUT_DIR}/final_scale_summary_metrics.csv\", index=False)\n",
    "print('Final evaluation complete — metrics saved to', f\"{OUT_DIR}/final_scale_summary_metrics.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d572eb20",
   "metadata": {
    "papermill": {
     "duration": 0.02785,
     "end_time": "2025-10-01T18:41:14.846933",
     "exception": false,
     "start_time": "2025-10-01T18:41:14.819083",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Feature importance\n",
    "\n",
    "Export and inspect feature importances from the final LightGBM model."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d40cb132",
   "metadata": {
    "papermill": {
     "duration": 0.027281,
     "end_time": "2025-10-01T18:41:14.901687",
     "exception": false,
     "start_time": "2025-10-01T18:41:14.874406",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 21\n",
    "\n",
    "**Purpose:** Saves results or models to disk.\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Feature importances` → Comment describing intent.\n",
    "- `fi_df = pd.DataFrame({'feature': feat_cols, 'importance': bst_final_scale.feature_importance()}).sort_values('importance', ascending=False)` → Performs a step relevant to data processing or modelling.\n",
    "- `fi_df.to_csv(f\"{OUT_DIR}/feature_importances_final.csv\", index=False)` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "41fbd38a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T18:41:14.957548Z",
     "iopub.status.busy": "2025-10-01T18:41:14.957295Z",
     "iopub.status.idle": "2025-10-01T18:41:14.964359Z",
     "shell.execute_reply": "2025-10-01T18:41:14.963580Z"
    },
    "papermill": {
     "duration": 0.036339,
     "end_time": "2025-10-01T18:41:14.965550",
     "exception": false,
     "start_time": "2025-10-01T18:41:14.929211",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Feature importances\n",
    "fi_df = pd.DataFrame({'feature': feat_cols, 'importance': bst_final_scale.feature_importance()}).sort_values('importance', ascending=False)\n",
    "fi_df.to_csv(f\"{OUT_DIR}/feature_importances_final.csv\", index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "808232a7",
   "metadata": {
    "papermill": {
     "duration": 0.029021,
     "end_time": "2025-10-01T18:41:15.022296",
     "exception": false,
     "start_time": "2025-10-01T18:41:14.993275",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Explanation for Cell 22\n",
    "\n",
    "**Purpose:** Performs an operation relevant to the pipeline (see code).\n",
    "\n",
    "**Line-by-line (short):**\n",
    "- `# Fixed sample recommendation printing (maps indices -> ASIN strings, computes true HITs)` → Comment describing intent.\n",
    "- `SAMPLE_USERS_TO_DISPLAY = 5` → Performs a step relevant to data processing or modelling.\n",
    "- `test_users = test_df_scale['reviewerID'].unique()` → Performs a step relevant to data processing or modelling.\n",
    "- `if len(test_users) == 0:` → Performs a step relevant to data processing or modelling.\n",
    "- `print(\"\\nNo unique test users found to display sample recommendations.\")` → Displays a quick diagnostic for the user.\n",
    "- `else:` → Performs a step relevant to data processing or modelling.\n",
    "- `num_samples = min(SAMPLE_USERS_TO_DISPLAY, len(test_users))` → Performs a step relevant to data processing or modelling.\n",
    "- `sample_uids = random.sample(list(test_users), num_samples)` → Samples rows from a DataFrame.\n",
    "- `print(f\"\\n--- Sample User Recommendation Output (LGBM Hybrid) for {num_samples} Users ---\")` → Displays a quick diagnostic for the user.\n",
    "- `for sample_uid in sample_uids:` → Performs a step relevant to data processing or modelling.\n",
    "- `sample_uidx = user_map_scale.get(sample_uid)` → Performs a step relevant to data processing or modelling.\n",
    "- `if sample_uidx is None:` → Performs a step relevant to data processing or modelling.\n",
    "\n",
    "...remaining lines omitted for brevity. See code cell for full content.\n",
    "\n",
    "**Inputs:** likely dataframes, parameters, and previously defined variables.\n",
    "**Outputs:** new variables in memory (dataframes, models, figures), possibly files on disk.\n",
    "\n",
    "**Notes:** Verify paths, column names, and variable names. Consider adding assertions to safeguard assumptions.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c08a4df0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T18:41:15.078510Z",
     "iopub.status.busy": "2025-10-01T18:41:15.078282Z",
     "iopub.status.idle": "2025-10-01T18:41:25.051295Z",
     "shell.execute_reply": "2025-10-01T18:41:25.050338Z"
    },
    "papermill": {
     "duration": 10.002664,
     "end_time": "2025-10-01T18:41:25.052533",
     "exception": false,
     "start_time": "2025-10-01T18:41:15.049869",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Sample User Recommendation Output (LGBM Hybrid) for 5 Users ---\n",
      "\n",
      "User ID: AEEJBFZKUBEEMBZUZJV4UHFVEEBQ\n",
      "True Last Item (to predict): B01LXL7BUI\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B01LXL7BUI (✅ HIT)\n",
      "  2. B081948XYF (❌ MISS)\n",
      "  3. B071NS7NXW (❌ MISS)\n",
      "  4. B06XFVP9X7 (❌ MISS)\n",
      "  5. B00BGIQRDE (❌ MISS)\n",
      "  6. B08148XDKN (❌ MISS)\n",
      "  7. B083GJVM8M (❌ MISS)\n",
      "  8. B07PZ75YCR (❌ MISS)\n",
      "  9. B0765VCQF1 (❌ MISS)\n",
      "  10. B071YC3HZ7 (❌ MISS)\n",
      "True ASIN in candidate pool? YES\n",
      "\n",
      "User ID: AG7BFTMHHMKL2KZORZCHKPMZPO5Q\n",
      "True Last Item (to predict): B07KD8R6HD\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B07KD8R6HD (✅ HIT)\n",
      "  2. B07PGRR6QN (❌ MISS)\n",
      "  3. B07TSH7ZN5 (❌ MISS)\n",
      "  4. B00L2LGMO4 (❌ MISS)\n",
      "  5. B01D0PVYH4 (❌ MISS)\n",
      "  6. B01M3PZ2JQ (❌ MISS)\n",
      "  7. B00ST1Y2QU (❌ MISS)\n",
      "  8. B00V49LNCU (❌ MISS)\n",
      "  9. B07FD3YXKR (❌ MISS)\n",
      "  10. B00WSW1YXA (❌ MISS)\n",
      "True ASIN in candidate pool? YES\n",
      "\n",
      "User ID: AGGMDRXIZJHBVVQFKU2LJ3LGICTA\n",
      "True Last Item (to predict): B077CYZ34R\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B077CYZ34R (✅ HIT)\n",
      "  2. B00O9RRPXA (❌ MISS)\n",
      "  3. B01HYT9MNU (❌ MISS)\n",
      "  4. B0BF8KX9RJ (❌ MISS)\n",
      "  5. B079K963KG (❌ MISS)\n",
      "  6. B06XW5LZRS (❌ MISS)\n",
      "  7. B00MNWJQS0 (❌ MISS)\n",
      "  8. B09NR95LFW (❌ MISS)\n",
      "  9. B09CTXCL6D (❌ MISS)\n",
      "  10. B0863MN3T3 (❌ MISS)\n",
      "True ASIN in candidate pool? YES\n",
      "\n",
      "User ID: AFJC4MCHM32ALDX3FPAY5PQXITGA\n",
      "True Last Item (to predict): B0002F67N2\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B0002F67N2 (✅ HIT)\n",
      "  2. B00FHBH5SC (❌ MISS)\n",
      "  3. B00IGXE7EI (❌ MISS)\n",
      "  4. B00FGPM1SS (❌ MISS)\n",
      "  5. B00SGBJOWA (❌ MISS)\n",
      "  6. B01FC3SPPG (❌ MISS)\n",
      "  7. B07SMVHYHJ (❌ MISS)\n",
      "  8. B00JM6EP1I (❌ MISS)\n",
      "  9. B00KH3SZTS (❌ MISS)\n",
      "  10. B072YVPJC6 (❌ MISS)\n",
      "True ASIN in candidate pool? YES\n",
      "\n",
      "User ID: AGKFRCDY4WBW4RH6GFYFJ3T3XBSA\n",
      "True Last Item (to predict): B0051VVOB2\n",
      "Top 10 Recommended ASINs:\n",
      "  1. B00D3F9H62 (❌ MISS)\n",
      "  2. B07FZ8S74R (❌ MISS)\n",
      "  3. B081N87HH9 (❌ MISS)\n",
      "  4. B0791TX5P5 (❌ MISS)\n",
      "  5. B00OJEM84Y (❌ MISS)\n",
      "  6. B07HZRGVX5 (❌ MISS)\n",
      "  7. B08PG1BT8V (❌ MISS)\n",
      "  8. B00ZV9RDKK (❌ MISS)\n",
      "  9. B07T5GGR8L (❌ MISS)\n",
      "  10. B002MMY4WY (❌ MISS)\n",
      "True ASIN in candidate pool? YES\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Fixed sample recommendation printing (maps indices -> ASIN strings, computes true HITs)\n",
    "SAMPLE_USERS_TO_DISPLAY = 5\n",
    "\n",
    "test_users = test_df_scale['reviewerID'].unique()\n",
    "if len(test_users) == 0:\n",
    "    print(\"\\nNo unique test users found to display sample recommendations.\")\n",
    "else:\n",
    "    num_samples = min(SAMPLE_USERS_TO_DISPLAY, len(test_users))\n",
    "    sample_uids = random.sample(list(test_users), num_samples)\n",
    "\n",
    "    print(f\"\\n--- Sample User Recommendation Output (LGBM Hybrid) for {num_samples} Users ---\")\n",
    "\n",
    "    for sample_uid in sample_uids:\n",
    "        sample_uidx = user_map_scale.get(sample_uid)\n",
    "\n",
    "        if sample_uidx is None:\n",
    "            print(f\"\\n[SKIP] User {sample_uid} not in user_map_scale.\")\n",
    "            continue\n",
    "\n",
    "        if 'bst_final_scale' not in globals() or bst_final_scale is None:\n",
    "            print(\"\\n[SKIP] bst_final_scale not available — model wasn't trained or loaded.\")\n",
    "            break\n",
    "\n",
    "        # true ASIN string\n",
    "        actual_asin = test_df_scale[test_df_scale['reviewerID'] == sample_uid]['asin'].iloc[0]\n",
    "\n",
    "        # get recommended item indices (ints)\n",
    "        rec_idxs = lgbm_final_topk(sample_uidx, k=10)\n",
    "\n",
    "        # convert indices -> ASINs (use appropriate inv map)\n",
    "        inv_map = inv_item_map_scale if 'inv_item_map_scale' in globals() else inv_item_map\n",
    "        rec_asins = [inv_map[i] if (i in inv_map) else f\"IDX_{i}\" for i in rec_idxs]\n",
    "\n",
    "        print(f\"\\nUser ID: {sample_uid}\")\n",
    "        print(f\"True Last Item (to predict): {actual_asin}\")\n",
    "        print(\"Top 10 Recommended ASINs:\")\n",
    "        for i, asin in enumerate(rec_asins):\n",
    "            hit_status = \"✅ HIT\" if asin == actual_asin else \"❌ MISS\"\n",
    "            print(f\"  {i+1}. {asin} ({hit_status})\")\n",
    "\n",
    "        # helpful additional info: was the true item present in the candidate set at all?\n",
    "        # Build candidate set with the same function used by the scorer (using larger pool for clarity)\n",
    "        cands = build_candidates_union(sample_uidx,\n",
    "                                       item_emb_final if 'item_emb_final' in globals() else None,\n",
    "                                       als_model_final if 'als_model_final' in globals() else None,\n",
    "                                       svd_item_factors_final if 'svd_item_factors_final' in globals() else None,\n",
    "                                       item_map_scale if 'item_map_scale' in globals() else item_map,\n",
    "                                       pop_counts_scale if 'pop_counts_scale' in globals() else pop_counts,\n",
    "                                       user_map_scale if 'user_map_scale' in globals() else user_map,\n",
    "                                       df_scale if 'df_scale' in globals() else df,\n",
    "                                       interaction_scale if 'interaction_scale' in globals() else interaction,\n",
    "                                       top_sem=1000, top_als=500, top_svd=500, top_pop=500, top_mf=200, max_cands=3000)\n",
    "        cand_asins = {inv_map[i] for i in cands if i in inv_map}\n",
    "        in_candidates = actual_asin in cand_asins\n",
    "        print(f\"True ASIN in candidate pool? {'YES' if in_candidates else 'NO'}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99d46c3a",
   "metadata": {
    "papermill": {
     "duration": 0.028734,
     "end_time": "2025-10-01T18:41:25.111155",
     "exception": false,
     "start_time": "2025-10-01T18:41:25.082421",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 8 — Diagnostics, Ablations & Next Steps\n",
    "\n",
    "**Diagnostics included in this notebook:**\n",
    "\n",
    "- Candidate recall checks (small and large pools)\n",
    "- Feature distributions for positives vs negatives\n",
    "- Per-user inspection utilities (`inspect_user_rerank`, `compare_top_bottom`)\n",
    "\n",
    "**Suggested next steps:**\n",
    "\n",
    "1. If reranker underperforms but recall is high: increase meta training size, upsample positives, and tune hard-negative ratios.\n",
    "2. If ALS/SVD features are weak, consider training implicit ALS on denser data or using matrix factorization with alternating optimization.\n",
    "3. Add more content features (title tokens, brand, category) and context signals (time of day, device) if available.\n",
    "4. For production: build offline candidate pipeline (FAISS HNSW) and a lightweight online reranker (optimized model export).\n",
    "\n",
    "---\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f86fe2b9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-01T18:41:25.170913Z",
     "iopub.status.busy": "2025-10-01T18:41:25.170662Z",
     "iopub.status.idle": "2025-10-01T18:41:25.255125Z",
     "shell.execute_reply": "2025-10-01T18:41:25.254475Z"
    },
    "papermill": {
     "duration": 0.116036,
     "end_time": "2025-10-01T18:41:25.256269",
     "exception": false,
     "start_time": "2025-10-01T18:41:25.140233",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_20/2234177804.py:59: FutureWarning: errors='ignore' is deprecated and will raise in a future version. Use to_numeric without passing `errors` and catch exceptions explicitly instead\n",
      "  df[c] = pd.to_numeric(df[c], errors='ignore')\n"
     ]
    },
    {
     "data": {
      "text/markdown": [
       "## 📊 Final evaluation metrics (loaded from `/kaggle/working/final_scale_summary_metrics.csv`)"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<style type=\"text/css\">\n",
       "</style>\n",
       "<table id=\"T_cd7d8\">\n",
       "  <caption>Cleaned final scale summary metrics</caption>\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th class=\"blank level0\" >&nbsp;</th>\n",
       "      <th id=\"T_cd7d8_level0_col0\" class=\"col_heading level0 col0\" >P@10</th>\n",
       "      <th id=\"T_cd7d8_level0_col1\" class=\"col_heading level0 col1\" >R@10</th>\n",
       "      <th id=\"T_cd7d8_level0_col2\" class=\"col_heading level0 col2\" >NDCG@10</th>\n",
       "      <th id=\"T_cd7d8_level0_col3\" class=\"col_heading level0 col3\" >MAP@10</th>\n",
       "      <th id=\"T_cd7d8_level0_col4\" class=\"col_heading level0 col4\" >MPR@10</th>\n",
       "      <th id=\"T_cd7d8_level0_col5\" class=\"col_heading level0 col5\" >EvalUsers</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th id=\"T_cd7d8_level0_row0\" class=\"row_heading level0 row0\" >Model_1</th>\n",
       "      <td id=\"T_cd7d8_row0_col0\" class=\"data row0 col0\" >0.071300</td>\n",
       "      <td id=\"T_cd7d8_row0_col1\" class=\"data row0 col1\" >0.713000</td>\n",
       "      <td id=\"T_cd7d8_row0_col2\" class=\"data row0 col2\" >0.626859</td>\n",
       "      <td id=\"T_cd7d8_row0_col3\" class=\"data row0 col3\" >0.598088</td>\n",
       "      <td id=\"T_cd7d8_row0_col4\" class=\"data row0 col4\" >0.603500</td>\n",
       "      <td id=\"T_cd7d8_row0_col5\" class=\"data row0 col5\" >1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th id=\"T_cd7d8_level0_row1\" class=\"row_heading level0 row1\" >Model_2</th>\n",
       "      <td id=\"T_cd7d8_row1_col0\" class=\"data row1 col0\" >0.072900</td>\n",
       "      <td id=\"T_cd7d8_row1_col1\" class=\"data row1 col1\" >0.729000</td>\n",
       "      <td id=\"T_cd7d8_row1_col2\" class=\"data row1 col2\" >0.626776</td>\n",
       "      <td id=\"T_cd7d8_row1_col3\" class=\"data row1 col3\" >0.592998</td>\n",
       "      <td id=\"T_cd7d8_row1_col4\" class=\"data row1 col4\" >0.607000</td>\n",
       "      <td id=\"T_cd7d8_row1_col5\" class=\"data row1 col5\" >1000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n"
      ],
      "text/plain": [
       "<pandas.io.formats.style.Styler at 0x7b384f6ce290>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "### 🔍 Qualitative model winners (per metric)"
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "- **P@10**: top performer — **Model_2**.\n",
       "- **R@10**: top performer — **Model_2**.\n",
       "- **NDCG@10**: top performer — **Model_1**.\n",
       "- **MAP@10**: top performer — **Model_1**.\n",
       "- **MPR@10**: top performer — **Model_2**."
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/markdown": [
       "### 📘 Metric meanings (guidance — no numeric thresholds)\n",
       "\n",
       "- **Precision@10 (P@10)** — Of the top-10 items returned, the fraction that are relevant. In very large catalogs, absolute Precision values can be low while still being useful.\n",
       "\n",
       "- **Recall@10 (R@10)** — Fraction of the user's relevant items that appear in the top-10. High Recall means good coverage of what the user is likely to want.\n",
       "\n",
       "- **NDCG@10** — Rewards placing the most relevant items near the top. This is often the primary ranking metric to optimize when user satisfaction depends on top-list order.\n",
       "\n",
       "- **MAP@10** — Mean Average Precision across users; emphasizes consistent early correct placements.\n",
       "\n",
       "- **MPR@10** — A rank-based measure capturing how near the top relevant items are on average; complements NDCG/MAP.\n",
       "\n",
       "- **EvalUsers** — The number of users used for evaluation; larger is more reliable.\n",
       "\n",
       "### 🔎 How to interpret combinations (qualitative)\n",
       "\n",
       "- If **NDCG** and **MAP** improve together, the model provides reliably better top-ranked results across users.\n",
       "- If a model shows higher **Recall** but lower **Precision**, it finds many relevant items but the top list may include more noise — consider stronger reranking or feature signals.\n",
       "- A modest Precision in a huge catalog can still be valuable if **Recall** and **NDCG** are strong — the system surfaces relevant items and ranks them well even if many slots remain non-relevant.\n",
       "\n",
       "### ✅ Practical next steps (if you want to improve results)\n",
       "\n",
       "- Verify candidate recall (if many true items never enter the candidate pool, increase pool size or add ANN).\n",
       "- Improve hard-negative mining diversity to teach the reranker harder distinctions.\n",
       "- Add more features (metadata, temporal signals) to the LTR training data.\n",
       "- Consider using stronger encoders (on GPU) or FAISS for ANN retrieval if compute allows."
      ],
      "text/plain": [
       "<IPython.core.display.Markdown object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Cleanly load & display the saved final metrics table, then give number-free explanations\n",
    "import os\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from IPython.display import display, Markdown\n",
    "\n",
    "# Candidate CSV paths to try (prefer OUT_DIR if available)\n",
    "csv_candidates = []\n",
    "if 'OUT_DIR' in globals() and OUT_DIR:\n",
    "    csv_candidates.append(os.path.join(OUT_DIR, \"final_scale_summary_metrics.csv\"))\n",
    "csv_candidates.extend([\n",
    "    \"final_scale_summary_metrics.csv\",\n",
    "    os.path.join(os.getcwd(), \"final_scale_summary_metrics.csv\"),\n",
    "])\n",
    "\n",
    "# Find a readable CSV\n",
    "metrics_df = None\n",
    "csv_used = None\n",
    "for p in csv_candidates:\n",
    "    if p and os.path.exists(p):\n",
    "        try:\n",
    "            df_try = pd.read_csv(p)\n",
    "            # Basic heuristics for readability: prefer files with expected metric columns\n",
    "            metrics_df = df_try.copy()\n",
    "            csv_used = p\n",
    "            break\n",
    "        except Exception as e:\n",
    "            display(Markdown(f\"**Found file but failed to read** `{p}` — error: `{e}`\"))\n",
    "\n",
    "# If not found, show friendly error\n",
    "if metrics_df is None:\n",
    "    display(Markdown(\"❌ **Could not find or read** `final_scale_summary_metrics.csv` in OUT_DIR or current directory. \"\n",
    "                     \"Make sure the notebook saved it earlier.\"))\n",
    "else:\n",
    "    # ---- CLEANUP ----\n",
    "    df = metrics_df.copy()\n",
    "\n",
    "    # 1) Drop obvious accidental index column (Unnamed: 0 or first column named '0')\n",
    "    if df.columns[0].startswith(\"Unnamed\") or df.columns[0] == \"0\":\n",
    "        df = df.iloc[:, 1:].copy()\n",
    "\n",
    "    # 2) If columns are metrics but are rows (transposed), try to detect and transpose\n",
    "    expected_metrics = {'P@10','R@10','NDCG@10','MAP@10','MPR@10','EvalUsers'}\n",
    "    cols_set = set(df.columns.astype(str))\n",
    "    # If the expected metrics are not in columns but are in the first column values, transpose.\n",
    "    if not expected_metrics.intersection(cols_set):\n",
    "        # check if first column contains metric names\n",
    "        first_col_vals = set(df.iloc[:,0].astype(str).str.strip().tolist())\n",
    "        if expected_metrics.intersection(first_col_vals):\n",
    "            try:\n",
    "                df = df.set_index(df.columns[0]).T.reset_index(drop=True)\n",
    "            except Exception:\n",
    "                pass\n",
    "\n",
    "    # 3) Ensure numeric columns are numeric\n",
    "    for c in df.columns:\n",
    "        # try to coerce numeric-like columns\n",
    "        try:\n",
    "            df[c] = pd.to_numeric(df[c], errors='ignore')\n",
    "        except Exception:\n",
    "            pass\n",
    "\n",
    "    # 4) If no friendly model names in index, create readable labels\n",
    "    if df.index.dtype != 'object' or all(isinstance(i, (int, np.integer, float)) for i in df.index):\n",
    "        # If a 'Model' column exists, use it; otherwise create Model_1, Model_2...\n",
    "        if 'Model' in df.columns:\n",
    "            df = df.set_index('Model')\n",
    "        else:\n",
    "            df.index = [f\"Model_{i+1}\" for i in range(len(df))]\n",
    "\n",
    "    # 5) Reorder columns to expected order where possible\n",
    "    desired_order = ['P@10','R@10','NDCG@10','MAP@10','MPR@10','EvalUsers']\n",
    "    present = [c for c in desired_order if c in df.columns]\n",
    "    others = [c for c in df.columns if c not in present]\n",
    "    df = df[present + others]\n",
    "\n",
    "    # ---- DISPLAY CLEAN TABLE ----\n",
    "    display(Markdown(f\"## 📊 Final evaluation metrics (loaded from `{csv_used}`)\"))\n",
    "    # Format numeric display: 6 decimals for floats, integer for EvalUsers if present\n",
    "    fmt = {}\n",
    "    for c in df.columns:\n",
    "        if c == 'EvalUsers':\n",
    "            fmt[c] = \"{:.0f}\"\n",
    "        else:\n",
    "            # only apply float format if column is numeric\n",
    "            if pd.api.types.is_numeric_dtype(df[c]):\n",
    "                fmt[c] = \"{:.6f}\"\n",
    "            else:\n",
    "                fmt[c] = \"{}\"\n",
    "    display(df.style.format(fmt).set_caption(\"Cleaned final scale summary metrics\"))\n",
    "\n",
    "    # ---- QUALITATIVE COMPARISONS (NO RAW NUMBERS) ----\n",
    "    present_metric_cols = [c for c in ['P@10','R@10','NDCG@10','MAP@10','MPR@10'] if c in df.columns]\n",
    "    qualitative_notes = []\n",
    "\n",
    "    if len(df) == 1:\n",
    "        qualitative_notes.append(\"Only a single model/row is present — no cross-model comparison available.\")\n",
    "    else:\n",
    "        for col in present_metric_cols:\n",
    "            try:\n",
    "                # Determine best model(s) for this metric (higher is better)\n",
    "                best_val = df[col].max()\n",
    "                best_models = df.index[df[col] == best_val].tolist()\n",
    "                if len(best_models) == 1:\n",
    "                    qualitative_notes.append(f\"- **{col}**: top performer — **{best_models[0]}**.\")\n",
    "                else:\n",
    "                    qualitative_notes.append(f\"- **{col}**: top performers (tie) — **{', '.join(best_models)}**.\")\n",
    "            except Exception:\n",
    "                # skip if comparison fails for a column\n",
    "                pass\n",
    "\n",
    "    # ---- HUMAN-FRIENDLY EXPLANATION (NO HARD THRESHOLDS) ----\n",
    "    explanation_lines = [\n",
    "        \"### 📘 Metric meanings (guidance — no numeric thresholds)\",\n",
    "        \"\",\n",
    "        \"- **Precision@10 (P@10)** — Of the top-10 items returned, the fraction that are relevant. In very large catalogs, absolute Precision values can be low while still being useful.\",\n",
    "        \"\",\n",
    "        \"- **Recall@10 (R@10)** — Fraction of the user's relevant items that appear in the top-10. High Recall means good coverage of what the user is likely to want.\",\n",
    "        \"\",\n",
    "        \"- **NDCG@10** — Rewards placing the most relevant items near the top. This is often the primary ranking metric to optimize when user satisfaction depends on top-list order.\",\n",
    "        \"\",\n",
    "        \"- **MAP@10** — Mean Average Precision across users; emphasizes consistent early correct placements.\",\n",
    "        \"\",\n",
    "        \"- **MPR@10** — A rank-based measure capturing how near the top relevant items are on average; complements NDCG/MAP.\",\n",
    "        \"\",\n",
    "        \"- **EvalUsers** — The number of users used for evaluation; larger is more reliable.\",\n",
    "        \"\",\n",
    "        \"### 🔎 How to interpret combinations (qualitative)\",\n",
    "        \"\",\n",
    "        \"- If **NDCG** and **MAP** improve together, the model provides reliably better top-ranked results across users.\",\n",
    "        \"- If a model shows higher **Recall** but lower **Precision**, it finds many relevant items but the top list may include more noise — consider stronger reranking or feature signals.\",\n",
    "        \"- A modest Precision in a huge catalog can still be valuable if **Recall** and **NDCG** are strong — the system surfaces relevant items and ranks them well even if many slots remain non-relevant.\",\n",
    "        \"\",\n",
    "        \"### ✅ Practical next steps (if you want to improve results)\",\n",
    "        \"\",\n",
    "        \"- Verify candidate recall (if many true items never enter the candidate pool, increase pool size or add ANN).\",\n",
    "        \"- Improve hard-negative mining diversity to teach the reranker harder distinctions.\",\n",
    "        \"- Add more features (metadata, temporal signals) to the LTR training data.\",\n",
    "        \"- Consider using stronger encoders (on GPU) or FAISS for ANN retrieval if compute allows.\"\n",
    "    ]\n",
    "\n",
    "    # ---- OUTPUT ----\n",
    "    if qualitative_notes:\n",
    "        display(Markdown(\"### 🔍 Qualitative model winners (per metric)\"))\n",
    "        display(Markdown(\"\\n\".join(qualitative_notes)))\n",
    "    display(Markdown(\"\\n\".join(explanation_lines)))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0c6e1dae",
   "metadata": {
    "papermill": {
     "duration": 0.028317,
     "end_time": "2025-10-01T18:41:25.314626",
     "exception": false,
     "start_time": "2025-10-01T18:41:25.286309",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [],
   "dockerImageVersionId": 31090,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 6745.213172,
   "end_time": "2025-10-01T18:41:28.518691",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-10-01T16:49:03.305519",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0088ff465c2f42599c969cde704c71ff": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "0092b764d6b2496b80450b8ff536e9df": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "00a6c72f544f4cfda2bdfad5d9ea4b44": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "02cd388e65fd447a8ac6b74ff03278bf": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "039fe6b614c84cad9532d8781450f2cc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_02cd388e65fd447a8ac6b74ff03278bf",
       "placeholder": "​",
       "style": "IPY_MODEL_c95d95c139ae49679d6649656ed46e57",
       "tabbable": null,
       "tooltip": null,
       "value": " 571/571 [00:00&lt;00:00, 62.8kB/s]"
      }
     },
     "0459278a31844f35821a044aafe96efd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "055241bcfa8e4a04a21e57f15651e93b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "05f31dd310da40a7a1c0429e16da6a16": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b6498fde38954e799fed200cfb9aa1c4",
       "placeholder": "​",
       "style": "IPY_MODEL_6c05028550d54de8a10313e2cb9cd7d3",
       "tabbable": null,
       "tooltip": null,
       "value": "sentence_bert_config.json: 100%"
      }
     },
     "07f7a300e0af4795a79957d8f34bfa1b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0812361d6e2b4679905b3a7d6b684459": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0e40095e501d4d738779ff0fb50a232a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "0f2ebea14cd24ed2ba0de117a5b1d4d4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f70bc75bc210444cbac1398da3a0597e",
       "max": 300.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_6b2ddcaa07414b53a5221d1b8272afa6",
       "tabbable": null,
       "tooltip": null,
       "value": 300.0
      }
     },
     "0f3a484961c443419c49d47d525f2cca": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fa95de236b76482891ef1d4dfb032411",
       "max": 1561.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_1ca1c394e33d46ff95d3f51478948cbc",
       "tabbable": null,
       "tooltip": null,
       "value": 1561.0
      }
     },
     "0f74e414be3e4c86979a363f9762fc16": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_457c6056de6e427ba5883a49050060ae",
        "IPY_MODEL_90eee494fd354222bc76f68cc6985646",
        "IPY_MODEL_c6c613862d2f47c09eb43e391939e818"
       ],
       "layout": "IPY_MODEL_3decd38197ac400f8261f0669318552e",
       "tabbable": null,
       "tooltip": null
      }
     },
     "10800168c9fb4cb194027ebf4b6f94e9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "10c0a8bde5474e058f159e722b855fa4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "1204941b2fea482c9f101a0691686590": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_9fba1f6fee0f4aa6ad6d8cee6f887395",
        "IPY_MODEL_88ab3561ca8042fb9221f3ae6a57eb07",
        "IPY_MODEL_f2abdc089eb74ca2814738c74492d22f"
       ],
       "layout": "IPY_MODEL_fd59cd93c44d427eb377ac0d55532ed7",
       "tabbable": null,
       "tooltip": null
      }
     },
     "12153e2f36b14cdc91cd3f9a49d020a7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "1389be020f4b497397e3b7ec9b41634b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "142862ac87224962a1ebde62d59be6dc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f1234d580f3d473f9d422cace50ffff3",
       "placeholder": "​",
       "style": "IPY_MODEL_2d466427b19e405292fc11f1585f1493",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating semantic_final_topk: 100%"
      }
     },
     "1571438c57db4e599011225e021d97d5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3ed2a29b7ead4eabb01b3d41cdb56db6",
        "IPY_MODEL_ca017ebf4b6e497b8e9cdc47ab874a04",
        "IPY_MODEL_5fb4e4c7197a4b6b8a09472ed64699ed"
       ],
       "layout": "IPY_MODEL_7c6da0fcb3a240e29e2d050cba8343a5",
       "tabbable": null,
       "tooltip": null
      }
     },
     "17483dbf3f7b4a789b07714575c34fca": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "184eeccee5da4690a1a4a6309ed6ae1a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "18e9cbf1c076413c84c827170203fe0e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "196dce22d29d426a830680f39cc200f5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_9f78e7b9205a4084a3759578b62d0d1c",
        "IPY_MODEL_d1ef50c4219040fc9362d46ebaaff32e",
        "IPY_MODEL_917089e5be214a42be0cdb0c3adf976b"
       ],
       "layout": "IPY_MODEL_a81d3862165d45ab92b7415f14e1d86b",
       "tabbable": null,
       "tooltip": null
      }
     },
     "1974d18ef412401a923e8e5c11762136": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_3dbe9a8ee66b4103a242fdc4302d6998",
        "IPY_MODEL_a60fb17c6ccc479a8dda0d5de048110c",
        "IPY_MODEL_f348c3985e1d4b84872f1f2642df90f1"
       ],
       "layout": "IPY_MODEL_7479087b35c047709788d14473765424",
       "tabbable": null,
       "tooltip": null
      }
     },
     "19a25bc2607743a78219e8307bb47963": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_76a3c1ec7f744240bed9f985b7f17942",
       "max": 363.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_5f0a8846c4494f0eaa634724d7e473c2",
       "tabbable": null,
       "tooltip": null,
       "value": 363.0
      }
     },
     "1afff60725d8419f96dc683e4e07fdd2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_05f31dd310da40a7a1c0429e16da6a16",
        "IPY_MODEL_62cb4509091648ac82d615b386ce0415",
        "IPY_MODEL_a331223eebf54fceb5ad2463188bf28d"
       ],
       "layout": "IPY_MODEL_d0aceaa881d846c3a2b29aebc8632c15",
       "tabbable": null,
       "tooltip": null
      }
     },
     "1b6a4ac22d68409aabca84e263e5fee3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "1bf13d487ff740a7aff7646e3dd0ae82": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1c6e43a208db416ca1c2048fb3bc02ef": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_17483dbf3f7b4a789b07714575c34fca",
       "max": 190.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_5c8495f945394e49bd5f5ae832236d00",
       "tabbable": null,
       "tooltip": null,
       "value": 190.0
      }
     },
     "1c995ad47fdf4e6792b6a5a7d2659af9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1ca1c394e33d46ff95d3f51478948cbc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "1cf03c0513dc4b47bafc359e9d71bccb": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1eb47698320a4a46875685de9634487c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0812361d6e2b4679905b3a7d6b684459",
       "placeholder": "​",
       "style": "IPY_MODEL_e139fada09f74639b6dc14cd45f19540",
       "tabbable": null,
       "tooltip": null,
       "value": "README.md: "
      }
     },
     "2083ad757296402395c243fe138ca73a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "21188fddfac544bab8d4da356f70547e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "212064f479454d099303be328c46a5aa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2424927f4ff743debb41064bde9319b7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_5e68d5d4032e4ba7b5aa051514d0eb06",
        "IPY_MODEL_0f2ebea14cd24ed2ba0de117a5b1d4d4",
        "IPY_MODEL_d789c07face04e23af9fa9fbc8202466"
       ],
       "layout": "IPY_MODEL_ff8444c593c6459dbc7059aea674891d",
       "tabbable": null,
       "tooltip": null
      }
     },
     "275f52d1709f49bd8dda2e68c5886ef0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_21188fddfac544bab8d4da356f70547e",
       "max": 35.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_3bf5f17e0e8a4fb7827f4c650ddb6545",
       "tabbable": null,
       "tooltip": null,
       "value": 35.0
      }
     },
     "283aa80e88544fd0944b79857f0dc26f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_aed971987bfa4274bb9efb89884dc28c",
       "placeholder": "​",
       "style": "IPY_MODEL_d3f3df2b93be4e96a996fd5ca7f381f0",
       "tabbable": null,
       "tooltip": null,
       "value": " 35/35 [21:59&lt;00:00, 35.57s/it]"
      }
     },
     "2a7fa62140654ff583dcf1278a639de1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "2aa15be026464d998ff652670b2fbae4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1389be020f4b497397e3b7ec9b41634b",
       "max": 437971872.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_c4bc7340b32e4a9b86b1a730ba09489b",
       "tabbable": null,
       "tooltip": null,
       "value": 437971872.0
      }
     },
     "2d466427b19e405292fc11f1585f1493": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "333169ea93af4ad681779591212517f5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_db40069cd31f4fa5baf2c658f9d73b51",
        "IPY_MODEL_275f52d1709f49bd8dda2e68c5886ef0",
        "IPY_MODEL_283aa80e88544fd0944b79857f0dc26f"
       ],
       "layout": "IPY_MODEL_53c1efedf88c45759bef17fc545053e0",
       "tabbable": null,
       "tooltip": null
      }
     },
     "349fd5d1a416444f9d27bbfc7472d9ec": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "35a2515d27ea4e9f84cab262884a884c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "36821ce7b8d247e08ec9f7d16b275076": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_1eb47698320a4a46875685de9634487c",
        "IPY_MODEL_57cb75882e1b4c27aa6411c36532551d",
        "IPY_MODEL_4191036c86304d02acaedb9769af7c62"
       ],
       "layout": "IPY_MODEL_bf56646508e34a64a5213b304cc5d746",
       "tabbable": null,
       "tooltip": null
      }
     },
     "3726cab91cd7426696aa573dec80b971": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "38d859cd9f614dd3b8b5e0833d763687": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8ba6d467140540e4b9d9734b23ba6ffe",
       "max": 20.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_de46f84a8e58405fb2d754bf0771f4ce",
       "tabbable": null,
       "tooltip": null,
       "value": 20.0
      }
     },
     "3985200f516d4652b5258875922457f1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3a7dc3b82754425fb2b0478f4ae6df43": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "3bf5f17e0e8a4fb7827f4c650ddb6545": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "3d971f2d69874c098d68e3b0720b9255": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_212064f479454d099303be328c46a5aa",
       "max": 116.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_43a0b3dc0a204f149fa803d556f0c5f5",
       "tabbable": null,
       "tooltip": null,
       "value": 116.0
      }
     },
     "3dbe9a8ee66b4103a242fdc4302d6998": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_af81d38af63348308af37d08cacb8b09",
       "placeholder": "​",
       "style": "IPY_MODEL_ee4d5f83e19445fe9be8f6e4530af0e3",
       "tabbable": null,
       "tooltip": null,
       "value": "README.md: "
      }
     },
     "3decd38197ac400f8261f0669318552e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3ed2a29b7ead4eabb01b3d41cdb56db6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_eb050b5086e1430eb4918c2ca9a83a20",
       "placeholder": "​",
       "style": "IPY_MODEL_b16e32a3cb794f77aea2392de4d93b83",
       "tabbable": null,
       "tooltip": null,
       "value": "modules.json: 100%"
      }
     },
     "3ed86fe1de464b188f2c71051da80372": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "407beda4e35841ac935f12bc74415587": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "40a6f42891214f10b59258d94cc97fb0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_c812bca4222543bb8153ccee55b98e52",
        "IPY_MODEL_c13e58cf61bd47199847c513a98abf08",
        "IPY_MODEL_039fe6b614c84cad9532d8781450f2cc"
       ],
       "layout": "IPY_MODEL_055241bcfa8e4a04a21e57f15651e93b",
       "tabbable": null,
       "tooltip": null
      }
     },
     "4191036c86304d02acaedb9769af7c62": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_861329ad46574a769c2e3791bfad6eb1",
       "placeholder": "​",
       "style": "IPY_MODEL_12153e2f36b14cdc91cd3f9a49d020a7",
       "tabbable": null,
       "tooltip": null,
       "value": " 11.6k/? [00:00&lt;00:00, 1.28MB/s]"
      }
     },
     "42cdccdb75f54191927f9c137b32f471": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "43a0b3dc0a204f149fa803d556f0c5f5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "457c6056de6e427ba5883a49050060ae": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_631cc9c4f31d4d4f8bba32cc617f93aa",
       "placeholder": "​",
       "style": "IPY_MODEL_8fdbd083c70b44e484ed7d11862dcb99",
       "tabbable": null,
       "tooltip": null,
       "value": "Amazon-Reviews-2023.py: "
      }
     },
     "45ff5986c32a4ae5bf7536983fe698de": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "485e3ab6fd4645b595aef5d3a36c0e66": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "49141d6c37b14206996eb18382a517c0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "49b1b565c6384fa1986aedb8645378e7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4bb92aca09e24c21b91592b5d32a1002": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4c96f8c45b674945a073c505d47b803b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "501e3d93414841caa95479d1ab43b93e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_cb1f310ec55a43528419b21b1e457ca0",
       "placeholder": "​",
       "style": "IPY_MODEL_b54cf64a0462441da3a04671e4b30e22",
       "tabbable": null,
       "tooltip": null,
       "value": " 239/239 [00:00&lt;00:00, 28.2kB/s]"
      }
     },
     "535b95ab6ddc4ee28a692687af87a063": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "53c1efedf88c45759bef17fc545053e0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "53e060c2981145a48e46e6849fa68b09": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "54eed02573de4850a00acce59f8b69ee": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "56258c9082524fa391be9bf39c3cf12f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3985200f516d4652b5258875922457f1",
       "placeholder": "​",
       "style": "IPY_MODEL_6b304a0889774213a97051864f28d560",
       "tabbable": null,
       "tooltip": null,
       "value": " 363/363 [00:00&lt;00:00, 50.0kB/s]"
      }
     },
     "5674f9dd063241768ed50beef27b69b1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "57cb75882e1b4c27aa6411c36532551d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_83c0278b1704458eb70803451e0a4e5c",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_a14760e67aee4713b939f48270cbafbb",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "591dbb1f4a0a406b88820451be37e200": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "5abb5e9d71384e3694ebdeec07079410": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0459278a31844f35821a044aafe96efd",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_d48eaa1c0668423281a202f51d4082e0",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "5bc0f9694e4f4ec58c793447a85cad22": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_07f7a300e0af4795a79957d8f34bfa1b",
       "max": 239.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_600524129df147369c7842dadd4402bc",
       "tabbable": null,
       "tooltip": null,
       "value": 239.0
      }
     },
     "5c8495f945394e49bd5f5ae832236d00": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "5e68d5d4032e4ba7b5aa051514d0eb06": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_49b1b565c6384fa1986aedb8645378e7",
       "placeholder": "​",
       "style": "IPY_MODEL_49141d6c37b14206996eb18382a517c0",
       "tabbable": null,
       "tooltip": null,
       "value": "Building Meta Prototype: 100%"
      }
     },
     "5f0a8846c4494f0eaa634724d7e473c2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "5fb4e4c7197a4b6b8a09472ed64699ed": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ee04374f14e048578eaf334a0727280c",
       "placeholder": "​",
       "style": "IPY_MODEL_e627d0b3b7b9467394f6728e7cbbd1fb",
       "tabbable": null,
       "tooltip": null,
       "value": " 349/349 [00:00&lt;00:00, 45.1kB/s]"
      }
     },
     "600524129df147369c7842dadd4402bc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "62c1e0640e7e46c687736aa3765bd6d1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "62cb4509091648ac82d615b386ce0415": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1c995ad47fdf4e6792b6a5a7d2659af9",
       "max": 53.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_cf25cdbe051d4dffa45b07ad8d85d6cb",
       "tabbable": null,
       "tooltip": null,
       "value": 53.0
      }
     },
     "631cc9c4f31d4d4f8bba32cc617f93aa": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "657555993825454ba4b2ff80cc4ad86f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "669fe70f19924fd8bd6192c6d9979f5b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c036ac46844542028131ea7e44c42bf7",
       "placeholder": "​",
       "style": "IPY_MODEL_f792f9c962764b4796c5c3eea67e9aa0",
       "tabbable": null,
       "tooltip": null,
       "value": " 1561/1561 [54:19&lt;00:00,  2.11s/it]"
      }
     },
     "683b5b27beb94812bde871cb72869a8e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6962c47bf850475fad6ac7d6adb62191": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6b2ddcaa07414b53a5221d1b8272afa6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "6b304a0889774213a97051864f28d560": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6c05028550d54de8a10313e2cb9cd7d3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6cafeb4129bc42e3a37c73cf28ec753d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0092b764d6b2496b80450b8ff536e9df",
       "placeholder": "​",
       "style": "IPY_MODEL_c743720e46984b25aaee51282beee6d5",
       "tabbable": null,
       "tooltip": null,
       "value": " 438M/438M [00:02&lt;00:00, 348MB/s]"
      }
     },
     "6f7ebc535ced40e9a2bd4a71738c6d67": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7147bfe591cd4783b70e797933ec68bc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "718178bf88704a2aa5eceb213f619c14": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "7479087b35c047709788d14473765424": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "74f91d095e9a42a98f4c438ae075365b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "76a3c1ec7f744240bed9f985b7f17942": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "76b5b99363c74e588471fd7cb199a653": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_de33aafad47642c58bafe71569af8507",
        "IPY_MODEL_0f3a484961c443419c49d47d525f2cca",
        "IPY_MODEL_669fe70f19924fd8bd6192c6d9979f5b"
       ],
       "layout": "IPY_MODEL_8f8ed703da684c2e9bb7ca480a030239",
       "tabbable": null,
       "tooltip": null
      }
     },
     "7b5ebabc7df84f40966043c89f472e6b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "7c6da0fcb3a240e29e2d050cba8343a5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "80f1e2439fb4445abaab5294fc8755ed": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "816ad26a67e44142a83a868e465c005c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_d4e3fb13681647ffa46df893dec3b9ea",
        "IPY_MODEL_3d971f2d69874c098d68e3b0720b9255",
        "IPY_MODEL_c076b2ef27a8485a869a06049623bc1d"
       ],
       "layout": "IPY_MODEL_b0fbaaa8ac474120b6ba0d9fee7bc38e",
       "tabbable": null,
       "tooltip": null
      }
     },
     "83c0278b1704458eb70803451e0a4e5c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "85cb47bdf2ea4447b6b8b24af9448cee": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b96dcb9e26d740bf9eb19aa7d28e079e",
       "placeholder": "​",
       "style": "IPY_MODEL_3a7dc3b82754425fb2b0478f4ae6df43",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [00:06&lt;00:00, 157.32it/s]"
      }
     },
     "85fe3a997d024065bb7842d2f047ccf1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "861329ad46574a769c2e3791bfad6eb1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "86fdee1d291643e6a22b73112b2a2322": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "88ab3561ca8042fb9221f3ae6a57eb07": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e4ed0e60732246c4a5cd4f523143e3a5",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_85fe3a997d024065bb7842d2f047ccf1",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "8ba6d467140540e4b9d9734b23ba6ffe": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8e0479afffa84dba9791a8c1e806206c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_9beb7bcb3b1048b597973f559566e863",
        "IPY_MODEL_5bc0f9694e4f4ec58c793447a85cad22",
        "IPY_MODEL_501e3d93414841caa95479d1ab43b93e"
       ],
       "layout": "IPY_MODEL_eed96aa9d12a4b788135f6e649fe48b5",
       "tabbable": null,
       "tooltip": null
      }
     },
     "8f639afa061c4c14b15305392f795b6d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "8f8ed703da684c2e9bb7ca480a030239": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8fdbd083c70b44e484ed7d11862dcb99": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "90eee494fd354222bc76f68cc6985646": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1b6a4ac22d68409aabca84e263e5fee3",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_657555993825454ba4b2ff80cc4ad86f",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "917089e5be214a42be0cdb0c3adf976b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_349fd5d1a416444f9d27bbfc7472d9ec",
       "placeholder": "​",
       "style": "IPY_MODEL_80f1e2439fb4445abaab5294fc8755ed",
       "tabbable": null,
       "tooltip": null,
       "value": " 20/20 [00:01&lt;00:00, 18.24it/s]"
      }
     },
     "93883a54cfff42958ff7645a97df782e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "93c57aec57ca47c188ae3227afabaa93": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "94cadfb4c8e048f8b9cf579544d9639f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "960fbc2bb90241f78b50d2476995600c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9856396a9f074b108008510560ba1aa0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_d8cefc9561d44e37930de589021258dd",
       "placeholder": "​",
       "style": "IPY_MODEL_b3f5ad95936a4c83a24c0051c2d49e69",
       "tabbable": null,
       "tooltip": null,
       "value": " 190/190 [00:00&lt;00:00, 25.3kB/s]"
      }
     },
     "99195c0e2dd144adac71fb94491b9148": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_718178bf88704a2aa5eceb213f619c14",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_184eeccee5da4690a1a4a6309ed6ae1a",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "9b5c56a7831d44a399edb38e874394e3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "9beb7bcb3b1048b597973f559566e863": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3726cab91cd7426696aa573dec80b971",
       "placeholder": "​",
       "style": "IPY_MODEL_ac8ed91fe94546feb7a4d03afe098382",
       "tabbable": null,
       "tooltip": null,
       "value": "special_tokens_map.json: 100%"
      }
     },
     "9f78e7b9205a4084a3759578b62d0d1c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_94cadfb4c8e048f8b9cf579544d9639f",
       "placeholder": "​",
       "style": "IPY_MODEL_cabe34efab824c77943b69496ff0d4c8",
       "tabbable": null,
       "tooltip": null,
       "value": "100%"
      }
     },
     "9fba1f6fee0f4aa6ad6d8cee6f887395": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_54eed02573de4850a00acce59f8b69ee",
       "placeholder": "​",
       "style": "IPY_MODEL_eacad178324d42a7bc8bb5469caa7782",
       "tabbable": null,
       "tooltip": null,
       "value": "Evaluating lgbm_final_topk: 100%"
      }
     },
     "9fe3139d0b864826860ae15381862ce1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_18e9cbf1c076413c84c827170203fe0e",
       "placeholder": "​",
       "style": "IPY_MODEL_535b95ab6ddc4ee28a692687af87a063",
       "tabbable": null,
       "tooltip": null,
       "value": "vocab.txt: "
      }
     },
     "9fe9dcb09d26485ab30977d8b8690534": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ebc49da7a7c94ca6a5f6213c1484d081",
        "IPY_MODEL_19a25bc2607743a78219e8307bb47963",
        "IPY_MODEL_56258c9082524fa391be9bf39c3cf12f"
       ],
       "layout": "IPY_MODEL_62c1e0640e7e46c687736aa3765bd6d1",
       "tabbable": null,
       "tooltip": null
      }
     },
     "a14760e67aee4713b939f48270cbafbb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "a1599335d9134641850a5805cd591fd7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a331223eebf54fceb5ad2463188bf28d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_c693b777985b4ef5a08731eb60921864",
       "placeholder": "​",
       "style": "IPY_MODEL_eb253bba94f64e8e8cf5c573d5ea709e",
       "tabbable": null,
       "tooltip": null,
       "value": " 53.0/53.0 [00:00&lt;00:00, 7.40kB/s]"
      }
     },
     "a39a654b0eb34c89a35e7407f3fd420c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_86fdee1d291643e6a22b73112b2a2322",
       "placeholder": "​",
       "style": "IPY_MODEL_c5d7232731bc4a4ebf52125353dad8a1",
       "tabbable": null,
       "tooltip": null,
       "value": "model.safetensors: 100%"
      }
     },
     "a400ebc8d7604c239b3d166933b5f79e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a560ea55b78a47f1b45109aeb7ef52ff": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a5a70d0ce8764fb6901a91c9a30d5927": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a60fb17c6ccc479a8dda0d5de048110c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_b4f7eac6317c47dca0634a8c079ab37b",
       "max": 1.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_caaaa7e821e74c9a93152623471d9086",
       "tabbable": null,
       "tooltip": null,
       "value": 1.0
      }
     },
     "a7868115c9694df98deb80d55498e49b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a81d3862165d45ab92b7415f14e1d86b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "aa34e6328e4a4beb9ca77f4934f367af": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_d124b9afbb3f46a388f12c90ebf98f5f",
        "IPY_MODEL_1c6e43a208db416ca1c2048fb3bc02ef",
        "IPY_MODEL_9856396a9f074b108008510560ba1aa0"
       ],
       "layout": "IPY_MODEL_42cdccdb75f54191927f9c137b32f471",
       "tabbable": null,
       "tooltip": null
      }
     },
     "ac8ed91fe94546feb7a4d03afe098382": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "acde4e8088b547f5a59ac681d1ccbaff": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "aed971987bfa4274bb9efb89884dc28c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "af81d38af63348308af37d08cacb8b09": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b01623eb60ce4c6597e21cb819745464": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a5a70d0ce8764fb6901a91c9a30d5927",
       "placeholder": "​",
       "style": "IPY_MODEL_b4ba55d8887643ebbd3c4be2cc41622d",
       "tabbable": null,
       "tooltip": null,
       "value": " 466k/? [00:00&lt;00:00, 37.2MB/s]"
      }
     },
     "b0fbaaa8ac474120b6ba0d9fee7bc38e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b16e32a3cb794f77aea2392de4d93b83": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b3f5ad95936a4c83a24c0051c2d49e69": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b4ba55d8887643ebbd3c4be2cc41622d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b4f7eac6317c47dca0634a8c079ab37b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": "20px"
      }
     },
     "b54cf64a0462441da3a04671e4b30e22": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "b6498fde38954e799fed200cfb9aa1c4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b96dcb9e26d740bf9eb19aa7d28e079e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b9b27c3845df45d5b7388941c3507b50": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1cf03c0513dc4b47bafc359e9d71bccb",
       "placeholder": "​",
       "style": "IPY_MODEL_591dbb1f4a0a406b88820451be37e200",
       "tabbable": null,
       "tooltip": null,
       "value": " 20/20 [00:01&lt;00:00, 16.64it/s]"
      }
     },
     "bb1c8b7e62e841cc8e5d660c02e450a5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_74f91d095e9a42a98f4c438ae075365b",
       "placeholder": "​",
       "style": "IPY_MODEL_a560ea55b78a47f1b45109aeb7ef52ff",
       "tabbable": null,
       "tooltip": null,
       "value": "tokenizer.json: "
      }
     },
     "beedeb0f4a4744829f0e6e04bdcad42a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_9fe3139d0b864826860ae15381862ce1",
        "IPY_MODEL_99195c0e2dd144adac71fb94491b9148",
        "IPY_MODEL_d710337e7a8544c8b000133dc5def77e"
       ],
       "layout": "IPY_MODEL_960fbc2bb90241f78b50d2476995600c",
       "tabbable": null,
       "tooltip": null
      }
     },
     "bf56646508e34a64a5213b304cc5d746": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c036ac46844542028131ea7e44c42bf7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c076b2ef27a8485a869a06049623bc1d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_93c57aec57ca47c188ae3227afabaa93",
       "placeholder": "​",
       "style": "IPY_MODEL_d35558a2afdb47fcbec7fc422882b882",
       "tabbable": null,
       "tooltip": null,
       "value": " 116/116 [00:00&lt;00:00, 15.3kB/s]"
      }
     },
     "c13e58cf61bd47199847c513a98abf08": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_10800168c9fb4cb194027ebf4b6f94e9",
       "max": 571.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_8f639afa061c4c14b15305392f795b6d",
       "tabbable": null,
       "tooltip": null,
       "value": 571.0
      }
     },
     "c4bc7340b32e4a9b86b1a730ba09489b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "c5d7232731bc4a4ebf52125353dad8a1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "c693b777985b4ef5a08731eb60921864": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c6c613862d2f47c09eb43e391939e818": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f4b9b05e66784b6f91856864af25538d",
       "placeholder": "​",
       "style": "IPY_MODEL_acde4e8088b547f5a59ac681d1ccbaff",
       "tabbable": null,
       "tooltip": null,
       "value": " 39.6k/? [00:00&lt;00:00, 3.81MB/s]"
      }
     },
     "c743720e46984b25aaee51282beee6d5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "c812bca4222543bb8153ccee55b98e52": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1bf13d487ff740a7aff7646e3dd0ae82",
       "placeholder": "​",
       "style": "IPY_MODEL_00a6c72f544f4cfda2bdfad5d9ea4b44",
       "tabbable": null,
       "tooltip": null,
       "value": "config.json: 100%"
      }
     },
     "c95d95c139ae49679d6649656ed46e57": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ca017ebf4b6e497b8e9cdc47ab874a04": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4bb92aca09e24c21b91592b5d32a1002",
       "max": 349.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_45ff5986c32a4ae5bf7536983fe698de",
       "tabbable": null,
       "tooltip": null,
       "value": 349.0
      }
     },
     "ca064573ec8546a493bc8a6efe2bc581": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "caaaa7e821e74c9a93152623471d9086": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "cabe34efab824c77943b69496ff0d4c8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "cb1f310ec55a43528419b21b1e457ca0": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cec97456d5a647ffa3e27e77cf765d89": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "cf25cdbe051d4dffa45b07ad8d85d6cb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "d0aceaa881d846c3a2b29aebc8632c15": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "d124b9afbb3f46a388f12c90ebf98f5f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_7b5ebabc7df84f40966043c89f472e6b",
       "placeholder": "​",
       "style": "IPY_MODEL_0e40095e501d4d738779ff0fb50a232a",
       "tabbable": null,
       "tooltip": null,
       "value": "config.json: 100%"
      }
     },
     "d1ef50c4219040fc9362d46ebaaff32e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_485e3ab6fd4645b595aef5d3a36c0e66",
       "max": 20.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_cec97456d5a647ffa3e27e77cf765d89",
       "tabbable": null,
       "tooltip": null,
       "value": 20.0
      }
     },
     "d35558a2afdb47fcbec7fc422882b882": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d3f3df2b93be4e96a996fd5ca7f381f0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "d48eaa1c0668423281a202f51d4082e0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "d4e3fb13681647ffa46df893dec3b9ea": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e0246ab78c244f08b0b7a4aeee0b6790",
       "placeholder": "​",
       "style": "IPY_MODEL_7147bfe591cd4783b70e797933ec68bc",
       "tabbable": null,
       "tooltip": null,
       "value": "config_sentence_transformers.json: 100%"
      }
     },
     "d6d33a70d745407b92bb9dc8768e7083": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a1599335d9134641850a5805cd591fd7",
       "max": 1000.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_0088ff465c2f42599c969cde704c71ff",
       "tabbable": null,
       "tooltip": null,
       "value": 1000.0
      }
     },
     "d710337e7a8544c8b000133dc5def77e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ca064573ec8546a493bc8a6efe2bc581",
       "placeholder": "​",
       "style": "IPY_MODEL_a7868115c9694df98deb80d55498e49b",
       "tabbable": null,
       "tooltip": null,
       "value": " 232k/? [00:00&lt;00:00, 22.8MB/s]"
      }
     },
     "d789c07face04e23af9fa9fbc8202466": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3ed86fe1de464b188f2c71051da80372",
       "placeholder": "​",
       "style": "IPY_MODEL_dc3bf1972a204b77bc2a62146b56781d",
       "tabbable": null,
       "tooltip": null,
       "value": " 300/300 [01:08&lt;00:00,  4.47it/s]"
      }
     },
     "d8cefc9561d44e37930de589021258dd": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "db40069cd31f4fa5baf2c658f9d73b51": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2a7fa62140654ff583dcf1278a639de1",
       "placeholder": "​",
       "style": "IPY_MODEL_2083ad757296402395c243fe138ca73a",
       "tabbable": null,
       "tooltip": null,
       "value": "SBERT encode: 100%"
      }
     },
     "dbf84ece8bbc49c18eba0035df9f4658": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_53e060c2981145a48e46e6849fa68b09",
       "placeholder": "​",
       "style": "IPY_MODEL_683b5b27beb94812bde871cb72869a8e",
       "tabbable": null,
       "tooltip": null,
       "value": "Best trial: 19. Best value: -0.0932677: 100%"
      }
     },
     "dc3bf1972a204b77bc2a62146b56781d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "dda7e0f688874c9db41f30e30cf141a5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_a39a654b0eb34c89a35e7407f3fd420c",
        "IPY_MODEL_2aa15be026464d998ff652670b2fbae4",
        "IPY_MODEL_6cafeb4129bc42e3a37c73cf28ec753d"
       ],
       "layout": "IPY_MODEL_6962c47bf850475fad6ac7d6adb62191",
       "tabbable": null,
       "tooltip": null
      }
     },
     "de33aafad47642c58bafe71569af8507": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_93883a54cfff42958ff7645a97df782e",
       "placeholder": "​",
       "style": "IPY_MODEL_10c0a8bde5474e058f159e722b855fa4",
       "tabbable": null,
       "tooltip": null,
       "value": "Building Meta Scale: 100%"
      }
     },
     "de46f84a8e58405fb2d754bf0771f4ce": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "e0246ab78c244f08b0b7a4aeee0b6790": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e07ecae9e81647ccbc2d4352765123e2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_bb1c8b7e62e841cc8e5d660c02e450a5",
        "IPY_MODEL_5abb5e9d71384e3694ebdeec07079410",
        "IPY_MODEL_b01623eb60ce4c6597e21cb819745464"
       ],
       "layout": "IPY_MODEL_5674f9dd063241768ed50beef27b69b1",
       "tabbable": null,
       "tooltip": null
      }
     },
     "e139fada09f74639b6dc14cd45f19540": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "e4ed0e60732246c4a5cd4f523143e3a5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e627d0b3b7b9467394f6728e7cbbd1fb": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "eacad178324d42a7bc8bb5469caa7782": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "eb050b5086e1430eb4918c2ca9a83a20": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "eb253bba94f64e8e8cf5c573d5ea709e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "ebc49da7a7c94ca6a5f6213c1484d081": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4c96f8c45b674945a073c505d47b803b",
       "placeholder": "​",
       "style": "IPY_MODEL_fc840f3a343044dab16ed929123106bd",
       "tabbable": null,
       "tooltip": null,
       "value": "tokenizer_config.json: 100%"
      }
     },
     "ee04374f14e048578eaf334a0727280c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ee4d5f83e19445fe9be8f6e4530af0e3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "eed96aa9d12a4b788135f6e649fe48b5": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f1234d580f3d473f9d422cace50ffff3": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f2abdc089eb74ca2814738c74492d22f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9b5c56a7831d44a399edb38e874394e3",
       "placeholder": "​",
       "style": "IPY_MODEL_407beda4e35841ac935f12bc74415587",
       "tabbable": null,
       "tooltip": null,
       "value": " 1000/1000 [32:25&lt;00:00,  1.88s/it]"
      }
     },
     "f348c3985e1d4b84872f1f2642df90f1": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_a400ebc8d7604c239b3d166933b5f79e",
       "placeholder": "​",
       "style": "IPY_MODEL_f5543b31f5434acfada4e2cd0cad35af",
       "tabbable": null,
       "tooltip": null,
       "value": " 30.3k/? [00:00&lt;00:00, 3.10MB/s]"
      }
     },
     "f4b9b05e66784b6f91856864af25538d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f5543b31f5434acfada4e2cd0cad35af": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "f70bc75bc210444cbac1398da3a0597e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f792f9c962764b4796c5c3eea67e9aa0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "fa95de236b76482891ef1d4dfb032411": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fc2f87ac80bd438bab25f864273144c4": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_142862ac87224962a1ebde62d59be6dc",
        "IPY_MODEL_d6d33a70d745407b92bb9dc8768e7083",
        "IPY_MODEL_85cb47bdf2ea4447b6b8b24af9448cee"
       ],
       "layout": "IPY_MODEL_35a2515d27ea4e9f84cab262884a884c",
       "tabbable": null,
       "tooltip": null
      }
     },
     "fc840f3a343044dab16ed929123106bd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "fd21b54857514776b485184b8e8a910f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_dbf84ece8bbc49c18eba0035df9f4658",
        "IPY_MODEL_38d859cd9f614dd3b8b5e0833d763687",
        "IPY_MODEL_b9b27c3845df45d5b7388941c3507b50"
       ],
       "layout": "IPY_MODEL_6f7ebc535ced40e9a2bd4a71738c6d67",
       "tabbable": null,
       "tooltip": null
      }
     },
     "fd59cd93c44d427eb377ac0d55532ed7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ff8444c593c6459dbc7059aea674891d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
